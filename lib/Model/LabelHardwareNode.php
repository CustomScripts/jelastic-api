<?php
/**
 * LabelHardwareNode
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LabelHardwareNode Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LabelHardwareNode implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Label_hardwareNode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'data' => 'string',
        'tcpProtocol' => 'string',
        'hwType' => 'string',
        'previousL2Ip' => 'string',
        'virtualNetworkHostIds' => 'object[]',
        'isFWUpdated' => 'bool',
        'previousL2Enabled' => 'bool',
        'virtualNetIp' => 'string',
        'tcpPort' => 'int',
        'realExternalIp' => 'string',
        'hostname' => 'string',
        'osType' => 'string',
        'sshCredential' => '\OpenAPI\Client\Model\LabelHardwareNodeSshCredential',
        'l2Ready' => 'bool',
        'power' => 'int',
        'hardwareNodeGroup' => 'string',
        'vzLicense' => '\OpenAPI\Client\Model\LabelHardwareNodeVzLicense',
        'cpuNumber' => 'int',
        'sshPort' => 'int',
        'hardwareNodeClusters' => 'object[]',
        'soapProtocol' => 'string',
        'ipsecKey' => 'string',
        'vzType' => 'int',
        'soapCredential' => '\OpenAPI\Client\Model\Credential',
        'ipAddress' => 'string',
        'physCpuNumber' => 'int',
        'loadMarkOffset' => 'int',
        'labels' => '\OpenAPI\Client\Model\Label[]',
        'vzInstall' => 'bool',
        'cpuFreq' => 'int',
        'dockerCacheLocationType' => 'string',
        'l2Enabled' => 'bool',
        'regionGateNumber' => 'int',
        'vsVersion' => '\OpenAPI\Client\Model\VSVersions',
        'l2Ip' => 'string',
        'externalIp' => 'string',
        'soapPort' => 'int',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'data' => null,
        'tcpProtocol' => null,
        'hwType' => null,
        'previousL2Ip' => null,
        'virtualNetworkHostIds' => 'int32',
        'isFWUpdated' => null,
        'previousL2Enabled' => null,
        'virtualNetIp' => null,
        'tcpPort' => 'int32',
        'realExternalIp' => null,
        'hostname' => null,
        'osType' => null,
        'sshCredential' => null,
        'l2Ready' => null,
        'power' => 'int32',
        'hardwareNodeGroup' => null,
        'vzLicense' => null,
        'cpuNumber' => 'int32',
        'sshPort' => 'int32',
        'hardwareNodeClusters' => null,
        'soapProtocol' => null,
        'ipsecKey' => null,
        'vzType' => 'int32',
        'soapCredential' => null,
        'ipAddress' => null,
        'physCpuNumber' => 'int32',
        'loadMarkOffset' => 'int32',
        'labels' => null,
        'vzInstall' => null,
        'cpuFreq' => 'int32',
        'dockerCacheLocationType' => null,
        'l2Enabled' => null,
        'regionGateNumber' => 'int32',
        'vsVersion' => null,
        'l2Ip' => null,
        'externalIp' => null,
        'soapPort' => 'int32',
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'data' => false,
		'tcpProtocol' => false,
		'hwType' => false,
		'previousL2Ip' => false,
		'virtualNetworkHostIds' => false,
		'isFWUpdated' => false,
		'previousL2Enabled' => false,
		'virtualNetIp' => false,
		'tcpPort' => false,
		'realExternalIp' => false,
		'hostname' => false,
		'osType' => false,
		'sshCredential' => false,
		'l2Ready' => false,
		'power' => false,
		'hardwareNodeGroup' => false,
		'vzLicense' => false,
		'cpuNumber' => false,
		'sshPort' => false,
		'hardwareNodeClusters' => false,
		'soapProtocol' => false,
		'ipsecKey' => false,
		'vzType' => false,
		'soapCredential' => false,
		'ipAddress' => false,
		'physCpuNumber' => false,
		'loadMarkOffset' => false,
		'labels' => false,
		'vzInstall' => false,
		'cpuFreq' => false,
		'dockerCacheLocationType' => false,
		'l2Enabled' => false,
		'regionGateNumber' => false,
		'vsVersion' => false,
		'l2Ip' => false,
		'externalIp' => false,
		'soapPort' => false,
		'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data' => 'data',
        'tcpProtocol' => 'tcpProtocol',
        'hwType' => 'hwType',
        'previousL2Ip' => 'previousL2Ip',
        'virtualNetworkHostIds' => 'virtualNetworkHostIds',
        'isFWUpdated' => 'isFWUpdated',
        'previousL2Enabled' => 'previousL2Enabled',
        'virtualNetIp' => 'virtualNetIp',
        'tcpPort' => 'tcpPort',
        'realExternalIp' => 'realExternalIp',
        'hostname' => 'hostname',
        'osType' => 'osType',
        'sshCredential' => 'sshCredential',
        'l2Ready' => 'l2Ready',
        'power' => 'power',
        'hardwareNodeGroup' => 'hardwareNodeGroup',
        'vzLicense' => 'vzLicense',
        'cpuNumber' => 'cpuNumber',
        'sshPort' => 'sshPort',
        'hardwareNodeClusters' => 'hardwareNodeClusters',
        'soapProtocol' => 'soapProtocol',
        'ipsecKey' => 'ipsecKey',
        'vzType' => 'vzType',
        'soapCredential' => 'soapCredential',
        'ipAddress' => 'ipAddress',
        'physCpuNumber' => 'physCpuNumber',
        'loadMarkOffset' => 'loadMarkOffset',
        'labels' => 'labels',
        'vzInstall' => 'vzInstall',
        'cpuFreq' => 'cpuFreq',
        'dockerCacheLocationType' => 'dockerCacheLocationType',
        'l2Enabled' => 'l2Enabled',
        'regionGateNumber' => 'regionGateNumber',
        'vsVersion' => 'vsVersion',
        'l2Ip' => 'l2Ip',
        'externalIp' => 'externalIp',
        'soapPort' => 'soapPort',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data' => 'setData',
        'tcpProtocol' => 'setTcpProtocol',
        'hwType' => 'setHwType',
        'previousL2Ip' => 'setPreviousL2Ip',
        'virtualNetworkHostIds' => 'setVirtualNetworkHostIds',
        'isFWUpdated' => 'setIsFWUpdated',
        'previousL2Enabled' => 'setPreviousL2Enabled',
        'virtualNetIp' => 'setVirtualNetIp',
        'tcpPort' => 'setTcpPort',
        'realExternalIp' => 'setRealExternalIp',
        'hostname' => 'setHostname',
        'osType' => 'setOsType',
        'sshCredential' => 'setSshCredential',
        'l2Ready' => 'setL2Ready',
        'power' => 'setPower',
        'hardwareNodeGroup' => 'setHardwareNodeGroup',
        'vzLicense' => 'setVzLicense',
        'cpuNumber' => 'setCpuNumber',
        'sshPort' => 'setSshPort',
        'hardwareNodeClusters' => 'setHardwareNodeClusters',
        'soapProtocol' => 'setSoapProtocol',
        'ipsecKey' => 'setIpsecKey',
        'vzType' => 'setVzType',
        'soapCredential' => 'setSoapCredential',
        'ipAddress' => 'setIpAddress',
        'physCpuNumber' => 'setPhysCpuNumber',
        'loadMarkOffset' => 'setLoadMarkOffset',
        'labels' => 'setLabels',
        'vzInstall' => 'setVzInstall',
        'cpuFreq' => 'setCpuFreq',
        'dockerCacheLocationType' => 'setDockerCacheLocationType',
        'l2Enabled' => 'setL2Enabled',
        'regionGateNumber' => 'setRegionGateNumber',
        'vsVersion' => 'setVsVersion',
        'l2Ip' => 'setL2Ip',
        'externalIp' => 'setExternalIp',
        'soapPort' => 'setSoapPort',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data' => 'getData',
        'tcpProtocol' => 'getTcpProtocol',
        'hwType' => 'getHwType',
        'previousL2Ip' => 'getPreviousL2Ip',
        'virtualNetworkHostIds' => 'getVirtualNetworkHostIds',
        'isFWUpdated' => 'getIsFWUpdated',
        'previousL2Enabled' => 'getPreviousL2Enabled',
        'virtualNetIp' => 'getVirtualNetIp',
        'tcpPort' => 'getTcpPort',
        'realExternalIp' => 'getRealExternalIp',
        'hostname' => 'getHostname',
        'osType' => 'getOsType',
        'sshCredential' => 'getSshCredential',
        'l2Ready' => 'getL2Ready',
        'power' => 'getPower',
        'hardwareNodeGroup' => 'getHardwareNodeGroup',
        'vzLicense' => 'getVzLicense',
        'cpuNumber' => 'getCpuNumber',
        'sshPort' => 'getSshPort',
        'hardwareNodeClusters' => 'getHardwareNodeClusters',
        'soapProtocol' => 'getSoapProtocol',
        'ipsecKey' => 'getIpsecKey',
        'vzType' => 'getVzType',
        'soapCredential' => 'getSoapCredential',
        'ipAddress' => 'getIpAddress',
        'physCpuNumber' => 'getPhysCpuNumber',
        'loadMarkOffset' => 'getLoadMarkOffset',
        'labels' => 'getLabels',
        'vzInstall' => 'getVzInstall',
        'cpuFreq' => 'getCpuFreq',
        'dockerCacheLocationType' => 'getDockerCacheLocationType',
        'l2Enabled' => 'getL2Enabled',
        'regionGateNumber' => 'getRegionGateNumber',
        'vsVersion' => 'getVsVersion',
        'l2Ip' => 'getL2Ip',
        'externalIp' => 'getExternalIp',
        'soapPort' => 'getSoapPort',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const HW_TYPE_BARE_METAL_0 = 'BARE_METAL(0)';
    public const HW_TYPE_VIRTUAL_MACHINE_1 = 'VIRTUAL_MACHINE(1)';
    public const OS_TYPE_LINUX_0 = 'LINUX(0)';
    public const OS_TYPE_WINDOWS2008_1 = 'WINDOWS2008(1)';
    public const OS_TYPE_WINDOWS2012_2 = 'WINDOWS2012(2)';
    public const OS_TYPE_WINDOWS2016_3 = 'WINDOWS2016(3)';
    public const OS_TYPE_WINDOWS2019_4 = 'WINDOWS2019(4)';
    public const DOCKER_CACHE_LOCATION_TYPE_HOST_0 = 'HOST(0)';
    public const DOCKER_CACHE_LOCATION_TYPE_VM_1 = 'VM(1)';
    public const DOCKER_CACHE_LOCATION_TYPE_CT_2 = 'CT(2)';
    public const DOCKER_CACHE_LOCATION_TYPE_NONE_3 = 'NONE(3)';
    public const STATUS_ACTIVE_0 = 'ACTIVE(0)';
    public const STATUS_EVACUATING_1 = 'EVACUATING(1)';
    public const STATUS_BROKEN_2 = 'BROKEN(2)';
    public const STATUS_INFRASTRUCTURE_NODE_3 = 'INFRASTRUCTURE_NODE(3)';
    public const STATUS_MAINTENANCE_4 = 'MAINTENANCE(4)';
    public const STATUS_EVACUATED_5 = 'EVACUATED(5)';
    public const STATUS_EVACUATION_FAILED_6 = 'EVACUATION_FAILED(6)';
    public const STATUS_INSTALLING_7 = 'INSTALLING(7)';
    public const STATUS_INSTALLATION_FAILED_8 = 'INSTALLATION_FAILED(8)';
    public const STATUS_UNLICENSED_9 = 'UNLICENSED(9)';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHwTypeAllowableValues()
    {
        return [
            self::HW_TYPE_BARE_METAL_0,
            self::HW_TYPE_VIRTUAL_MACHINE_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOsTypeAllowableValues()
    {
        return [
            self::OS_TYPE_LINUX_0,
            self::OS_TYPE_WINDOWS2008_1,
            self::OS_TYPE_WINDOWS2012_2,
            self::OS_TYPE_WINDOWS2016_3,
            self::OS_TYPE_WINDOWS2019_4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDockerCacheLocationTypeAllowableValues()
    {
        return [
            self::DOCKER_CACHE_LOCATION_TYPE_HOST_0,
            self::DOCKER_CACHE_LOCATION_TYPE_VM_1,
            self::DOCKER_CACHE_LOCATION_TYPE_CT_2,
            self::DOCKER_CACHE_LOCATION_TYPE_NONE_3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE_0,
            self::STATUS_EVACUATING_1,
            self::STATUS_BROKEN_2,
            self::STATUS_INFRASTRUCTURE_NODE_3,
            self::STATUS_MAINTENANCE_4,
            self::STATUS_EVACUATED_5,
            self::STATUS_EVACUATION_FAILED_6,
            self::STATUS_INSTALLING_7,
            self::STATUS_INSTALLATION_FAILED_8,
            self::STATUS_UNLICENSED_9,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('tcpProtocol', $data ?? [], null);
        $this->setIfExists('hwType', $data ?? [], null);
        $this->setIfExists('previousL2Ip', $data ?? [], null);
        $this->setIfExists('virtualNetworkHostIds', $data ?? [], null);
        $this->setIfExists('isFWUpdated', $data ?? [], null);
        $this->setIfExists('previousL2Enabled', $data ?? [], null);
        $this->setIfExists('virtualNetIp', $data ?? [], null);
        $this->setIfExists('tcpPort', $data ?? [], null);
        $this->setIfExists('realExternalIp', $data ?? [], null);
        $this->setIfExists('hostname', $data ?? [], null);
        $this->setIfExists('osType', $data ?? [], null);
        $this->setIfExists('sshCredential', $data ?? [], null);
        $this->setIfExists('l2Ready', $data ?? [], null);
        $this->setIfExists('power', $data ?? [], null);
        $this->setIfExists('hardwareNodeGroup', $data ?? [], null);
        $this->setIfExists('vzLicense', $data ?? [], null);
        $this->setIfExists('cpuNumber', $data ?? [], null);
        $this->setIfExists('sshPort', $data ?? [], null);
        $this->setIfExists('hardwareNodeClusters', $data ?? [], null);
        $this->setIfExists('soapProtocol', $data ?? [], null);
        $this->setIfExists('ipsecKey', $data ?? [], null);
        $this->setIfExists('vzType', $data ?? [], null);
        $this->setIfExists('soapCredential', $data ?? [], null);
        $this->setIfExists('ipAddress', $data ?? [], null);
        $this->setIfExists('physCpuNumber', $data ?? [], null);
        $this->setIfExists('loadMarkOffset', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('vzInstall', $data ?? [], null);
        $this->setIfExists('cpuFreq', $data ?? [], null);
        $this->setIfExists('dockerCacheLocationType', $data ?? [], null);
        $this->setIfExists('l2Enabled', $data ?? [], null);
        $this->setIfExists('regionGateNumber', $data ?? [], null);
        $this->setIfExists('vsVersion', $data ?? [], null);
        $this->setIfExists('l2Ip', $data ?? [], null);
        $this->setIfExists('externalIp', $data ?? [], null);
        $this->setIfExists('soapPort', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['data']) && (mb_strlen($this->container['data']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'data', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['data']) && !preg_match("/(.*){0,2147483647}/", $this->container['data'])) {
            $invalidProperties[] = "invalid value for 'data', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['tcpProtocol']) && (mb_strlen($this->container['tcpProtocol']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'tcpProtocol', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['tcpProtocol']) && !preg_match("/(.*){0,2147483647}/", $this->container['tcpProtocol'])) {
            $invalidProperties[] = "invalid value for 'tcpProtocol', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        $allowedValues = $this->getHwTypeAllowableValues();
        if (!is_null($this->container['hwType']) && !in_array($this->container['hwType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hwType', must be one of '%s'",
                $this->container['hwType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['previousL2Ip']) && (mb_strlen($this->container['previousL2Ip']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'previousL2Ip', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['previousL2Ip']) && !preg_match("/(.*){0,2147483647}/", $this->container['previousL2Ip'])) {
            $invalidProperties[] = "invalid value for 'previousL2Ip', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['virtualNetworkHostIds']) && (count($this->container['virtualNetworkHostIds']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'virtualNetworkHostIds', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['virtualNetIp']) && (mb_strlen($this->container['virtualNetIp']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'virtualNetIp', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['virtualNetIp']) && !preg_match("/(.*){0,2147483647}/", $this->container['virtualNetIp'])) {
            $invalidProperties[] = "invalid value for 'virtualNetIp', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['tcpPort']) && ($this->container['tcpPort'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'tcpPort', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['tcpPort']) && ($this->container['tcpPort'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'tcpPort', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['realExternalIp']) && (mb_strlen($this->container['realExternalIp']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'realExternalIp', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['realExternalIp']) && !preg_match("/(.*){0,2147483647}/", $this->container['realExternalIp'])) {
            $invalidProperties[] = "invalid value for 'realExternalIp', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['hostname']) && (mb_strlen($this->container['hostname']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'hostname', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['hostname']) && !preg_match("/(.*){0,2147483647}/", $this->container['hostname'])) {
            $invalidProperties[] = "invalid value for 'hostname', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        $allowedValues = $this->getOsTypeAllowableValues();
        if (!is_null($this->container['osType']) && !in_array($this->container['osType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'osType', must be one of '%s'",
                $this->container['osType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['power']) && ($this->container['power'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'power', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['power']) && ($this->container['power'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'power', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['hardwareNodeGroup']) && (mb_strlen($this->container['hardwareNodeGroup']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'hardwareNodeGroup', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['hardwareNodeGroup']) && !preg_match("/(.*){0,2147483647}/", $this->container['hardwareNodeGroup'])) {
            $invalidProperties[] = "invalid value for 'hardwareNodeGroup', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['cpuNumber']) && ($this->container['cpuNumber'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'cpuNumber', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['cpuNumber']) && ($this->container['cpuNumber'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'cpuNumber', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['sshPort']) && ($this->container['sshPort'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'sshPort', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['sshPort']) && ($this->container['sshPort'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'sshPort', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['hardwareNodeClusters']) && (count($this->container['hardwareNodeClusters']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'hardwareNodeClusters', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['soapProtocol']) && (mb_strlen($this->container['soapProtocol']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'soapProtocol', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['soapProtocol']) && !preg_match("/(.*){0,2147483647}/", $this->container['soapProtocol'])) {
            $invalidProperties[] = "invalid value for 'soapProtocol', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['ipsecKey']) && (mb_strlen($this->container['ipsecKey']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'ipsecKey', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['ipsecKey']) && !preg_match("/(.*){0,2147483647}/", $this->container['ipsecKey'])) {
            $invalidProperties[] = "invalid value for 'ipsecKey', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['vzType']) && ($this->container['vzType'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'vzType', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['vzType']) && ($this->container['vzType'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'vzType', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['ipAddress']) && (mb_strlen($this->container['ipAddress']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'ipAddress', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['ipAddress']) && !preg_match("/(.*){0,2147483647}/", $this->container['ipAddress'])) {
            $invalidProperties[] = "invalid value for 'ipAddress', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['physCpuNumber']) && ($this->container['physCpuNumber'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'physCpuNumber', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['physCpuNumber']) && ($this->container['physCpuNumber'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'physCpuNumber', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['loadMarkOffset']) && ($this->container['loadMarkOffset'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'loadMarkOffset', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['loadMarkOffset']) && ($this->container['loadMarkOffset'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'loadMarkOffset', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['labels']) && (count($this->container['labels']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'labels', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['cpuFreq']) && ($this->container['cpuFreq'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'cpuFreq', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['cpuFreq']) && ($this->container['cpuFreq'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'cpuFreq', must be bigger than or equal to -2147483648.";
        }

        $allowedValues = $this->getDockerCacheLocationTypeAllowableValues();
        if (!is_null($this->container['dockerCacheLocationType']) && !in_array($this->container['dockerCacheLocationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dockerCacheLocationType', must be one of '%s'",
                $this->container['dockerCacheLocationType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['regionGateNumber']) && ($this->container['regionGateNumber'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'regionGateNumber', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['regionGateNumber']) && ($this->container['regionGateNumber'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'regionGateNumber', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['l2Ip']) && (mb_strlen($this->container['l2Ip']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'l2Ip', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['l2Ip']) && !preg_match("/(.*){0,2147483647}/", $this->container['l2Ip'])) {
            $invalidProperties[] = "invalid value for 'l2Ip', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['externalIp']) && (mb_strlen($this->container['externalIp']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'externalIp', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['externalIp']) && !preg_match("/(.*){0,2147483647}/", $this->container['externalIp'])) {
            $invalidProperties[] = "invalid value for 'externalIp', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['soapPort']) && ($this->container['soapPort'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'soapPort', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['soapPort']) && ($this->container['soapPort'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'soapPort', must be bigger than or equal to -2147483648.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        if (!is_null($data) && (mb_strlen($data) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $data when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($data) && (!preg_match("/(.*){0,2147483647}/", $data))) {
            throw new \InvalidArgumentException("invalid value for \$data when calling LabelHardwareNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($data)) {
            throw new \InvalidArgumentException('non-nullable data cannot be null');
        }

        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets tcpProtocol
     *
     * @return string|null
     */
    public function getTcpProtocol()
    {
        return $this->container['tcpProtocol'];
    }

    /**
     * Sets tcpProtocol
     *
     * @param string|null $tcpProtocol tcpProtocol
     *
     * @return self
     */
    public function setTcpProtocol($tcpProtocol)
    {
        if (!is_null($tcpProtocol) && (mb_strlen($tcpProtocol) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $tcpProtocol when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($tcpProtocol) && (!preg_match("/(.*){0,2147483647}/", $tcpProtocol))) {
            throw new \InvalidArgumentException("invalid value for \$tcpProtocol when calling LabelHardwareNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($tcpProtocol)) {
            throw new \InvalidArgumentException('non-nullable tcpProtocol cannot be null');
        }

        $this->container['tcpProtocol'] = $tcpProtocol;

        return $this;
    }

    /**
     * Gets hwType
     *
     * @return string|null
     */
    public function getHwType()
    {
        return $this->container['hwType'];
    }

    /**
     * Sets hwType
     *
     * @param string|null $hwType hwType
     *
     * @return self
     */
    public function setHwType($hwType)
    {
        $allowedValues = $this->getHwTypeAllowableValues();
        if (!is_null($hwType) && !in_array($hwType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hwType', must be one of '%s'",
                    $hwType,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($hwType)) {
            throw new \InvalidArgumentException('non-nullable hwType cannot be null');
        }

        $this->container['hwType'] = $hwType;

        return $this;
    }

    /**
     * Gets previousL2Ip
     *
     * @return string|null
     */
    public function getPreviousL2Ip()
    {
        return $this->container['previousL2Ip'];
    }

    /**
     * Sets previousL2Ip
     *
     * @param string|null $previousL2Ip previousL2Ip
     *
     * @return self
     */
    public function setPreviousL2Ip($previousL2Ip)
    {
        if (!is_null($previousL2Ip) && (mb_strlen($previousL2Ip) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $previousL2Ip when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($previousL2Ip) && (!preg_match("/(.*){0,2147483647}/", $previousL2Ip))) {
            throw new \InvalidArgumentException("invalid value for \$previousL2Ip when calling LabelHardwareNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($previousL2Ip)) {
            throw new \InvalidArgumentException('non-nullable previousL2Ip cannot be null');
        }

        $this->container['previousL2Ip'] = $previousL2Ip;

        return $this;
    }

    /**
     * Gets virtualNetworkHostIds
     *
     * @return object[]|null
     */
    public function getVirtualNetworkHostIds()
    {
        return $this->container['virtualNetworkHostIds'];
    }

    /**
     * Sets virtualNetworkHostIds
     *
     * @param object[]|null $virtualNetworkHostIds virtualNetworkHostIds
     *
     * @return self
     */
    public function setVirtualNetworkHostIds($virtualNetworkHostIds)
    {

        if (!is_null($virtualNetworkHostIds) && (count($virtualNetworkHostIds) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $virtualNetworkHostIds when calling LabelHardwareNode., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($virtualNetworkHostIds)) {
            throw new \InvalidArgumentException('non-nullable virtualNetworkHostIds cannot be null');
        }

        $this->container['virtualNetworkHostIds'] = $virtualNetworkHostIds;

        return $this;
    }

    /**
     * Gets isFWUpdated
     *
     * @return bool|null
     */
    public function getIsFWUpdated()
    {
        return $this->container['isFWUpdated'];
    }

    /**
     * Sets isFWUpdated
     *
     * @param bool|null $isFWUpdated isFWUpdated
     *
     * @return self
     */
    public function setIsFWUpdated($isFWUpdated)
    {

        if (is_null($isFWUpdated)) {
            throw new \InvalidArgumentException('non-nullable isFWUpdated cannot be null');
        }

        $this->container['isFWUpdated'] = $isFWUpdated;

        return $this;
    }

    /**
     * Gets previousL2Enabled
     *
     * @return bool|null
     */
    public function getPreviousL2Enabled()
    {
        return $this->container['previousL2Enabled'];
    }

    /**
     * Sets previousL2Enabled
     *
     * @param bool|null $previousL2Enabled previousL2Enabled
     *
     * @return self
     */
    public function setPreviousL2Enabled($previousL2Enabled)
    {

        if (is_null($previousL2Enabled)) {
            throw new \InvalidArgumentException('non-nullable previousL2Enabled cannot be null');
        }

        $this->container['previousL2Enabled'] = $previousL2Enabled;

        return $this;
    }

    /**
     * Gets virtualNetIp
     *
     * @return string|null
     */
    public function getVirtualNetIp()
    {
        return $this->container['virtualNetIp'];
    }

    /**
     * Sets virtualNetIp
     *
     * @param string|null $virtualNetIp virtualNetIp
     *
     * @return self
     */
    public function setVirtualNetIp($virtualNetIp)
    {
        if (!is_null($virtualNetIp) && (mb_strlen($virtualNetIp) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $virtualNetIp when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($virtualNetIp) && (!preg_match("/(.*){0,2147483647}/", $virtualNetIp))) {
            throw new \InvalidArgumentException("invalid value for \$virtualNetIp when calling LabelHardwareNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($virtualNetIp)) {
            throw new \InvalidArgumentException('non-nullable virtualNetIp cannot be null');
        }

        $this->container['virtualNetIp'] = $virtualNetIp;

        return $this;
    }

    /**
     * Gets tcpPort
     *
     * @return int|null
     */
    public function getTcpPort()
    {
        return $this->container['tcpPort'];
    }

    /**
     * Sets tcpPort
     *
     * @param int|null $tcpPort tcpPort
     *
     * @return self
     */
    public function setTcpPort($tcpPort)
    {

        if (!is_null($tcpPort) && ($tcpPort > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $tcpPort when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($tcpPort) && ($tcpPort < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $tcpPort when calling LabelHardwareNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($tcpPort)) {
            throw new \InvalidArgumentException('non-nullable tcpPort cannot be null');
        }

        $this->container['tcpPort'] = $tcpPort;

        return $this;
    }

    /**
     * Gets realExternalIp
     *
     * @return string|null
     */
    public function getRealExternalIp()
    {
        return $this->container['realExternalIp'];
    }

    /**
     * Sets realExternalIp
     *
     * @param string|null $realExternalIp realExternalIp
     *
     * @return self
     */
    public function setRealExternalIp($realExternalIp)
    {
        if (!is_null($realExternalIp) && (mb_strlen($realExternalIp) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $realExternalIp when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($realExternalIp) && (!preg_match("/(.*){0,2147483647}/", $realExternalIp))) {
            throw new \InvalidArgumentException("invalid value for \$realExternalIp when calling LabelHardwareNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($realExternalIp)) {
            throw new \InvalidArgumentException('non-nullable realExternalIp cannot be null');
        }

        $this->container['realExternalIp'] = $realExternalIp;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname hostname
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        if (!is_null($hostname) && (mb_strlen($hostname) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $hostname when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($hostname) && (!preg_match("/(.*){0,2147483647}/", $hostname))) {
            throw new \InvalidArgumentException("invalid value for \$hostname when calling LabelHardwareNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($hostname)) {
            throw new \InvalidArgumentException('non-nullable hostname cannot be null');
        }

        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets osType
     *
     * @return string|null
     */
    public function getOsType()
    {
        return $this->container['osType'];
    }

    /**
     * Sets osType
     *
     * @param string|null $osType osType
     *
     * @return self
     */
    public function setOsType($osType)
    {
        $allowedValues = $this->getOsTypeAllowableValues();
        if (!is_null($osType) && !in_array($osType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'osType', must be one of '%s'",
                    $osType,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($osType)) {
            throw new \InvalidArgumentException('non-nullable osType cannot be null');
        }

        $this->container['osType'] = $osType;

        return $this;
    }

    /**
     * Gets sshCredential
     *
     * @return \OpenAPI\Client\Model\LabelHardwareNodeSshCredential|null
     */
    public function getSshCredential()
    {
        return $this->container['sshCredential'];
    }

    /**
     * Sets sshCredential
     *
     * @param \OpenAPI\Client\Model\LabelHardwareNodeSshCredential|null $sshCredential sshCredential
     *
     * @return self
     */
    public function setSshCredential($sshCredential)
    {

        if (is_null($sshCredential)) {
            throw new \InvalidArgumentException('non-nullable sshCredential cannot be null');
        }

        $this->container['sshCredential'] = $sshCredential;

        return $this;
    }

    /**
     * Gets l2Ready
     *
     * @return bool|null
     */
    public function getL2Ready()
    {
        return $this->container['l2Ready'];
    }

    /**
     * Sets l2Ready
     *
     * @param bool|null $l2Ready l2Ready
     *
     * @return self
     */
    public function setL2Ready($l2Ready)
    {

        if (is_null($l2Ready)) {
            throw new \InvalidArgumentException('non-nullable l2Ready cannot be null');
        }

        $this->container['l2Ready'] = $l2Ready;

        return $this;
    }

    /**
     * Gets power
     *
     * @return int|null
     */
    public function getPower()
    {
        return $this->container['power'];
    }

    /**
     * Sets power
     *
     * @param int|null $power power
     *
     * @return self
     */
    public function setPower($power)
    {

        if (!is_null($power) && ($power > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $power when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($power) && ($power < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $power when calling LabelHardwareNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($power)) {
            throw new \InvalidArgumentException('non-nullable power cannot be null');
        }

        $this->container['power'] = $power;

        return $this;
    }

    /**
     * Gets hardwareNodeGroup
     *
     * @return string|null
     */
    public function getHardwareNodeGroup()
    {
        return $this->container['hardwareNodeGroup'];
    }

    /**
     * Sets hardwareNodeGroup
     *
     * @param string|null $hardwareNodeGroup hardwareNodeGroup
     *
     * @return self
     */
    public function setHardwareNodeGroup($hardwareNodeGroup)
    {
        if (!is_null($hardwareNodeGroup) && (mb_strlen($hardwareNodeGroup) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $hardwareNodeGroup when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($hardwareNodeGroup) && (!preg_match("/(.*){0,2147483647}/", $hardwareNodeGroup))) {
            throw new \InvalidArgumentException("invalid value for \$hardwareNodeGroup when calling LabelHardwareNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($hardwareNodeGroup)) {
            throw new \InvalidArgumentException('non-nullable hardwareNodeGroup cannot be null');
        }

        $this->container['hardwareNodeGroup'] = $hardwareNodeGroup;

        return $this;
    }

    /**
     * Gets vzLicense
     *
     * @return \OpenAPI\Client\Model\LabelHardwareNodeVzLicense|null
     */
    public function getVzLicense()
    {
        return $this->container['vzLicense'];
    }

    /**
     * Sets vzLicense
     *
     * @param \OpenAPI\Client\Model\LabelHardwareNodeVzLicense|null $vzLicense vzLicense
     *
     * @return self
     */
    public function setVzLicense($vzLicense)
    {

        if (is_null($vzLicense)) {
            throw new \InvalidArgumentException('non-nullable vzLicense cannot be null');
        }

        $this->container['vzLicense'] = $vzLicense;

        return $this;
    }

    /**
     * Gets cpuNumber
     *
     * @return int|null
     */
    public function getCpuNumber()
    {
        return $this->container['cpuNumber'];
    }

    /**
     * Sets cpuNumber
     *
     * @param int|null $cpuNumber cpuNumber
     *
     * @return self
     */
    public function setCpuNumber($cpuNumber)
    {

        if (!is_null($cpuNumber) && ($cpuNumber > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $cpuNumber when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($cpuNumber) && ($cpuNumber < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $cpuNumber when calling LabelHardwareNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($cpuNumber)) {
            throw new \InvalidArgumentException('non-nullable cpuNumber cannot be null');
        }

        $this->container['cpuNumber'] = $cpuNumber;

        return $this;
    }

    /**
     * Gets sshPort
     *
     * @return int|null
     */
    public function getSshPort()
    {
        return $this->container['sshPort'];
    }

    /**
     * Sets sshPort
     *
     * @param int|null $sshPort sshPort
     *
     * @return self
     */
    public function setSshPort($sshPort)
    {

        if (!is_null($sshPort) && ($sshPort > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $sshPort when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($sshPort) && ($sshPort < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $sshPort when calling LabelHardwareNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($sshPort)) {
            throw new \InvalidArgumentException('non-nullable sshPort cannot be null');
        }

        $this->container['sshPort'] = $sshPort;

        return $this;
    }

    /**
     * Gets hardwareNodeClusters
     *
     * @return object[]|null
     */
    public function getHardwareNodeClusters()
    {
        return $this->container['hardwareNodeClusters'];
    }

    /**
     * Sets hardwareNodeClusters
     *
     * @param object[]|null $hardwareNodeClusters hardwareNodeClusters
     *
     * @return self
     */
    public function setHardwareNodeClusters($hardwareNodeClusters)
    {

        if (!is_null($hardwareNodeClusters) && (count($hardwareNodeClusters) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $hardwareNodeClusters when calling LabelHardwareNode., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($hardwareNodeClusters)) {
            throw new \InvalidArgumentException('non-nullable hardwareNodeClusters cannot be null');
        }

        $this->container['hardwareNodeClusters'] = $hardwareNodeClusters;

        return $this;
    }

    /**
     * Gets soapProtocol
     *
     * @return string|null
     */
    public function getSoapProtocol()
    {
        return $this->container['soapProtocol'];
    }

    /**
     * Sets soapProtocol
     *
     * @param string|null $soapProtocol soapProtocol
     *
     * @return self
     */
    public function setSoapProtocol($soapProtocol)
    {
        if (!is_null($soapProtocol) && (mb_strlen($soapProtocol) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $soapProtocol when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($soapProtocol) && (!preg_match("/(.*){0,2147483647}/", $soapProtocol))) {
            throw new \InvalidArgumentException("invalid value for \$soapProtocol when calling LabelHardwareNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($soapProtocol)) {
            throw new \InvalidArgumentException('non-nullable soapProtocol cannot be null');
        }

        $this->container['soapProtocol'] = $soapProtocol;

        return $this;
    }

    /**
     * Gets ipsecKey
     *
     * @return string|null
     */
    public function getIpsecKey()
    {
        return $this->container['ipsecKey'];
    }

    /**
     * Sets ipsecKey
     *
     * @param string|null $ipsecKey ipsecKey
     *
     * @return self
     */
    public function setIpsecKey($ipsecKey)
    {
        if (!is_null($ipsecKey) && (mb_strlen($ipsecKey) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $ipsecKey when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($ipsecKey) && (!preg_match("/(.*){0,2147483647}/", $ipsecKey))) {
            throw new \InvalidArgumentException("invalid value for \$ipsecKey when calling LabelHardwareNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($ipsecKey)) {
            throw new \InvalidArgumentException('non-nullable ipsecKey cannot be null');
        }

        $this->container['ipsecKey'] = $ipsecKey;

        return $this;
    }

    /**
     * Gets vzType
     *
     * @return int|null
     */
    public function getVzType()
    {
        return $this->container['vzType'];
    }

    /**
     * Sets vzType
     *
     * @param int|null $vzType vzType
     *
     * @return self
     */
    public function setVzType($vzType)
    {

        if (!is_null($vzType) && ($vzType > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $vzType when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($vzType) && ($vzType < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $vzType when calling LabelHardwareNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($vzType)) {
            throw new \InvalidArgumentException('non-nullable vzType cannot be null');
        }

        $this->container['vzType'] = $vzType;

        return $this;
    }

    /**
     * Gets soapCredential
     *
     * @return \OpenAPI\Client\Model\Credential|null
     */
    public function getSoapCredential()
    {
        return $this->container['soapCredential'];
    }

    /**
     * Sets soapCredential
     *
     * @param \OpenAPI\Client\Model\Credential|null $soapCredential soapCredential
     *
     * @return self
     */
    public function setSoapCredential($soapCredential)
    {

        if (is_null($soapCredential)) {
            throw new \InvalidArgumentException('non-nullable soapCredential cannot be null');
        }

        $this->container['soapCredential'] = $soapCredential;

        return $this;
    }

    /**
     * Gets ipAddress
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ipAddress'];
    }

    /**
     * Sets ipAddress
     *
     * @param string|null $ipAddress ipAddress
     *
     * @return self
     */
    public function setIpAddress($ipAddress)
    {
        if (!is_null($ipAddress) && (mb_strlen($ipAddress) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $ipAddress when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($ipAddress) && (!preg_match("/(.*){0,2147483647}/", $ipAddress))) {
            throw new \InvalidArgumentException("invalid value for \$ipAddress when calling LabelHardwareNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($ipAddress)) {
            throw new \InvalidArgumentException('non-nullable ipAddress cannot be null');
        }

        $this->container['ipAddress'] = $ipAddress;

        return $this;
    }

    /**
     * Gets physCpuNumber
     *
     * @return int|null
     */
    public function getPhysCpuNumber()
    {
        return $this->container['physCpuNumber'];
    }

    /**
     * Sets physCpuNumber
     *
     * @param int|null $physCpuNumber physCpuNumber
     *
     * @return self
     */
    public function setPhysCpuNumber($physCpuNumber)
    {

        if (!is_null($physCpuNumber) && ($physCpuNumber > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $physCpuNumber when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($physCpuNumber) && ($physCpuNumber < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $physCpuNumber when calling LabelHardwareNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($physCpuNumber)) {
            throw new \InvalidArgumentException('non-nullable physCpuNumber cannot be null');
        }

        $this->container['physCpuNumber'] = $physCpuNumber;

        return $this;
    }

    /**
     * Gets loadMarkOffset
     *
     * @return int|null
     */
    public function getLoadMarkOffset()
    {
        return $this->container['loadMarkOffset'];
    }

    /**
     * Sets loadMarkOffset
     *
     * @param int|null $loadMarkOffset loadMarkOffset
     *
     * @return self
     */
    public function setLoadMarkOffset($loadMarkOffset)
    {

        if (!is_null($loadMarkOffset) && ($loadMarkOffset > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $loadMarkOffset when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($loadMarkOffset) && ($loadMarkOffset < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $loadMarkOffset when calling LabelHardwareNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($loadMarkOffset)) {
            throw new \InvalidArgumentException('non-nullable loadMarkOffset cannot be null');
        }

        $this->container['loadMarkOffset'] = $loadMarkOffset;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \OpenAPI\Client\Model\Label[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \OpenAPI\Client\Model\Label[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {

        if (!is_null($labels) && (count($labels) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $labels when calling LabelHardwareNode., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }

        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets vzInstall
     *
     * @return bool|null
     */
    public function getVzInstall()
    {
        return $this->container['vzInstall'];
    }

    /**
     * Sets vzInstall
     *
     * @param bool|null $vzInstall vzInstall
     *
     * @return self
     */
    public function setVzInstall($vzInstall)
    {

        if (is_null($vzInstall)) {
            throw new \InvalidArgumentException('non-nullable vzInstall cannot be null');
        }

        $this->container['vzInstall'] = $vzInstall;

        return $this;
    }

    /**
     * Gets cpuFreq
     *
     * @return int|null
     */
    public function getCpuFreq()
    {
        return $this->container['cpuFreq'];
    }

    /**
     * Sets cpuFreq
     *
     * @param int|null $cpuFreq cpuFreq
     *
     * @return self
     */
    public function setCpuFreq($cpuFreq)
    {

        if (!is_null($cpuFreq) && ($cpuFreq > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $cpuFreq when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($cpuFreq) && ($cpuFreq < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $cpuFreq when calling LabelHardwareNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($cpuFreq)) {
            throw new \InvalidArgumentException('non-nullable cpuFreq cannot be null');
        }

        $this->container['cpuFreq'] = $cpuFreq;

        return $this;
    }

    /**
     * Gets dockerCacheLocationType
     *
     * @return string|null
     */
    public function getDockerCacheLocationType()
    {
        return $this->container['dockerCacheLocationType'];
    }

    /**
     * Sets dockerCacheLocationType
     *
     * @param string|null $dockerCacheLocationType dockerCacheLocationType
     *
     * @return self
     */
    public function setDockerCacheLocationType($dockerCacheLocationType)
    {
        $allowedValues = $this->getDockerCacheLocationTypeAllowableValues();
        if (!is_null($dockerCacheLocationType) && !in_array($dockerCacheLocationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dockerCacheLocationType', must be one of '%s'",
                    $dockerCacheLocationType,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($dockerCacheLocationType)) {
            throw new \InvalidArgumentException('non-nullable dockerCacheLocationType cannot be null');
        }

        $this->container['dockerCacheLocationType'] = $dockerCacheLocationType;

        return $this;
    }

    /**
     * Gets l2Enabled
     *
     * @return bool|null
     */
    public function getL2Enabled()
    {
        return $this->container['l2Enabled'];
    }

    /**
     * Sets l2Enabled
     *
     * @param bool|null $l2Enabled l2Enabled
     *
     * @return self
     */
    public function setL2Enabled($l2Enabled)
    {

        if (is_null($l2Enabled)) {
            throw new \InvalidArgumentException('non-nullable l2Enabled cannot be null');
        }

        $this->container['l2Enabled'] = $l2Enabled;

        return $this;
    }

    /**
     * Gets regionGateNumber
     *
     * @return int|null
     */
    public function getRegionGateNumber()
    {
        return $this->container['regionGateNumber'];
    }

    /**
     * Sets regionGateNumber
     *
     * @param int|null $regionGateNumber regionGateNumber
     *
     * @return self
     */
    public function setRegionGateNumber($regionGateNumber)
    {

        if (!is_null($regionGateNumber) && ($regionGateNumber > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $regionGateNumber when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($regionGateNumber) && ($regionGateNumber < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $regionGateNumber when calling LabelHardwareNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($regionGateNumber)) {
            throw new \InvalidArgumentException('non-nullable regionGateNumber cannot be null');
        }

        $this->container['regionGateNumber'] = $regionGateNumber;

        return $this;
    }

    /**
     * Gets vsVersion
     *
     * @return \OpenAPI\Client\Model\VSVersions|null
     */
    public function getVsVersion()
    {
        return $this->container['vsVersion'];
    }

    /**
     * Sets vsVersion
     *
     * @param \OpenAPI\Client\Model\VSVersions|null $vsVersion vsVersion
     *
     * @return self
     */
    public function setVsVersion($vsVersion)
    {

        if (is_null($vsVersion)) {
            throw new \InvalidArgumentException('non-nullable vsVersion cannot be null');
        }

        $this->container['vsVersion'] = $vsVersion;

        return $this;
    }

    /**
     * Gets l2Ip
     *
     * @return string|null
     */
    public function getL2Ip()
    {
        return $this->container['l2Ip'];
    }

    /**
     * Sets l2Ip
     *
     * @param string|null $l2Ip l2Ip
     *
     * @return self
     */
    public function setL2Ip($l2Ip)
    {
        if (!is_null($l2Ip) && (mb_strlen($l2Ip) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $l2Ip when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($l2Ip) && (!preg_match("/(.*){0,2147483647}/", $l2Ip))) {
            throw new \InvalidArgumentException("invalid value for \$l2Ip when calling LabelHardwareNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($l2Ip)) {
            throw new \InvalidArgumentException('non-nullable l2Ip cannot be null');
        }

        $this->container['l2Ip'] = $l2Ip;

        return $this;
    }

    /**
     * Gets externalIp
     *
     * @return string|null
     */
    public function getExternalIp()
    {
        return $this->container['externalIp'];
    }

    /**
     * Sets externalIp
     *
     * @param string|null $externalIp externalIp
     *
     * @return self
     */
    public function setExternalIp($externalIp)
    {
        if (!is_null($externalIp) && (mb_strlen($externalIp) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $externalIp when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($externalIp) && (!preg_match("/(.*){0,2147483647}/", $externalIp))) {
            throw new \InvalidArgumentException("invalid value for \$externalIp when calling LabelHardwareNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($externalIp)) {
            throw new \InvalidArgumentException('non-nullable externalIp cannot be null');
        }

        $this->container['externalIp'] = $externalIp;

        return $this;
    }

    /**
     * Gets soapPort
     *
     * @return int|null
     */
    public function getSoapPort()
    {
        return $this->container['soapPort'];
    }

    /**
     * Sets soapPort
     *
     * @param int|null $soapPort soapPort
     *
     * @return self
     */
    public function setSoapPort($soapPort)
    {

        if (!is_null($soapPort) && ($soapPort > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $soapPort when calling LabelHardwareNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($soapPort) && ($soapPort < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $soapPort when calling LabelHardwareNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($soapPort)) {
            throw new \InvalidArgumentException('non-nullable soapPort cannot be null');
        }

        $this->container['soapPort'] = $soapPort;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


