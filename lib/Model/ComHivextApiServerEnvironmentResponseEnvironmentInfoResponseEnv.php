<?php
/**
 * ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com_hivext_api_server_environment_response_EnvironmentInfoResponse_env';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attributesJson' => '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvAttributesJson',
        'note' => 'string',
        'aliases' => 'object[]',
        'sslState' => 'bool',
        'displayName' => 'string',
        'contexts' => 'object[]',
        'isTransferring' => 'bool',
        'uid' => 'int',
        'isProtected' => 'bool',
        'appname' => 'string',
        'engine' => '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine',
        'zone' => 'string',
        'extDomains' => 'object[]',
        'hardwareNodeGroup' => '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvHardwareNodeGroup',
        'isHAEnabled' => 'bool',
        'isRemote' => 'bool',
        'groups' => 'object[]',
        'fullDomain' => 'string',
        'winDomain' => '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvWinDomain',
        'creatorUid' => 'int',
        'originalStatus' => 'string',
        'isFirewallEnabled' => 'bool',
        'appid' => 'string',
        'domain' => '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvDomain',
        'attributes' => 'string',
        'isBroken' => 'bool',
        'isShared' => 'bool',
        'properties' => 'string',
        'status' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'attributesJson' => null,
        'note' => null,
        'aliases' => null,
        'sslState' => null,
        'displayName' => null,
        'contexts' => null,
        'isTransferring' => null,
        'uid' => 'int32',
        'isProtected' => null,
        'appname' => null,
        'engine' => null,
        'zone' => null,
        'extDomains' => null,
        'hardwareNodeGroup' => null,
        'isHAEnabled' => null,
        'isRemote' => null,
        'groups' => null,
        'fullDomain' => null,
        'winDomain' => null,
        'creatorUid' => 'int32',
        'originalStatus' => null,
        'isFirewallEnabled' => null,
        'appid' => null,
        'domain' => null,
        'attributes' => null,
        'isBroken' => null,
        'isShared' => null,
        'properties' => null,
        'status' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'attributesJson' => false,
		'note' => false,
		'aliases' => false,
		'sslState' => false,
		'displayName' => false,
		'contexts' => false,
		'isTransferring' => false,
		'uid' => false,
		'isProtected' => false,
		'appname' => false,
		'engine' => false,
		'zone' => false,
		'extDomains' => false,
		'hardwareNodeGroup' => false,
		'isHAEnabled' => false,
		'isRemote' => false,
		'groups' => false,
		'fullDomain' => false,
		'winDomain' => false,
		'creatorUid' => false,
		'originalStatus' => false,
		'isFirewallEnabled' => false,
		'appid' => false,
		'domain' => false,
		'attributes' => false,
		'isBroken' => false,
		'isShared' => false,
		'properties' => false,
		'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attributesJson' => 'attributesJson',
        'note' => 'note',
        'aliases' => 'aliases',
        'sslState' => 'sslState',
        'displayName' => 'displayName',
        'contexts' => 'contexts',
        'isTransferring' => 'isTransferring',
        'uid' => 'uid',
        'isProtected' => 'isProtected',
        'appname' => 'appname',
        'engine' => 'engine',
        'zone' => 'zone',
        'extDomains' => 'extDomains',
        'hardwareNodeGroup' => 'hardwareNodeGroup',
        'isHAEnabled' => 'isHAEnabled',
        'isRemote' => 'isRemote',
        'groups' => 'groups',
        'fullDomain' => 'fullDomain',
        'winDomain' => 'winDomain',
        'creatorUid' => 'creatorUid',
        'originalStatus' => 'originalStatus',
        'isFirewallEnabled' => 'isFirewallEnabled',
        'appid' => 'appid',
        'domain' => 'domain',
        'attributes' => 'attributes',
        'isBroken' => 'isBroken',
        'isShared' => 'isShared',
        'properties' => 'properties',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attributesJson' => 'setAttributesJson',
        'note' => 'setNote',
        'aliases' => 'setAliases',
        'sslState' => 'setSslState',
        'displayName' => 'setDisplayName',
        'contexts' => 'setContexts',
        'isTransferring' => 'setIsTransferring',
        'uid' => 'setUid',
        'isProtected' => 'setIsProtected',
        'appname' => 'setAppname',
        'engine' => 'setEngine',
        'zone' => 'setZone',
        'extDomains' => 'setExtDomains',
        'hardwareNodeGroup' => 'setHardwareNodeGroup',
        'isHAEnabled' => 'setIsHAEnabled',
        'isRemote' => 'setIsRemote',
        'groups' => 'setGroups',
        'fullDomain' => 'setFullDomain',
        'winDomain' => 'setWinDomain',
        'creatorUid' => 'setCreatorUid',
        'originalStatus' => 'setOriginalStatus',
        'isFirewallEnabled' => 'setIsFirewallEnabled',
        'appid' => 'setAppid',
        'domain' => 'setDomain',
        'attributes' => 'setAttributes',
        'isBroken' => 'setIsBroken',
        'isShared' => 'setIsShared',
        'properties' => 'setProperties',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attributesJson' => 'getAttributesJson',
        'note' => 'getNote',
        'aliases' => 'getAliases',
        'sslState' => 'getSslState',
        'displayName' => 'getDisplayName',
        'contexts' => 'getContexts',
        'isTransferring' => 'getIsTransferring',
        'uid' => 'getUid',
        'isProtected' => 'getIsProtected',
        'appname' => 'getAppname',
        'engine' => 'getEngine',
        'zone' => 'getZone',
        'extDomains' => 'getExtDomains',
        'hardwareNodeGroup' => 'getHardwareNodeGroup',
        'isHAEnabled' => 'getIsHAEnabled',
        'isRemote' => 'getIsRemote',
        'groups' => 'getGroups',
        'fullDomain' => 'getFullDomain',
        'winDomain' => 'getWinDomain',
        'creatorUid' => 'getCreatorUid',
        'originalStatus' => 'getOriginalStatus',
        'isFirewallEnabled' => 'getIsFirewallEnabled',
        'appid' => 'getAppid',
        'domain' => 'getDomain',
        'attributes' => 'getAttributes',
        'isBroken' => 'getIsBroken',
        'isShared' => 'getIsShared',
        'properties' => 'getProperties',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ORIGINAL_STATUS_RUNNING_1 = 'ENV_STATUS_TYPE_RUNNING(1)';
    public const ORIGINAL_STATUS_DOWN_2 = 'ENV_STATUS_TYPE_DOWN(2)';
    public const ORIGINAL_STATUS_LAUNCHING_3 = 'ENV_STATUS_TYPE_LAUNCHING(3)';
    public const ORIGINAL_STATUS_SLEEP_4 = 'ENV_STATUS_TYPE_SLEEP(4)';
    public const ORIGINAL_STATUS_UNKNOWN_5 = 'ENV_STATUS_TYPE_UNKNOWN(5)';
    public const ORIGINAL_STATUS_CREATING_6 = 'ENV_STATUS_TYPE_CREATING(6)';
    public const ORIGINAL_STATUS_CLONING_7 = 'ENV_STATUS_TYPE_CLONING(7)';
    public const ORIGINAL_STATUS_NOT_EXISTS_8 = 'ENV_STATUS_TYPE_NOT_EXISTS(8)';
    public const ORIGINAL_STATUS_EXPORTING_9 = 'ENV_STATUS_TYPE_EXPORTING(9)';
    public const ORIGINAL_STATUS_MIGRATING_10 = 'ENV_STATUS_TYPE_MIGRATING(10)';
    public const ORIGINAL_STATUS_BROKEN_11 = 'ENV_STATUS_TYPE_BROKEN(11)';
    public const ORIGINAL_STATUS_UPDATING_12 = 'ENV_STATUS_TYPE_UPDATING(12)';
    public const ORIGINAL_STATUS_STOPPING_13 = 'ENV_STATUS_TYPE_STOPPING(13)';
    public const ORIGINAL_STATUS_GOING_TO_SLEEP_14 = 'ENV_STATUS_TYPE_GOING_TO_SLEEP(14)';
    public const ORIGINAL_STATUS_RESTORING_15 = 'ENV_STATUS_TYPE_RESTORING(15)';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOriginalStatusAllowableValues()
    {
        return [
            self::ORIGINAL_STATUS_RUNNING_1,
            self::ORIGINAL_STATUS_DOWN_2,
            self::ORIGINAL_STATUS_LAUNCHING_3,
            self::ORIGINAL_STATUS_SLEEP_4,
            self::ORIGINAL_STATUS_UNKNOWN_5,
            self::ORIGINAL_STATUS_CREATING_6,
            self::ORIGINAL_STATUS_CLONING_7,
            self::ORIGINAL_STATUS_NOT_EXISTS_8,
            self::ORIGINAL_STATUS_EXPORTING_9,
            self::ORIGINAL_STATUS_MIGRATING_10,
            self::ORIGINAL_STATUS_BROKEN_11,
            self::ORIGINAL_STATUS_UPDATING_12,
            self::ORIGINAL_STATUS_STOPPING_13,
            self::ORIGINAL_STATUS_GOING_TO_SLEEP_14,
            self::ORIGINAL_STATUS_RESTORING_15,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('attributesJson', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('aliases', $data ?? [], null);
        $this->setIfExists('sslState', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('contexts', $data ?? [], null);
        $this->setIfExists('isTransferring', $data ?? [], null);
        $this->setIfExists('uid', $data ?? [], null);
        $this->setIfExists('isProtected', $data ?? [], null);
        $this->setIfExists('appname', $data ?? [], null);
        $this->setIfExists('engine', $data ?? [], null);
        $this->setIfExists('zone', $data ?? [], null);
        $this->setIfExists('extDomains', $data ?? [], null);
        $this->setIfExists('hardwareNodeGroup', $data ?? [], null);
        $this->setIfExists('isHAEnabled', $data ?? [], null);
        $this->setIfExists('isRemote', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('fullDomain', $data ?? [], null);
        $this->setIfExists('winDomain', $data ?? [], null);
        $this->setIfExists('creatorUid', $data ?? [], null);
        $this->setIfExists('originalStatus', $data ?? [], null);
        $this->setIfExists('isFirewallEnabled', $data ?? [], null);
        $this->setIfExists('appid', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('isBroken', $data ?? [], null);
        $this->setIfExists('isShared', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['note']) && (mb_strlen($this->container['note']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'note', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['note']) && !preg_match("/(.*){0,2147483647}/", $this->container['note'])) {
            $invalidProperties[] = "invalid value for 'note', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['aliases']) && (count($this->container['aliases']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'aliases', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['displayName']) && (mb_strlen($this->container['displayName']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'displayName', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['displayName']) && !preg_match("/(.*){0,2147483647}/", $this->container['displayName'])) {
            $invalidProperties[] = "invalid value for 'displayName', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['contexts']) && (count($this->container['contexts']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'contexts', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['uid']) && ($this->container['uid'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'uid', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['uid']) && ($this->container['uid'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'uid', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['appname']) && (mb_strlen($this->container['appname']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'appname', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['appname']) && !preg_match("/(.*){0,2147483647}/", $this->container['appname'])) {
            $invalidProperties[] = "invalid value for 'appname', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['zone']) && (mb_strlen($this->container['zone']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'zone', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['zone']) && !preg_match("/(.*){0,2147483647}/", $this->container['zone'])) {
            $invalidProperties[] = "invalid value for 'zone', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['extDomains']) && (count($this->container['extDomains']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'extDomains', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['groups']) && (count($this->container['groups']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'groups', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['fullDomain']) && (mb_strlen($this->container['fullDomain']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'fullDomain', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['fullDomain']) && !preg_match("/(.*){0,2147483647}/", $this->container['fullDomain'])) {
            $invalidProperties[] = "invalid value for 'fullDomain', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['creatorUid']) && ($this->container['creatorUid'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'creatorUid', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['creatorUid']) && ($this->container['creatorUid'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'creatorUid', must be bigger than or equal to -2147483648.";
        }

        $allowedValues = $this->getOriginalStatusAllowableValues();
        if (!is_null($this->container['originalStatus']) && !in_array($this->container['originalStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'originalStatus', must be one of '%s'",
                $this->container['originalStatus'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['appid']) && (mb_strlen($this->container['appid']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'appid', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['appid']) && !preg_match("/(.*){0,2147483647}/", $this->container['appid'])) {
            $invalidProperties[] = "invalid value for 'appid', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['attributes']) && (mb_strlen($this->container['attributes']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'attributes', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['attributes']) && !preg_match("/(.*){0,2147483647}/", $this->container['attributes'])) {
            $invalidProperties[] = "invalid value for 'attributes', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['properties']) && (mb_strlen($this->container['properties']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'properties', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['properties']) && !preg_match("/(.*){0,2147483647}/", $this->container['properties'])) {
            $invalidProperties[] = "invalid value for 'properties', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['status']) && ($this->container['status'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'status', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['status']) && ($this->container['status'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'status', must be bigger than or equal to -2147483648.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attributesJson
     *
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvAttributesJson|null
     */
    public function getAttributesJson()
    {
        return $this->container['attributesJson'];
    }

    /**
     * Sets attributesJson
     *
     * @param \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvAttributesJson|null $attributesJson attributesJson
     *
     * @return self
     */
    public function setAttributesJson($attributesJson)
    {

        if (is_null($attributesJson)) {
            throw new \InvalidArgumentException('non-nullable attributesJson cannot be null');
        }

        $this->container['attributesJson'] = $attributesJson;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (!is_null($note) && (mb_strlen($note) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $note when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($note) && (!preg_match("/(.*){0,2147483647}/", $note))) {
            throw new \InvalidArgumentException("invalid value for \$note when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }

        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets aliases
     *
     * @return object[]|null
     */
    public function getAliases()
    {
        return $this->container['aliases'];
    }

    /**
     * Sets aliases
     *
     * @param object[]|null $aliases aliases
     *
     * @return self
     */
    public function setAliases($aliases)
    {

        if (!is_null($aliases) && (count($aliases) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $aliases when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($aliases)) {
            throw new \InvalidArgumentException('non-nullable aliases cannot be null');
        }

        $this->container['aliases'] = $aliases;

        return $this;
    }

    /**
     * Gets sslState
     *
     * @return bool|null
     */
    public function getSslState()
    {
        return $this->container['sslState'];
    }

    /**
     * Sets sslState
     *
     * @param bool|null $sslState sslState
     *
     * @return self
     */
    public function setSslState($sslState)
    {

        if (is_null($sslState)) {
            throw new \InvalidArgumentException('non-nullable sslState cannot be null');
        }

        $this->container['sslState'] = $sslState;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName displayName
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        if (!is_null($displayName) && (mb_strlen($displayName) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $displayName when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($displayName) && (!preg_match("/(.*){0,2147483647}/", $displayName))) {
            throw new \InvalidArgumentException("invalid value for \$displayName when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($displayName)) {
            throw new \InvalidArgumentException('non-nullable displayName cannot be null');
        }

        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets contexts
     *
     * @return object[]|null
     */
    public function getContexts()
    {
        return $this->container['contexts'];
    }

    /**
     * Sets contexts
     *
     * @param object[]|null $contexts contexts
     *
     * @return self
     */
    public function setContexts($contexts)
    {

        if (!is_null($contexts) && (count($contexts) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $contexts when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($contexts)) {
            throw new \InvalidArgumentException('non-nullable contexts cannot be null');
        }

        $this->container['contexts'] = $contexts;

        return $this;
    }

    /**
     * Gets isTransferring
     *
     * @return bool|null
     */
    public function getIsTransferring()
    {
        return $this->container['isTransferring'];
    }

    /**
     * Sets isTransferring
     *
     * @param bool|null $isTransferring isTransferring
     *
     * @return self
     */
    public function setIsTransferring($isTransferring)
    {

        if (is_null($isTransferring)) {
            throw new \InvalidArgumentException('non-nullable isTransferring cannot be null');
        }

        $this->container['isTransferring'] = $isTransferring;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return int|null
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param int|null $uid uid
     *
     * @return self
     */
    public function setUid($uid)
    {

        if (!is_null($uid) && ($uid > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $uid when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($uid) && ($uid < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $uid when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must be bigger than or equal to -2147483648.');
        }


        if (is_null($uid)) {
            throw new \InvalidArgumentException('non-nullable uid cannot be null');
        }

        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets isProtected
     *
     * @return bool|null
     */
    public function getIsProtected()
    {
        return $this->container['isProtected'];
    }

    /**
     * Sets isProtected
     *
     * @param bool|null $isProtected isProtected
     *
     * @return self
     */
    public function setIsProtected($isProtected)
    {

        if (is_null($isProtected)) {
            throw new \InvalidArgumentException('non-nullable isProtected cannot be null');
        }

        $this->container['isProtected'] = $isProtected;

        return $this;
    }

    /**
     * Gets appname
     *
     * @return string|null
     */
    public function getAppname()
    {
        return $this->container['appname'];
    }

    /**
     * Sets appname
     *
     * @param string|null $appname appname
     *
     * @return self
     */
    public function setAppname($appname)
    {
        if (!is_null($appname) && (mb_strlen($appname) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $appname when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($appname) && (!preg_match("/(.*){0,2147483647}/", $appname))) {
            throw new \InvalidArgumentException("invalid value for \$appname when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($appname)) {
            throw new \InvalidArgumentException('non-nullable appname cannot be null');
        }

        $this->container['appname'] = $appname;

        return $this;
    }

    /**
     * Gets engine
     *
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine|null
     */
    public function getEngine()
    {
        return $this->container['engine'];
    }

    /**
     * Sets engine
     *
     * @param \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine|null $engine engine
     *
     * @return self
     */
    public function setEngine($engine)
    {

        if (is_null($engine)) {
            throw new \InvalidArgumentException('non-nullable engine cannot be null');
        }

        $this->container['engine'] = $engine;

        return $this;
    }

    /**
     * Gets zone
     *
     * @return string|null
     */
    public function getZone()
    {
        return $this->container['zone'];
    }

    /**
     * Sets zone
     *
     * @param string|null $zone zone
     *
     * @return self
     */
    public function setZone($zone)
    {
        if (!is_null($zone) && (mb_strlen($zone) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $zone when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($zone) && (!preg_match("/(.*){0,2147483647}/", $zone))) {
            throw new \InvalidArgumentException("invalid value for \$zone when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($zone)) {
            throw new \InvalidArgumentException('non-nullable zone cannot be null');
        }

        $this->container['zone'] = $zone;

        return $this;
    }

    /**
     * Gets extDomains
     *
     * @return object[]|null
     */
    public function getExtDomains()
    {
        return $this->container['extDomains'];
    }

    /**
     * Sets extDomains
     *
     * @param object[]|null $extDomains extDomains
     *
     * @return self
     */
    public function setExtDomains($extDomains)
    {

        if (!is_null($extDomains) && (count($extDomains) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $extDomains when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($extDomains)) {
            throw new \InvalidArgumentException('non-nullable extDomains cannot be null');
        }

        $this->container['extDomains'] = $extDomains;

        return $this;
    }

    /**
     * Gets hardwareNodeGroup
     *
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvHardwareNodeGroup|null
     */
    public function getHardwareNodeGroup()
    {
        return $this->container['hardwareNodeGroup'];
    }

    /**
     * Sets hardwareNodeGroup
     *
     * @param \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvHardwareNodeGroup|null $hardwareNodeGroup hardwareNodeGroup
     *
     * @return self
     */
    public function setHardwareNodeGroup($hardwareNodeGroup)
    {

        if (is_null($hardwareNodeGroup)) {
            throw new \InvalidArgumentException('non-nullable hardwareNodeGroup cannot be null');
        }

        $this->container['hardwareNodeGroup'] = $hardwareNodeGroup;

        return $this;
    }

    /**
     * Gets isHAEnabled
     *
     * @return bool|null
     */
    public function getIsHAEnabled()
    {
        return $this->container['isHAEnabled'];
    }

    /**
     * Sets isHAEnabled
     *
     * @param bool|null $isHAEnabled isHAEnabled
     *
     * @return self
     */
    public function setIsHAEnabled($isHAEnabled)
    {

        if (is_null($isHAEnabled)) {
            throw new \InvalidArgumentException('non-nullable isHAEnabled cannot be null');
        }

        $this->container['isHAEnabled'] = $isHAEnabled;

        return $this;
    }

    /**
     * Gets isRemote
     *
     * @return bool|null
     */
    public function getIsRemote()
    {
        return $this->container['isRemote'];
    }

    /**
     * Sets isRemote
     *
     * @param bool|null $isRemote isRemote
     *
     * @return self
     */
    public function setIsRemote($isRemote)
    {

        if (is_null($isRemote)) {
            throw new \InvalidArgumentException('non-nullable isRemote cannot be null');
        }

        $this->container['isRemote'] = $isRemote;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return object[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param object[]|null $groups groups
     *
     * @return self
     */
    public function setGroups($groups)
    {

        if (!is_null($groups) && (count($groups) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $groups when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }

        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets fullDomain
     *
     * @return string|null
     */
    public function getFullDomain()
    {
        return $this->container['fullDomain'];
    }

    /**
     * Sets fullDomain
     *
     * @param string|null $fullDomain fullDomain
     *
     * @return self
     */
    public function setFullDomain($fullDomain)
    {
        if (!is_null($fullDomain) && (mb_strlen($fullDomain) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $fullDomain when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($fullDomain) && (!preg_match("/(.*){0,2147483647}/", $fullDomain))) {
            throw new \InvalidArgumentException("invalid value for \$fullDomain when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($fullDomain)) {
            throw new \InvalidArgumentException('non-nullable fullDomain cannot be null');
        }

        $this->container['fullDomain'] = $fullDomain;

        return $this;
    }

    /**
     * Gets winDomain
     *
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvWinDomain|null
     */
    public function getWinDomain()
    {
        return $this->container['winDomain'];
    }

    /**
     * Sets winDomain
     *
     * @param \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvWinDomain|null $winDomain winDomain
     *
     * @return self
     */
    public function setWinDomain($winDomain)
    {

        if (is_null($winDomain)) {
            throw new \InvalidArgumentException('non-nullable winDomain cannot be null');
        }

        $this->container['winDomain'] = $winDomain;

        return $this;
    }

    /**
     * Gets creatorUid
     *
     * @return int|null
     */
    public function getCreatorUid()
    {
        return $this->container['creatorUid'];
    }

    /**
     * Sets creatorUid
     *
     * @param int|null $creatorUid creatorUid
     *
     * @return self
     */
    public function setCreatorUid($creatorUid)
    {

        if (!is_null($creatorUid) && ($creatorUid > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $creatorUid when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($creatorUid) && ($creatorUid < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $creatorUid when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must be bigger than or equal to -2147483648.');
        }


        if (is_null($creatorUid)) {
            throw new \InvalidArgumentException('non-nullable creatorUid cannot be null');
        }

        $this->container['creatorUid'] = $creatorUid;

        return $this;
    }

    /**
     * Gets originalStatus
     *
     * @return string|null
     */
    public function getOriginalStatus()
    {
        return $this->container['originalStatus'];
    }

    /**
     * Sets originalStatus
     *
     * @param string|null $originalStatus originalStatus
     *
     * @return self
     */
    public function setOriginalStatus($originalStatus)
    {
        $allowedValues = $this->getOriginalStatusAllowableValues();
        if (!is_null($originalStatus) && !in_array($originalStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'originalStatus', must be one of '%s'",
                    $originalStatus,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($originalStatus)) {
            throw new \InvalidArgumentException('non-nullable originalStatus cannot be null');
        }

        $this->container['originalStatus'] = $originalStatus;

        return $this;
    }

    /**
     * Gets isFirewallEnabled
     *
     * @return bool|null
     */
    public function getIsFirewallEnabled()
    {
        return $this->container['isFirewallEnabled'];
    }

    /**
     * Sets isFirewallEnabled
     *
     * @param bool|null $isFirewallEnabled isFirewallEnabled
     *
     * @return self
     */
    public function setIsFirewallEnabled($isFirewallEnabled)
    {

        if (is_null($isFirewallEnabled)) {
            throw new \InvalidArgumentException('non-nullable isFirewallEnabled cannot be null');
        }

        $this->container['isFirewallEnabled'] = $isFirewallEnabled;

        return $this;
    }

    /**
     * Gets appid
     *
     * @return string|null
     */
    public function getAppid()
    {
        return $this->container['appid'];
    }

    /**
     * Sets appid
     *
     * @param string|null $appid appid
     *
     * @return self
     */
    public function setAppid($appid)
    {
        if (!is_null($appid) && (mb_strlen($appid) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $appid when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($appid) && (!preg_match("/(.*){0,2147483647}/", $appid))) {
            throw new \InvalidArgumentException("invalid value for \$appid when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($appid)) {
            throw new \InvalidArgumentException('non-nullable appid cannot be null');
        }

        $this->container['appid'] = $appid;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvDomain|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvDomain|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {

        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return string|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param string|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (!is_null($attributes) && (mb_strlen($attributes) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $attributes when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($attributes) && (!preg_match("/(.*){0,2147483647}/", $attributes))) {
            throw new \InvalidArgumentException("invalid value for \$attributes when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }

        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets isBroken
     *
     * @return bool|null
     */
    public function getIsBroken()
    {
        return $this->container['isBroken'];
    }

    /**
     * Sets isBroken
     *
     * @param bool|null $isBroken isBroken
     *
     * @return self
     */
    public function setIsBroken($isBroken)
    {

        if (is_null($isBroken)) {
            throw new \InvalidArgumentException('non-nullable isBroken cannot be null');
        }

        $this->container['isBroken'] = $isBroken;

        return $this;
    }

    /**
     * Gets isShared
     *
     * @return bool|null
     */
    public function getIsShared()
    {
        return $this->container['isShared'];
    }

    /**
     * Sets isShared
     *
     * @param bool|null $isShared isShared
     *
     * @return self
     */
    public function setIsShared($isShared)
    {

        if (is_null($isShared)) {
            throw new \InvalidArgumentException('non-nullable isShared cannot be null');
        }

        $this->container['isShared'] = $isShared;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return string|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param string|null $properties properties
     *
     * @return self
     */
    public function setProperties($properties)
    {
        if (!is_null($properties) && (mb_strlen($properties) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $properties when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($properties) && (!preg_match("/(.*){0,2147483647}/", $properties))) {
            throw new \InvalidArgumentException("invalid value for \$properties when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($properties)) {
            throw new \InvalidArgumentException('non-nullable properties cannot be null');
        }

        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (!is_null($status) && ($status > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $status when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($status) && ($status < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $status when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnv., must be bigger than or equal to -2147483648.');
        }


        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


