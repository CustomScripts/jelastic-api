<?php
/**
 * TariffPlan
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TariffPlan Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TariffPlan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TariffPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'billableResourceScope' => 'string',
        'chargeOnlyRunning' => 'bool',
        'chargePeriodType' => 'string',
        'cloudletIncrement' => 'int',
        'currency' => '\OpenAPI\Client\Model\TariffPlanCurrency',
        'description' => 'string',
        'docUrl' => 'string',
        'freeResourceScope' => 'string',
        'keyword' => 'string',
        'minCloudletCount' => 'int',
        'minimumFee' => 'float',
        'minimumFeeResourceAmount' => 'float',
        'name' => 'string',
        'overridesTypes' => 'object[]',
        'resource' => '\OpenAPI\Client\Model\TariffPlanResource',
        'strategy' => 'string',
        'strategyData' => '\OpenAPI\Client\Model\TariffPlanStrategyData',
        'tiers' => 'object[]',
        'type' => 'string',
        'uniqueName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'billableResourceScope' => null,
        'chargeOnlyRunning' => null,
        'chargePeriodType' => null,
        'cloudletIncrement' => 'int32',
        'currency' => null,
        'description' => null,
        'docUrl' => null,
        'freeResourceScope' => null,
        'keyword' => null,
        'minCloudletCount' => 'int32',
        'minimumFee' => 'double',
        'minimumFeeResourceAmount' => 'double',
        'name' => null,
        'overridesTypes' => null,
        'resource' => null,
        'strategy' => null,
        'strategyData' => null,
        'tiers' => null,
        'type' => null,
        'uniqueName' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'billableResourceScope' => false,
		'chargeOnlyRunning' => false,
		'chargePeriodType' => false,
		'cloudletIncrement' => false,
		'currency' => false,
		'description' => false,
		'docUrl' => false,
		'freeResourceScope' => false,
		'keyword' => false,
		'minCloudletCount' => false,
		'minimumFee' => false,
		'minimumFeeResourceAmount' => false,
		'name' => false,
		'overridesTypes' => false,
		'resource' => false,
		'strategy' => false,
		'strategyData' => false,
		'tiers' => false,
		'type' => false,
		'uniqueName' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billableResourceScope' => 'billableResourceScope',
        'chargeOnlyRunning' => 'chargeOnlyRunning',
        'chargePeriodType' => 'chargePeriodType',
        'cloudletIncrement' => 'cloudletIncrement',
        'currency' => 'currency',
        'description' => 'description',
        'docUrl' => 'docUrl',
        'freeResourceScope' => 'freeResourceScope',
        'keyword' => 'keyword',
        'minCloudletCount' => 'minCloudletCount',
        'minimumFee' => 'minimumFee',
        'minimumFeeResourceAmount' => 'minimumFeeResourceAmount',
        'name' => 'name',
        'overridesTypes' => 'overridesTypes',
        'resource' => 'resource',
        'strategy' => 'strategy',
        'strategyData' => 'strategyData',
        'tiers' => 'tiers',
        'type' => 'type',
        'uniqueName' => 'uniqueName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billableResourceScope' => 'setBillableResourceScope',
        'chargeOnlyRunning' => 'setChargeOnlyRunning',
        'chargePeriodType' => 'setChargePeriodType',
        'cloudletIncrement' => 'setCloudletIncrement',
        'currency' => 'setCurrency',
        'description' => 'setDescription',
        'docUrl' => 'setDocUrl',
        'freeResourceScope' => 'setFreeResourceScope',
        'keyword' => 'setKeyword',
        'minCloudletCount' => 'setMinCloudletCount',
        'minimumFee' => 'setMinimumFee',
        'minimumFeeResourceAmount' => 'setMinimumFeeResourceAmount',
        'name' => 'setName',
        'overridesTypes' => 'setOverridesTypes',
        'resource' => 'setResource',
        'strategy' => 'setStrategy',
        'strategyData' => 'setStrategyData',
        'tiers' => 'setTiers',
        'type' => 'setType',
        'uniqueName' => 'setUniqueName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billableResourceScope' => 'getBillableResourceScope',
        'chargeOnlyRunning' => 'getChargeOnlyRunning',
        'chargePeriodType' => 'getChargePeriodType',
        'cloudletIncrement' => 'getCloudletIncrement',
        'currency' => 'getCurrency',
        'description' => 'getDescription',
        'docUrl' => 'getDocUrl',
        'freeResourceScope' => 'getFreeResourceScope',
        'keyword' => 'getKeyword',
        'minCloudletCount' => 'getMinCloudletCount',
        'minimumFee' => 'getMinimumFee',
        'minimumFeeResourceAmount' => 'getMinimumFeeResourceAmount',
        'name' => 'getName',
        'overridesTypes' => 'getOverridesTypes',
        'resource' => 'getResource',
        'strategy' => 'getStrategy',
        'strategyData' => 'getStrategyData',
        'tiers' => 'getTiers',
        'type' => 'getType',
        'uniqueName' => 'getUniqueName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BILLABLE_RESOURCE_SCOPE_NODE_0 = 'NODE(0)';
    public const BILLABLE_RESOURCE_SCOPE_ENVIRONMENT_1 = 'ENVIRONMENT(1)';
    public const BILLABLE_RESOURCE_SCOPE_COMMON_2 = 'COMMON(2)';
    public const BILLABLE_RESOURCE_SCOPE_ACCOUNT_3 = 'ACCOUNT(3)';
    public const CHARGE_PERIOD_TYPE_HOUR_0 = 'HOUR(0)';
    public const CHARGE_PERIOD_TYPE_MONTH_1 = 'MONTH(1)';
    public const CHARGE_PERIOD_TYPE_YEAR_2 = 'YEAR(2)';
    public const CHARGE_PERIOD_TYPE_ONETIME_3 = 'ONETIME(3)';
    public const FREE_RESOURCE_SCOPE_NODE_0 = 'NODE(0)';
    public const FREE_RESOURCE_SCOPE_ENVIRONMENT_1 = 'ENVIRONMENT(1)';
    public const FREE_RESOURCE_SCOPE_COMMON_2 = 'COMMON(2)';
    public const FREE_RESOURCE_SCOPE_ACCOUNT_3 = 'ACCOUNT(3)';
    public const OVERRIDES_TYPES_FIXED_0 = 'FIXED(0)';
    public const OVERRIDES_TYPES_FLEXIBLE_1 = 'FLEXIBLE(1)';
    public const OVERRIDES_TYPES_OPTION_2 = 'OPTION(2)';
    public const OVERRIDES_TYPES_NETWORK_3 = 'NETWORK(3)';
    public const OVERRIDES_TYPES_STORAGE_4 = 'STORAGE(4)';
    public const OVERRIDES_TYPES_STORAGE_FIXED_5 = 'STORAGE_FIXED(5)';
    public const OVERRIDES_TYPES_LICENCE_6 = 'LICENCE(6)';
    public const OVERRIDES_TYPES_EXTERNAL_7 = 'EXTERNAL(7)';
    public const OVERRIDES_TYPES_SUBSCRIPTION_8 = 'SUBSCRIPTION(8)';
    public const STRATEGY_VOLUME_0 = 'VOLUME(0)';
    public const STRATEGY_GRADUATED_1 = 'GRADUATED(1)';
    public const STRATEGY_ACCUMULATED_2 = 'ACCUMULATED(2)';
    public const STRATEGY_FLAT_3 = 'FLAT(3)';
    public const TYPE_FIXED_0 = 'FIXED(0)';
    public const TYPE_FLEXIBLE_1 = 'FLEXIBLE(1)';
    public const TYPE_OPTION_2 = 'OPTION(2)';
    public const TYPE_NETWORK_3 = 'NETWORK(3)';
    public const TYPE_STORAGE_4 = 'STORAGE(4)';
    public const TYPE_STORAGE_FIXED_5 = 'STORAGE_FIXED(5)';
    public const TYPE_LICENCE_6 = 'LICENCE(6)';
    public const TYPE_EXTERNAL_7 = 'EXTERNAL(7)';
    public const TYPE_SUBSCRIPTION_8 = 'SUBSCRIPTION(8)';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillableResourceScopeAllowableValues()
    {
        return [
            self::BILLABLE_RESOURCE_SCOPE_NODE_0,
            self::BILLABLE_RESOURCE_SCOPE_ENVIRONMENT_1,
            self::BILLABLE_RESOURCE_SCOPE_COMMON_2,
            self::BILLABLE_RESOURCE_SCOPE_ACCOUNT_3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChargePeriodTypeAllowableValues()
    {
        return [
            self::CHARGE_PERIOD_TYPE_HOUR_0,
            self::CHARGE_PERIOD_TYPE_MONTH_1,
            self::CHARGE_PERIOD_TYPE_YEAR_2,
            self::CHARGE_PERIOD_TYPE_ONETIME_3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFreeResourceScopeAllowableValues()
    {
        return [
            self::FREE_RESOURCE_SCOPE_NODE_0,
            self::FREE_RESOURCE_SCOPE_ENVIRONMENT_1,
            self::FREE_RESOURCE_SCOPE_COMMON_2,
            self::FREE_RESOURCE_SCOPE_ACCOUNT_3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverridesTypesAllowableValues()
    {
        return [
            self::OVERRIDES_TYPES_FIXED_0,
            self::OVERRIDES_TYPES_FLEXIBLE_1,
            self::OVERRIDES_TYPES_OPTION_2,
            self::OVERRIDES_TYPES_NETWORK_3,
            self::OVERRIDES_TYPES_STORAGE_4,
            self::OVERRIDES_TYPES_STORAGE_FIXED_5,
            self::OVERRIDES_TYPES_LICENCE_6,
            self::OVERRIDES_TYPES_EXTERNAL_7,
            self::OVERRIDES_TYPES_SUBSCRIPTION_8,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrategyAllowableValues()
    {
        return [
            self::STRATEGY_VOLUME_0,
            self::STRATEGY_GRADUATED_1,
            self::STRATEGY_ACCUMULATED_2,
            self::STRATEGY_FLAT_3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FIXED_0,
            self::TYPE_FLEXIBLE_1,
            self::TYPE_OPTION_2,
            self::TYPE_NETWORK_3,
            self::TYPE_STORAGE_4,
            self::TYPE_STORAGE_FIXED_5,
            self::TYPE_LICENCE_6,
            self::TYPE_EXTERNAL_7,
            self::TYPE_SUBSCRIPTION_8,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('billableResourceScope', $data ?? [], null);
        $this->setIfExists('chargeOnlyRunning', $data ?? [], null);
        $this->setIfExists('chargePeriodType', $data ?? [], null);
        $this->setIfExists('cloudletIncrement', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('docUrl', $data ?? [], null);
        $this->setIfExists('freeResourceScope', $data ?? [], null);
        $this->setIfExists('keyword', $data ?? [], null);
        $this->setIfExists('minCloudletCount', $data ?? [], null);
        $this->setIfExists('minimumFee', $data ?? [], null);
        $this->setIfExists('minimumFeeResourceAmount', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('overridesTypes', $data ?? [], null);
        $this->setIfExists('resource', $data ?? [], null);
        $this->setIfExists('strategy', $data ?? [], null);
        $this->setIfExists('strategyData', $data ?? [], null);
        $this->setIfExists('tiers', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('uniqueName', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBillableResourceScopeAllowableValues();
        if (!is_null($this->container['billableResourceScope']) && !in_array($this->container['billableResourceScope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'billableResourceScope', must be one of '%s'",
                $this->container['billableResourceScope'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChargePeriodTypeAllowableValues();
        if (!is_null($this->container['chargePeriodType']) && !in_array($this->container['chargePeriodType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'chargePeriodType', must be one of '%s'",
                $this->container['chargePeriodType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['cloudletIncrement']) && ($this->container['cloudletIncrement'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'cloudletIncrement', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['cloudletIncrement']) && ($this->container['cloudletIncrement'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'cloudletIncrement', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['description']) && !preg_match("/(.*){0,2147483647}/", $this->container['description'])) {
            $invalidProperties[] = "invalid value for 'description', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['docUrl']) && (mb_strlen($this->container['docUrl']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'docUrl', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['docUrl']) && !preg_match("/(.*){0,2147483647}/", $this->container['docUrl'])) {
            $invalidProperties[] = "invalid value for 'docUrl', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        $allowedValues = $this->getFreeResourceScopeAllowableValues();
        if (!is_null($this->container['freeResourceScope']) && !in_array($this->container['freeResourceScope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'freeResourceScope', must be one of '%s'",
                $this->container['freeResourceScope'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['keyword']) && (mb_strlen($this->container['keyword']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'keyword', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['keyword']) && !preg_match("/(.*){0,2147483647}/", $this->container['keyword'])) {
            $invalidProperties[] = "invalid value for 'keyword', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['minCloudletCount']) && ($this->container['minCloudletCount'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'minCloudletCount', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['minCloudletCount']) && ($this->container['minCloudletCount'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'minCloudletCount', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['minimumFee']) && ($this->container['minimumFee'] > 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) {
            $invalidProperties[] = "invalid value for 'minimumFee', must be smaller than or equal to 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.";
        }

        if (!is_null($this->container['minimumFee']) && ($this->container['minimumFee'] < 4.9E-324)) {
            $invalidProperties[] = "invalid value for 'minimumFee', must be bigger than or equal to 4.9E-324.";
        }

        if (!is_null($this->container['minimumFeeResourceAmount']) && ($this->container['minimumFeeResourceAmount'] > 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) {
            $invalidProperties[] = "invalid value for 'minimumFeeResourceAmount', must be smaller than or equal to 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.";
        }

        if (!is_null($this->container['minimumFeeResourceAmount']) && ($this->container['minimumFeeResourceAmount'] < 4.9E-324)) {
            $invalidProperties[] = "invalid value for 'minimumFeeResourceAmount', must be bigger than or equal to 4.9E-324.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['name']) && !preg_match("/(.*){0,2147483647}/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['overridesTypes']) && (count($this->container['overridesTypes']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'overridesTypes', number of items must be less than or equal to 2147483647.";
        }

        $allowedValues = $this->getStrategyAllowableValues();
        if (!is_null($this->container['strategy']) && !in_array($this->container['strategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strategy', must be one of '%s'",
                $this->container['strategy'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['tiers']) && (count($this->container['tiers']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'tiers', number of items must be less than or equal to 2147483647.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['uniqueName']) && (mb_strlen($this->container['uniqueName']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'uniqueName', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['uniqueName']) && !preg_match("/(.*){0,2147483647}/", $this->container['uniqueName'])) {
            $invalidProperties[] = "invalid value for 'uniqueName', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billableResourceScope
     *
     * @return string|null
     */
    public function getBillableResourceScope()
    {
        return $this->container['billableResourceScope'];
    }

    /**
     * Sets billableResourceScope
     *
     * @param string|null $billableResourceScope billableResourceScope
     *
     * @return self
     */
    public function setBillableResourceScope($billableResourceScope)
    {
        $allowedValues = $this->getBillableResourceScopeAllowableValues();
        if (!is_null($billableResourceScope) && !in_array($billableResourceScope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'billableResourceScope', must be one of '%s'",
                    $billableResourceScope,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($billableResourceScope)) {
            throw new \InvalidArgumentException('non-nullable billableResourceScope cannot be null');
        }

        $this->container['billableResourceScope'] = $billableResourceScope;

        return $this;
    }

    /**
     * Gets chargeOnlyRunning
     *
     * @return bool|null
     */
    public function getChargeOnlyRunning()
    {
        return $this->container['chargeOnlyRunning'];
    }

    /**
     * Sets chargeOnlyRunning
     *
     * @param bool|null $chargeOnlyRunning chargeOnlyRunning
     *
     * @return self
     */
    public function setChargeOnlyRunning($chargeOnlyRunning)
    {

        if (is_null($chargeOnlyRunning)) {
            throw new \InvalidArgumentException('non-nullable chargeOnlyRunning cannot be null');
        }

        $this->container['chargeOnlyRunning'] = $chargeOnlyRunning;

        return $this;
    }

    /**
     * Gets chargePeriodType
     *
     * @return string|null
     */
    public function getChargePeriodType()
    {
        return $this->container['chargePeriodType'];
    }

    /**
     * Sets chargePeriodType
     *
     * @param string|null $chargePeriodType chargePeriodType
     *
     * @return self
     */
    public function setChargePeriodType($chargePeriodType)
    {
        $allowedValues = $this->getChargePeriodTypeAllowableValues();
        if (!is_null($chargePeriodType) && !in_array($chargePeriodType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'chargePeriodType', must be one of '%s'",
                    $chargePeriodType,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($chargePeriodType)) {
            throw new \InvalidArgumentException('non-nullable chargePeriodType cannot be null');
        }

        $this->container['chargePeriodType'] = $chargePeriodType;

        return $this;
    }

    /**
     * Gets cloudletIncrement
     *
     * @return int|null
     */
    public function getCloudletIncrement()
    {
        return $this->container['cloudletIncrement'];
    }

    /**
     * Sets cloudletIncrement
     *
     * @param int|null $cloudletIncrement cloudletIncrement
     *
     * @return self
     */
    public function setCloudletIncrement($cloudletIncrement)
    {

        if (!is_null($cloudletIncrement) && ($cloudletIncrement > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $cloudletIncrement when calling TariffPlan., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($cloudletIncrement) && ($cloudletIncrement < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $cloudletIncrement when calling TariffPlan., must be bigger than or equal to -2147483648.');
        }


        if (is_null($cloudletIncrement)) {
            throw new \InvalidArgumentException('non-nullable cloudletIncrement cannot be null');
        }

        $this->container['cloudletIncrement'] = $cloudletIncrement;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\TariffPlanCurrency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\TariffPlanCurrency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {

        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $description when calling TariffPlan., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($description) && (!preg_match("/(.*){0,2147483647}/", $description))) {
            throw new \InvalidArgumentException("invalid value for \$description when calling TariffPlan., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets docUrl
     *
     * @return string|null
     */
    public function getDocUrl()
    {
        return $this->container['docUrl'];
    }

    /**
     * Sets docUrl
     *
     * @param string|null $docUrl docUrl
     *
     * @return self
     */
    public function setDocUrl($docUrl)
    {
        if (!is_null($docUrl) && (mb_strlen($docUrl) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $docUrl when calling TariffPlan., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($docUrl) && (!preg_match("/(.*){0,2147483647}/", $docUrl))) {
            throw new \InvalidArgumentException("invalid value for \$docUrl when calling TariffPlan., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($docUrl)) {
            throw new \InvalidArgumentException('non-nullable docUrl cannot be null');
        }

        $this->container['docUrl'] = $docUrl;

        return $this;
    }

    /**
     * Gets freeResourceScope
     *
     * @return string|null
     */
    public function getFreeResourceScope()
    {
        return $this->container['freeResourceScope'];
    }

    /**
     * Sets freeResourceScope
     *
     * @param string|null $freeResourceScope freeResourceScope
     *
     * @return self
     */
    public function setFreeResourceScope($freeResourceScope)
    {
        $allowedValues = $this->getFreeResourceScopeAllowableValues();
        if (!is_null($freeResourceScope) && !in_array($freeResourceScope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'freeResourceScope', must be one of '%s'",
                    $freeResourceScope,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($freeResourceScope)) {
            throw new \InvalidArgumentException('non-nullable freeResourceScope cannot be null');
        }

        $this->container['freeResourceScope'] = $freeResourceScope;

        return $this;
    }

    /**
     * Gets keyword
     *
     * @return string|null
     */
    public function getKeyword()
    {
        return $this->container['keyword'];
    }

    /**
     * Sets keyword
     *
     * @param string|null $keyword keyword
     *
     * @return self
     */
    public function setKeyword($keyword)
    {
        if (!is_null($keyword) && (mb_strlen($keyword) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $keyword when calling TariffPlan., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($keyword) && (!preg_match("/(.*){0,2147483647}/", $keyword))) {
            throw new \InvalidArgumentException("invalid value for \$keyword when calling TariffPlan., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($keyword)) {
            throw new \InvalidArgumentException('non-nullable keyword cannot be null');
        }

        $this->container['keyword'] = $keyword;

        return $this;
    }

    /**
     * Gets minCloudletCount
     *
     * @return int|null
     */
    public function getMinCloudletCount()
    {
        return $this->container['minCloudletCount'];
    }

    /**
     * Sets minCloudletCount
     *
     * @param int|null $minCloudletCount minCloudletCount
     *
     * @return self
     */
    public function setMinCloudletCount($minCloudletCount)
    {

        if (!is_null($minCloudletCount) && ($minCloudletCount > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $minCloudletCount when calling TariffPlan., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($minCloudletCount) && ($minCloudletCount < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $minCloudletCount when calling TariffPlan., must be bigger than or equal to -2147483648.');
        }


        if (is_null($minCloudletCount)) {
            throw new \InvalidArgumentException('non-nullable minCloudletCount cannot be null');
        }

        $this->container['minCloudletCount'] = $minCloudletCount;

        return $this;
    }

    /**
     * Gets minimumFee
     *
     * @return float|null
     */
    public function getMinimumFee()
    {
        return $this->container['minimumFee'];
    }

    /**
     * Sets minimumFee
     *
     * @param float|null $minimumFee minimumFee
     *
     * @return self
     */
    public function setMinimumFee($minimumFee)
    {

        if (!is_null($minimumFee) && ($minimumFee > 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) {
            throw new \InvalidArgumentException('invalid value for $minimumFee when calling TariffPlan., must be smaller than or equal to 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.');
        }
        if (!is_null($minimumFee) && ($minimumFee < 4.9E-324)) {
            throw new \InvalidArgumentException('invalid value for $minimumFee when calling TariffPlan., must be bigger than or equal to 4.9E-324.');
        }


        if (is_null($minimumFee)) {
            throw new \InvalidArgumentException('non-nullable minimumFee cannot be null');
        }

        $this->container['minimumFee'] = $minimumFee;

        return $this;
    }

    /**
     * Gets minimumFeeResourceAmount
     *
     * @return float|null
     */
    public function getMinimumFeeResourceAmount()
    {
        return $this->container['minimumFeeResourceAmount'];
    }

    /**
     * Sets minimumFeeResourceAmount
     *
     * @param float|null $minimumFeeResourceAmount minimumFeeResourceAmount
     *
     * @return self
     */
    public function setMinimumFeeResourceAmount($minimumFeeResourceAmount)
    {

        if (!is_null($minimumFeeResourceAmount) && ($minimumFeeResourceAmount > 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) {
            throw new \InvalidArgumentException('invalid value for $minimumFeeResourceAmount when calling TariffPlan., must be smaller than or equal to 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.');
        }
        if (!is_null($minimumFeeResourceAmount) && ($minimumFeeResourceAmount < 4.9E-324)) {
            throw new \InvalidArgumentException('invalid value for $minimumFeeResourceAmount when calling TariffPlan., must be bigger than or equal to 4.9E-324.');
        }


        if (is_null($minimumFeeResourceAmount)) {
            throw new \InvalidArgumentException('non-nullable minimumFeeResourceAmount cannot be null');
        }

        $this->container['minimumFeeResourceAmount'] = $minimumFeeResourceAmount;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $name when calling TariffPlan., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($name) && (!preg_match("/(.*){0,2147483647}/", $name))) {
            throw new \InvalidArgumentException("invalid value for \$name when calling TariffPlan., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets overridesTypes
     *
     * @return object[]|null
     */
    public function getOverridesTypes()
    {
        return $this->container['overridesTypes'];
    }

    /**
     * Sets overridesTypes
     *
     * @param object[]|null $overridesTypes overridesTypes
     *
     * @return self
     */
    public function setOverridesTypes($overridesTypes)
    {
        $allowedValues = $this->getOverridesTypesAllowableValues();
        if (!is_null($overridesTypes) && array_diff($overridesTypes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'overridesTypes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (!is_null($overridesTypes) && (count($overridesTypes) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $overridesTypes when calling TariffPlan., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($overridesTypes)) {
            throw new \InvalidArgumentException('non-nullable overridesTypes cannot be null');
        }

        $this->container['overridesTypes'] = $overridesTypes;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return \OpenAPI\Client\Model\TariffPlanResource|null
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param \OpenAPI\Client\Model\TariffPlanResource|null $resource resource
     *
     * @return self
     */
    public function setResource($resource)
    {

        if (is_null($resource)) {
            throw new \InvalidArgumentException('non-nullable resource cannot be null');
        }

        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets strategy
     *
     * @return string|null
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     *
     * @param string|null $strategy strategy
     *
     * @return self
     */
    public function setStrategy($strategy)
    {
        $allowedValues = $this->getStrategyAllowableValues();
        if (!is_null($strategy) && !in_array($strategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strategy', must be one of '%s'",
                    $strategy,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($strategy)) {
            throw new \InvalidArgumentException('non-nullable strategy cannot be null');
        }

        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets strategyData
     *
     * @return \OpenAPI\Client\Model\TariffPlanStrategyData|null
     */
    public function getStrategyData()
    {
        return $this->container['strategyData'];
    }

    /**
     * Sets strategyData
     *
     * @param \OpenAPI\Client\Model\TariffPlanStrategyData|null $strategyData strategyData
     *
     * @return self
     */
    public function setStrategyData($strategyData)
    {

        if (is_null($strategyData)) {
            throw new \InvalidArgumentException('non-nullable strategyData cannot be null');
        }

        $this->container['strategyData'] = $strategyData;

        return $this;
    }

    /**
     * Gets tiers
     *
     * @return object[]|null
     */
    public function getTiers()
    {
        return $this->container['tiers'];
    }

    /**
     * Sets tiers
     *
     * @param object[]|null $tiers tiers
     *
     * @return self
     */
    public function setTiers($tiers)
    {

        if (!is_null($tiers) && (count($tiers) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $tiers when calling TariffPlan., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($tiers)) {
            throw new \InvalidArgumentException('non-nullable tiers cannot be null');
        }

        $this->container['tiers'] = $tiers;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets uniqueName
     *
     * @return string|null
     */
    public function getUniqueName()
    {
        return $this->container['uniqueName'];
    }

    /**
     * Sets uniqueName
     *
     * @param string|null $uniqueName uniqueName
     *
     * @return self
     */
    public function setUniqueName($uniqueName)
    {
        if (!is_null($uniqueName) && (mb_strlen($uniqueName) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $uniqueName when calling TariffPlan., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($uniqueName) && (!preg_match("/(.*){0,2147483647}/", $uniqueName))) {
            throw new \InvalidArgumentException("invalid value for \$uniqueName when calling TariffPlan., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($uniqueName)) {
            throw new \InvalidArgumentException('non-nullable uniqueName cannot be null');
        }

        $this->container['uniqueName'] = $uniqueName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


