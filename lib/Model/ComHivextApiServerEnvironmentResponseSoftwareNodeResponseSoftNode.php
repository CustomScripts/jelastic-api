<?php
/**
 * ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com_hivext_api_server_environment_response_SoftwareNodeResponse_softNode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'guestOSType' => 'string',
        'diskIopsLimit' => 'int',
        'primaryIpv4' => '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNodePrimaryIpv4',
        'addons' => 'object[]',
        'displayName' => 'string',
        'hn' => '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNodeHn',
        'bandwidthLimit' => 'int',
        'engineType' => 'string',
        'nodeTypeAlias' => 'string',
        'primaryIpv6' => '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNodePrimaryIpv4',
        'customItem' => 'string',
        'features' => 'object[]',
        'uid' => 'int',
        'hostGroupDisplayName' => 'string',
        'credential' => '\OpenAPI\Client\Model\LabelHardwareNodeSshCredential',
        'engines' => 'object[]',
        'isMaster' => 'bool',
        'osType' => 'string',
        'diskIoLimit' => 'int',
        'adminUrl' => 'string',
        'adminUrls' => 'string',
        'activeEngine' => '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine',
        'extIps' => 'object[]',
        'vmMemory' => 'float',
        'ctid' => 'int',
        'endpoints' => 'object[]',
        'hostOSType' => 'string',
        'address' => 'string',
        'clustergroupid' => 'int',
        'diskLimit' => 'int',
        'maxchanks' => 'int',
        'hostGroupUniqName' => 'string',
        'vmVCPU' => 'int',
        'envId' => 'string',
        'flexibleCloudlets' => 'int',
        'packages' => 'object[]',
        'buildCustomData' => 'string',
        'intIP' => 'string',
        'nodeGroup' => 'string',
        'url' => 'string',
        'vType' => 'string',
        'messages' => 'object[]',
        'fixedCloudlets' => 'int',
        'softNodeGroup' => '\OpenAPI\Client\Model\EnvironmentControlRestEditnodegroupPostRequestNodeGroup'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'guestOSType' => null,
        'diskIopsLimit' => 'int32',
        'primaryIpv4' => null,
        'addons' => null,
        'displayName' => null,
        'hn' => null,
        'bandwidthLimit' => 'int32',
        'engineType' => null,
        'nodeTypeAlias' => null,
        'primaryIpv6' => null,
        'customItem' => null,
        'features' => null,
        'uid' => 'int32',
        'hostGroupDisplayName' => null,
        'credential' => null,
        'engines' => null,
        'isMaster' => null,
        'osType' => null,
        'diskIoLimit' => 'int32',
        'adminUrl' => null,
        'adminUrls' => null,
        'activeEngine' => null,
        'extIps' => null,
        'vmMemory' => 'double',
        'ctid' => 'int32',
        'endpoints' => null,
        'hostOSType' => null,
        'address' => null,
        'clustergroupid' => 'int32',
        'diskLimit' => 'int32',
        'maxchanks' => 'int32',
        'hostGroupUniqName' => null,
        'vmVCPU' => 'int32',
        'envId' => null,
        'flexibleCloudlets' => 'int32',
        'packages' => null,
        'buildCustomData' => null,
        'intIP' => null,
        'nodeGroup' => null,
        'url' => null,
        'vType' => null,
        'messages' => null,
        'fixedCloudlets' => 'int32',
        'softNodeGroup' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'guestOSType' => false,
		'diskIopsLimit' => false,
		'primaryIpv4' => false,
		'addons' => false,
		'displayName' => false,
		'hn' => false,
		'bandwidthLimit' => false,
		'engineType' => false,
		'nodeTypeAlias' => false,
		'primaryIpv6' => false,
		'customItem' => false,
		'features' => false,
		'uid' => false,
		'hostGroupDisplayName' => false,
		'credential' => false,
		'engines' => false,
		'isMaster' => false,
		'osType' => false,
		'diskIoLimit' => false,
		'adminUrl' => false,
		'adminUrls' => false,
		'activeEngine' => false,
		'extIps' => false,
		'vmMemory' => false,
		'ctid' => false,
		'endpoints' => false,
		'hostOSType' => false,
		'address' => false,
		'clustergroupid' => false,
		'diskLimit' => false,
		'maxchanks' => false,
		'hostGroupUniqName' => false,
		'vmVCPU' => false,
		'envId' => false,
		'flexibleCloudlets' => false,
		'packages' => false,
		'buildCustomData' => false,
		'intIP' => false,
		'nodeGroup' => false,
		'url' => false,
		'vType' => false,
		'messages' => false,
		'fixedCloudlets' => false,
		'softNodeGroup' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'guestOSType' => 'guestOSType',
        'diskIopsLimit' => 'diskIopsLimit',
        'primaryIpv4' => 'primaryIpv4',
        'addons' => 'addons',
        'displayName' => 'displayName',
        'hn' => 'hn',
        'bandwidthLimit' => 'bandwidthLimit',
        'engineType' => 'engineType',
        'nodeTypeAlias' => 'nodeTypeAlias',
        'primaryIpv6' => 'primaryIpv6',
        'customItem' => 'customItem',
        'features' => 'features',
        'uid' => 'uid',
        'hostGroupDisplayName' => 'hostGroupDisplayName',
        'credential' => 'credential',
        'engines' => 'engines',
        'isMaster' => 'isMaster',
        'osType' => 'osType',
        'diskIoLimit' => 'diskIoLimit',
        'adminUrl' => 'adminUrl',
        'adminUrls' => 'adminUrls',
        'activeEngine' => 'activeEngine',
        'extIps' => 'extIps',
        'vmMemory' => 'vmMemory',
        'ctid' => 'ctid',
        'endpoints' => 'endpoints',
        'hostOSType' => 'hostOSType',
        'address' => 'address',
        'clustergroupid' => 'clustergroupid',
        'diskLimit' => 'diskLimit',
        'maxchanks' => 'maxchanks',
        'hostGroupUniqName' => 'hostGroupUniqName',
        'vmVCPU' => 'vmVCPU',
        'envId' => 'envId',
        'flexibleCloudlets' => 'flexibleCloudlets',
        'packages' => 'packages',
        'buildCustomData' => 'buildCustomData',
        'intIP' => 'intIP',
        'nodeGroup' => 'nodeGroup',
        'url' => 'url',
        'vType' => 'vType',
        'messages' => 'messages',
        'fixedCloudlets' => 'fixedCloudlets',
        'softNodeGroup' => 'softNodeGroup'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'guestOSType' => 'setGuestOSType',
        'diskIopsLimit' => 'setDiskIopsLimit',
        'primaryIpv4' => 'setPrimaryIpv4',
        'addons' => 'setAddons',
        'displayName' => 'setDisplayName',
        'hn' => 'setHn',
        'bandwidthLimit' => 'setBandwidthLimit',
        'engineType' => 'setEngineType',
        'nodeTypeAlias' => 'setNodeTypeAlias',
        'primaryIpv6' => 'setPrimaryIpv6',
        'customItem' => 'setCustomItem',
        'features' => 'setFeatures',
        'uid' => 'setUid',
        'hostGroupDisplayName' => 'setHostGroupDisplayName',
        'credential' => 'setCredential',
        'engines' => 'setEngines',
        'isMaster' => 'setIsMaster',
        'osType' => 'setOsType',
        'diskIoLimit' => 'setDiskIoLimit',
        'adminUrl' => 'setAdminUrl',
        'adminUrls' => 'setAdminUrls',
        'activeEngine' => 'setActiveEngine',
        'extIps' => 'setExtIps',
        'vmMemory' => 'setVmMemory',
        'ctid' => 'setCtid',
        'endpoints' => 'setEndpoints',
        'hostOSType' => 'setHostOSType',
        'address' => 'setAddress',
        'clustergroupid' => 'setClustergroupid',
        'diskLimit' => 'setDiskLimit',
        'maxchanks' => 'setMaxchanks',
        'hostGroupUniqName' => 'setHostGroupUniqName',
        'vmVCPU' => 'setVmVCPU',
        'envId' => 'setEnvId',
        'flexibleCloudlets' => 'setFlexibleCloudlets',
        'packages' => 'setPackages',
        'buildCustomData' => 'setBuildCustomData',
        'intIP' => 'setIntIP',
        'nodeGroup' => 'setNodeGroup',
        'url' => 'setUrl',
        'vType' => 'setVType',
        'messages' => 'setMessages',
        'fixedCloudlets' => 'setFixedCloudlets',
        'softNodeGroup' => 'setSoftNodeGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'guestOSType' => 'getGuestOSType',
        'diskIopsLimit' => 'getDiskIopsLimit',
        'primaryIpv4' => 'getPrimaryIpv4',
        'addons' => 'getAddons',
        'displayName' => 'getDisplayName',
        'hn' => 'getHn',
        'bandwidthLimit' => 'getBandwidthLimit',
        'engineType' => 'getEngineType',
        'nodeTypeAlias' => 'getNodeTypeAlias',
        'primaryIpv6' => 'getPrimaryIpv6',
        'customItem' => 'getCustomItem',
        'features' => 'getFeatures',
        'uid' => 'getUid',
        'hostGroupDisplayName' => 'getHostGroupDisplayName',
        'credential' => 'getCredential',
        'engines' => 'getEngines',
        'isMaster' => 'getIsMaster',
        'osType' => 'getOsType',
        'diskIoLimit' => 'getDiskIoLimit',
        'adminUrl' => 'getAdminUrl',
        'adminUrls' => 'getAdminUrls',
        'activeEngine' => 'getActiveEngine',
        'extIps' => 'getExtIps',
        'vmMemory' => 'getVmMemory',
        'ctid' => 'getCtid',
        'endpoints' => 'getEndpoints',
        'hostOSType' => 'getHostOSType',
        'address' => 'getAddress',
        'clustergroupid' => 'getClustergroupid',
        'diskLimit' => 'getDiskLimit',
        'maxchanks' => 'getMaxchanks',
        'hostGroupUniqName' => 'getHostGroupUniqName',
        'vmVCPU' => 'getVmVCPU',
        'envId' => 'getEnvId',
        'flexibleCloudlets' => 'getFlexibleCloudlets',
        'packages' => 'getPackages',
        'buildCustomData' => 'getBuildCustomData',
        'intIP' => 'getIntIP',
        'nodeGroup' => 'getNodeGroup',
        'url' => 'getUrl',
        'vType' => 'getVType',
        'messages' => 'getMessages',
        'fixedCloudlets' => 'getFixedCloudlets',
        'softNodeGroup' => 'getSoftNodeGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const GUEST_OS_TYPE_LINUX_0 = 'LINUX(0)';
    public const GUEST_OS_TYPE_WINDOWS2008_1 = 'WINDOWS2008(1)';
    public const GUEST_OS_TYPE_WINDOWS2012_2 = 'WINDOWS2012(2)';
    public const GUEST_OS_TYPE_WINDOWS2016_3 = 'WINDOWS2016(3)';
    public const GUEST_OS_TYPE_WINDOWS2019_4 = 'WINDOWS2019(4)';
    public const OS_TYPE_LINUX_0 = 'LINUX(0)';
    public const OS_TYPE_WINDOWS2008_1 = 'WINDOWS2008(1)';
    public const OS_TYPE_WINDOWS2012_2 = 'WINDOWS2012(2)';
    public const OS_TYPE_WINDOWS2016_3 = 'WINDOWS2016(3)';
    public const OS_TYPE_WINDOWS2019_4 = 'WINDOWS2019(4)';
    public const HOST_OS_TYPE_LINUX_0 = 'LINUX(0)';
    public const HOST_OS_TYPE_WINDOWS2008_1 = 'WINDOWS2008(1)';
    public const HOST_OS_TYPE_WINDOWS2012_2 = 'WINDOWS2012(2)';
    public const HOST_OS_TYPE_WINDOWS2016_3 = 'WINDOWS2016(3)';
    public const HOST_OS_TYPE_WINDOWS2019_4 = 'WINDOWS2019(4)';
    public const V_TYPE_CT_0 = 'CT(0)';
    public const V_TYPE_VM_1 = 'VM(1)';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGuestOSTypeAllowableValues()
    {
        return [
            self::GUEST_OS_TYPE_LINUX_0,
            self::GUEST_OS_TYPE_WINDOWS2008_1,
            self::GUEST_OS_TYPE_WINDOWS2012_2,
            self::GUEST_OS_TYPE_WINDOWS2016_3,
            self::GUEST_OS_TYPE_WINDOWS2019_4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOsTypeAllowableValues()
    {
        return [
            self::OS_TYPE_LINUX_0,
            self::OS_TYPE_WINDOWS2008_1,
            self::OS_TYPE_WINDOWS2012_2,
            self::OS_TYPE_WINDOWS2016_3,
            self::OS_TYPE_WINDOWS2019_4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHostOSTypeAllowableValues()
    {
        return [
            self::HOST_OS_TYPE_LINUX_0,
            self::HOST_OS_TYPE_WINDOWS2008_1,
            self::HOST_OS_TYPE_WINDOWS2012_2,
            self::HOST_OS_TYPE_WINDOWS2016_3,
            self::HOST_OS_TYPE_WINDOWS2019_4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVTypeAllowableValues()
    {
        return [
            self::V_TYPE_CT_0,
            self::V_TYPE_VM_1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('guestOSType', $data ?? [], null);
        $this->setIfExists('diskIopsLimit', $data ?? [], null);
        $this->setIfExists('primaryIpv4', $data ?? [], null);
        $this->setIfExists('addons', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('hn', $data ?? [], null);
        $this->setIfExists('bandwidthLimit', $data ?? [], null);
        $this->setIfExists('engineType', $data ?? [], null);
        $this->setIfExists('nodeTypeAlias', $data ?? [], null);
        $this->setIfExists('primaryIpv6', $data ?? [], null);
        $this->setIfExists('customItem', $data ?? [], null);
        $this->setIfExists('features', $data ?? [], null);
        $this->setIfExists('uid', $data ?? [], null);
        $this->setIfExists('hostGroupDisplayName', $data ?? [], null);
        $this->setIfExists('credential', $data ?? [], null);
        $this->setIfExists('engines', $data ?? [], null);
        $this->setIfExists('isMaster', $data ?? [], null);
        $this->setIfExists('osType', $data ?? [], null);
        $this->setIfExists('diskIoLimit', $data ?? [], null);
        $this->setIfExists('adminUrl', $data ?? [], null);
        $this->setIfExists('adminUrls', $data ?? [], null);
        $this->setIfExists('activeEngine', $data ?? [], null);
        $this->setIfExists('extIps', $data ?? [], null);
        $this->setIfExists('vmMemory', $data ?? [], null);
        $this->setIfExists('ctid', $data ?? [], null);
        $this->setIfExists('endpoints', $data ?? [], null);
        $this->setIfExists('hostOSType', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('clustergroupid', $data ?? [], null);
        $this->setIfExists('diskLimit', $data ?? [], null);
        $this->setIfExists('maxchanks', $data ?? [], null);
        $this->setIfExists('hostGroupUniqName', $data ?? [], null);
        $this->setIfExists('vmVCPU', $data ?? [], null);
        $this->setIfExists('envId', $data ?? [], null);
        $this->setIfExists('flexibleCloudlets', $data ?? [], null);
        $this->setIfExists('packages', $data ?? [], null);
        $this->setIfExists('buildCustomData', $data ?? [], null);
        $this->setIfExists('intIP', $data ?? [], null);
        $this->setIfExists('nodeGroup', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('vType', $data ?? [], null);
        $this->setIfExists('messages', $data ?? [], null);
        $this->setIfExists('fixedCloudlets', $data ?? [], null);
        $this->setIfExists('softNodeGroup', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGuestOSTypeAllowableValues();
        if (!is_null($this->container['guestOSType']) && !in_array($this->container['guestOSType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'guestOSType', must be one of '%s'",
                $this->container['guestOSType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['diskIopsLimit']) && ($this->container['diskIopsLimit'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'diskIopsLimit', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['diskIopsLimit']) && ($this->container['diskIopsLimit'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'diskIopsLimit', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['addons']) && (count($this->container['addons']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'addons', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['displayName']) && (mb_strlen($this->container['displayName']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'displayName', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['displayName']) && !preg_match("/(.*){0,2147483647}/", $this->container['displayName'])) {
            $invalidProperties[] = "invalid value for 'displayName', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['bandwidthLimit']) && ($this->container['bandwidthLimit'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'bandwidthLimit', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['bandwidthLimit']) && ($this->container['bandwidthLimit'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'bandwidthLimit', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['engineType']) && (mb_strlen($this->container['engineType']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'engineType', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['engineType']) && !preg_match("/(.*){0,2147483647}/", $this->container['engineType'])) {
            $invalidProperties[] = "invalid value for 'engineType', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['nodeTypeAlias']) && (mb_strlen($this->container['nodeTypeAlias']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'nodeTypeAlias', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['nodeTypeAlias']) && !preg_match("/(.*){0,2147483647}/", $this->container['nodeTypeAlias'])) {
            $invalidProperties[] = "invalid value for 'nodeTypeAlias', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['customItem']) && (mb_strlen($this->container['customItem']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'customItem', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['customItem']) && !preg_match("/(.*){0,2147483647}/", $this->container['customItem'])) {
            $invalidProperties[] = "invalid value for 'customItem', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['features']) && (count($this->container['features']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'features', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['uid']) && ($this->container['uid'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'uid', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['uid']) && ($this->container['uid'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'uid', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['hostGroupDisplayName']) && (mb_strlen($this->container['hostGroupDisplayName']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'hostGroupDisplayName', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['hostGroupDisplayName']) && !preg_match("/(.*){0,2147483647}/", $this->container['hostGroupDisplayName'])) {
            $invalidProperties[] = "invalid value for 'hostGroupDisplayName', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['engines']) && (count($this->container['engines']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'engines', number of items must be less than or equal to 2147483647.";
        }

        $allowedValues = $this->getOsTypeAllowableValues();
        if (!is_null($this->container['osType']) && !in_array($this->container['osType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'osType', must be one of '%s'",
                $this->container['osType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['diskIoLimit']) && ($this->container['diskIoLimit'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'diskIoLimit', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['diskIoLimit']) && ($this->container['diskIoLimit'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'diskIoLimit', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['adminUrl']) && (mb_strlen($this->container['adminUrl']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'adminUrl', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['adminUrl']) && !preg_match("/(.*){0,2147483647}/", $this->container['adminUrl'])) {
            $invalidProperties[] = "invalid value for 'adminUrl', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['adminUrls']) && (mb_strlen($this->container['adminUrls']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'adminUrls', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['adminUrls']) && !preg_match("/(.*){0,2147483647}/", $this->container['adminUrls'])) {
            $invalidProperties[] = "invalid value for 'adminUrls', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['extIps']) && (count($this->container['extIps']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'extIps', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['vmMemory']) && ($this->container['vmMemory'] > 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) {
            $invalidProperties[] = "invalid value for 'vmMemory', must be smaller than or equal to 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.";
        }

        if (!is_null($this->container['vmMemory']) && ($this->container['vmMemory'] < 4.9E-324)) {
            $invalidProperties[] = "invalid value for 'vmMemory', must be bigger than or equal to 4.9E-324.";
        }

        if (!is_null($this->container['ctid']) && ($this->container['ctid'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'ctid', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['ctid']) && ($this->container['ctid'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'ctid', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['endpoints']) && (count($this->container['endpoints']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'endpoints', number of items must be less than or equal to 2147483647.";
        }

        $allowedValues = $this->getHostOSTypeAllowableValues();
        if (!is_null($this->container['hostOSType']) && !in_array($this->container['hostOSType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hostOSType', must be one of '%s'",
                $this->container['hostOSType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['address']) && !preg_match("/(.*){0,2147483647}/", $this->container['address'])) {
            $invalidProperties[] = "invalid value for 'address', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['clustergroupid']) && ($this->container['clustergroupid'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'clustergroupid', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['clustergroupid']) && ($this->container['clustergroupid'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'clustergroupid', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['diskLimit']) && ($this->container['diskLimit'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'diskLimit', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['diskLimit']) && ($this->container['diskLimit'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'diskLimit', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['maxchanks']) && ($this->container['maxchanks'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'maxchanks', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['maxchanks']) && ($this->container['maxchanks'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'maxchanks', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['hostGroupUniqName']) && (mb_strlen($this->container['hostGroupUniqName']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'hostGroupUniqName', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['hostGroupUniqName']) && !preg_match("/(.*){0,2147483647}/", $this->container['hostGroupUniqName'])) {
            $invalidProperties[] = "invalid value for 'hostGroupUniqName', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['vmVCPU']) && ($this->container['vmVCPU'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'vmVCPU', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['vmVCPU']) && ($this->container['vmVCPU'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'vmVCPU', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['envId']) && (mb_strlen($this->container['envId']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'envId', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['envId']) && !preg_match("/(.*){0,2147483647}/", $this->container['envId'])) {
            $invalidProperties[] = "invalid value for 'envId', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['flexibleCloudlets']) && ($this->container['flexibleCloudlets'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'flexibleCloudlets', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['flexibleCloudlets']) && ($this->container['flexibleCloudlets'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'flexibleCloudlets', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['packages']) && (count($this->container['packages']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'packages', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['buildCustomData']) && (mb_strlen($this->container['buildCustomData']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'buildCustomData', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['buildCustomData']) && !preg_match("/(.*){0,2147483647}/", $this->container['buildCustomData'])) {
            $invalidProperties[] = "invalid value for 'buildCustomData', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['intIP']) && (mb_strlen($this->container['intIP']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'intIP', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['intIP']) && !preg_match("/(.*){0,2147483647}/", $this->container['intIP'])) {
            $invalidProperties[] = "invalid value for 'intIP', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['nodeGroup']) && (mb_strlen($this->container['nodeGroup']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'nodeGroup', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['nodeGroup']) && !preg_match("/(.*){0,2147483647}/", $this->container['nodeGroup'])) {
            $invalidProperties[] = "invalid value for 'nodeGroup', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['url']) && !preg_match("/(.*){0,2147483647}/", $this->container['url'])) {
            $invalidProperties[] = "invalid value for 'url', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        $allowedValues = $this->getVTypeAllowableValues();
        if (!is_null($this->container['vType']) && !in_array($this->container['vType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vType', must be one of '%s'",
                $this->container['vType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['messages']) && (count($this->container['messages']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'messages', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['fixedCloudlets']) && ($this->container['fixedCloudlets'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'fixedCloudlets', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['fixedCloudlets']) && ($this->container['fixedCloudlets'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'fixedCloudlets', must be bigger than or equal to -2147483648.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets guestOSType
     *
     * @return string|null
     */
    public function getGuestOSType()
    {
        return $this->container['guestOSType'];
    }

    /**
     * Sets guestOSType
     *
     * @param string|null $guestOSType guestOSType
     *
     * @return self
     */
    public function setGuestOSType($guestOSType)
    {
        $allowedValues = $this->getGuestOSTypeAllowableValues();
        if (!is_null($guestOSType) && !in_array($guestOSType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'guestOSType', must be one of '%s'",
                    $guestOSType,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($guestOSType)) {
            throw new \InvalidArgumentException('non-nullable guestOSType cannot be null');
        }

        $this->container['guestOSType'] = $guestOSType;

        return $this;
    }

    /**
     * Gets diskIopsLimit
     *
     * @return int|null
     */
    public function getDiskIopsLimit()
    {
        return $this->container['diskIopsLimit'];
    }

    /**
     * Sets diskIopsLimit
     *
     * @param int|null $diskIopsLimit diskIopsLimit
     *
     * @return self
     */
    public function setDiskIopsLimit($diskIopsLimit)
    {

        if (!is_null($diskIopsLimit) && ($diskIopsLimit > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $diskIopsLimit when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($diskIopsLimit) && ($diskIopsLimit < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $diskIopsLimit when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($diskIopsLimit)) {
            throw new \InvalidArgumentException('non-nullable diskIopsLimit cannot be null');
        }

        $this->container['diskIopsLimit'] = $diskIopsLimit;

        return $this;
    }

    /**
     * Gets primaryIpv4
     *
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNodePrimaryIpv4|null
     */
    public function getPrimaryIpv4()
    {
        return $this->container['primaryIpv4'];
    }

    /**
     * Sets primaryIpv4
     *
     * @param \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNodePrimaryIpv4|null $primaryIpv4 primaryIpv4
     *
     * @return self
     */
    public function setPrimaryIpv4($primaryIpv4)
    {

        if (is_null($primaryIpv4)) {
            throw new \InvalidArgumentException('non-nullable primaryIpv4 cannot be null');
        }

        $this->container['primaryIpv4'] = $primaryIpv4;

        return $this;
    }

    /**
     * Gets addons
     *
     * @return object[]|null
     */
    public function getAddons()
    {
        return $this->container['addons'];
    }

    /**
     * Sets addons
     *
     * @param object[]|null $addons addons
     *
     * @return self
     */
    public function setAddons($addons)
    {

        if (!is_null($addons) && (count($addons) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $addons when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($addons)) {
            throw new \InvalidArgumentException('non-nullable addons cannot be null');
        }

        $this->container['addons'] = $addons;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName displayName
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        if (!is_null($displayName) && (mb_strlen($displayName) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $displayName when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($displayName) && (!preg_match("/(.*){0,2147483647}/", $displayName))) {
            throw new \InvalidArgumentException("invalid value for \$displayName when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($displayName)) {
            throw new \InvalidArgumentException('non-nullable displayName cannot be null');
        }

        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets hn
     *
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNodeHn|null
     */
    public function getHn()
    {
        return $this->container['hn'];
    }

    /**
     * Sets hn
     *
     * @param \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNodeHn|null $hn hn
     *
     * @return self
     */
    public function setHn($hn)
    {

        if (is_null($hn)) {
            throw new \InvalidArgumentException('non-nullable hn cannot be null');
        }

        $this->container['hn'] = $hn;

        return $this;
    }

    /**
     * Gets bandwidthLimit
     *
     * @return int|null
     */
    public function getBandwidthLimit()
    {
        return $this->container['bandwidthLimit'];
    }

    /**
     * Sets bandwidthLimit
     *
     * @param int|null $bandwidthLimit bandwidthLimit
     *
     * @return self
     */
    public function setBandwidthLimit($bandwidthLimit)
    {

        if (!is_null($bandwidthLimit) && ($bandwidthLimit > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $bandwidthLimit when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($bandwidthLimit) && ($bandwidthLimit < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $bandwidthLimit when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($bandwidthLimit)) {
            throw new \InvalidArgumentException('non-nullable bandwidthLimit cannot be null');
        }

        $this->container['bandwidthLimit'] = $bandwidthLimit;

        return $this;
    }

    /**
     * Gets engineType
     *
     * @return string|null
     */
    public function getEngineType()
    {
        return $this->container['engineType'];
    }

    /**
     * Sets engineType
     *
     * @param string|null $engineType engineType
     *
     * @return self
     */
    public function setEngineType($engineType)
    {
        if (!is_null($engineType) && (mb_strlen($engineType) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $engineType when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($engineType) && (!preg_match("/(.*){0,2147483647}/", $engineType))) {
            throw new \InvalidArgumentException("invalid value for \$engineType when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($engineType)) {
            throw new \InvalidArgumentException('non-nullable engineType cannot be null');
        }

        $this->container['engineType'] = $engineType;

        return $this;
    }

    /**
     * Gets nodeTypeAlias
     *
     * @return string|null
     */
    public function getNodeTypeAlias()
    {
        return $this->container['nodeTypeAlias'];
    }

    /**
     * Sets nodeTypeAlias
     *
     * @param string|null $nodeTypeAlias nodeTypeAlias
     *
     * @return self
     */
    public function setNodeTypeAlias($nodeTypeAlias)
    {
        if (!is_null($nodeTypeAlias) && (mb_strlen($nodeTypeAlias) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $nodeTypeAlias when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($nodeTypeAlias) && (!preg_match("/(.*){0,2147483647}/", $nodeTypeAlias))) {
            throw new \InvalidArgumentException("invalid value for \$nodeTypeAlias when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($nodeTypeAlias)) {
            throw new \InvalidArgumentException('non-nullable nodeTypeAlias cannot be null');
        }

        $this->container['nodeTypeAlias'] = $nodeTypeAlias;

        return $this;
    }

    /**
     * Gets primaryIpv6
     *
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNodePrimaryIpv4|null
     */
    public function getPrimaryIpv6()
    {
        return $this->container['primaryIpv6'];
    }

    /**
     * Sets primaryIpv6
     *
     * @param \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNodePrimaryIpv4|null $primaryIpv6 primaryIpv6
     *
     * @return self
     */
    public function setPrimaryIpv6($primaryIpv6)
    {

        if (is_null($primaryIpv6)) {
            throw new \InvalidArgumentException('non-nullable primaryIpv6 cannot be null');
        }

        $this->container['primaryIpv6'] = $primaryIpv6;

        return $this;
    }

    /**
     * Gets customItem
     *
     * @return string|null
     */
    public function getCustomItem()
    {
        return $this->container['customItem'];
    }

    /**
     * Sets customItem
     *
     * @param string|null $customItem customItem
     *
     * @return self
     */
    public function setCustomItem($customItem)
    {
        if (!is_null($customItem) && (mb_strlen($customItem) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $customItem when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($customItem) && (!preg_match("/(.*){0,2147483647}/", $customItem))) {
            throw new \InvalidArgumentException("invalid value for \$customItem when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($customItem)) {
            throw new \InvalidArgumentException('non-nullable customItem cannot be null');
        }

        $this->container['customItem'] = $customItem;

        return $this;
    }

    /**
     * Gets features
     *
     * @return object[]|null
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param object[]|null $features features
     *
     * @return self
     */
    public function setFeatures($features)
    {

        if (!is_null($features) && (count($features) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $features when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($features)) {
            throw new \InvalidArgumentException('non-nullable features cannot be null');
        }

        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return int|null
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param int|null $uid uid
     *
     * @return self
     */
    public function setUid($uid)
    {

        if (!is_null($uid) && ($uid > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $uid when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($uid) && ($uid < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $uid when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($uid)) {
            throw new \InvalidArgumentException('non-nullable uid cannot be null');
        }

        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets hostGroupDisplayName
     *
     * @return string|null
     */
    public function getHostGroupDisplayName()
    {
        return $this->container['hostGroupDisplayName'];
    }

    /**
     * Sets hostGroupDisplayName
     *
     * @param string|null $hostGroupDisplayName hostGroupDisplayName
     *
     * @return self
     */
    public function setHostGroupDisplayName($hostGroupDisplayName)
    {
        if (!is_null($hostGroupDisplayName) && (mb_strlen($hostGroupDisplayName) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $hostGroupDisplayName when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($hostGroupDisplayName) && (!preg_match("/(.*){0,2147483647}/", $hostGroupDisplayName))) {
            throw new \InvalidArgumentException("invalid value for \$hostGroupDisplayName when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($hostGroupDisplayName)) {
            throw new \InvalidArgumentException('non-nullable hostGroupDisplayName cannot be null');
        }

        $this->container['hostGroupDisplayName'] = $hostGroupDisplayName;

        return $this;
    }

    /**
     * Gets credential
     *
     * @return \OpenAPI\Client\Model\LabelHardwareNodeSshCredential|null
     */
    public function getCredential()
    {
        return $this->container['credential'];
    }

    /**
     * Sets credential
     *
     * @param \OpenAPI\Client\Model\LabelHardwareNodeSshCredential|null $credential credential
     *
     * @return self
     */
    public function setCredential($credential)
    {

        if (is_null($credential)) {
            throw new \InvalidArgumentException('non-nullable credential cannot be null');
        }

        $this->container['credential'] = $credential;

        return $this;
    }

    /**
     * Gets engines
     *
     * @return object[]|null
     */
    public function getEngines()
    {
        return $this->container['engines'];
    }

    /**
     * Sets engines
     *
     * @param object[]|null $engines engines
     *
     * @return self
     */
    public function setEngines($engines)
    {

        if (!is_null($engines) && (count($engines) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $engines when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($engines)) {
            throw new \InvalidArgumentException('non-nullable engines cannot be null');
        }

        $this->container['engines'] = $engines;

        return $this;
    }

    /**
     * Gets isMaster
     *
     * @return bool|null
     */
    public function getIsMaster()
    {
        return $this->container['isMaster'];
    }

    /**
     * Sets isMaster
     *
     * @param bool|null $isMaster isMaster
     *
     * @return self
     */
    public function setIsMaster($isMaster)
    {

        if (is_null($isMaster)) {
            throw new \InvalidArgumentException('non-nullable isMaster cannot be null');
        }

        $this->container['isMaster'] = $isMaster;

        return $this;
    }

    /**
     * Gets osType
     *
     * @return string|null
     */
    public function getOsType()
    {
        return $this->container['osType'];
    }

    /**
     * Sets osType
     *
     * @param string|null $osType osType
     *
     * @return self
     */
    public function setOsType($osType)
    {
        $allowedValues = $this->getOsTypeAllowableValues();
        if (!is_null($osType) && !in_array($osType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'osType', must be one of '%s'",
                    $osType,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($osType)) {
            throw new \InvalidArgumentException('non-nullable osType cannot be null');
        }

        $this->container['osType'] = $osType;

        return $this;
    }

    /**
     * Gets diskIoLimit
     *
     * @return int|null
     */
    public function getDiskIoLimit()
    {
        return $this->container['diskIoLimit'];
    }

    /**
     * Sets diskIoLimit
     *
     * @param int|null $diskIoLimit diskIoLimit
     *
     * @return self
     */
    public function setDiskIoLimit($diskIoLimit)
    {

        if (!is_null($diskIoLimit) && ($diskIoLimit > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $diskIoLimit when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($diskIoLimit) && ($diskIoLimit < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $diskIoLimit when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($diskIoLimit)) {
            throw new \InvalidArgumentException('non-nullable diskIoLimit cannot be null');
        }

        $this->container['diskIoLimit'] = $diskIoLimit;

        return $this;
    }

    /**
     * Gets adminUrl
     *
     * @return string|null
     */
    public function getAdminUrl()
    {
        return $this->container['adminUrl'];
    }

    /**
     * Sets adminUrl
     *
     * @param string|null $adminUrl adminUrl
     *
     * @return self
     */
    public function setAdminUrl($adminUrl)
    {
        if (!is_null($adminUrl) && (mb_strlen($adminUrl) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $adminUrl when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($adminUrl) && (!preg_match("/(.*){0,2147483647}/", $adminUrl))) {
            throw new \InvalidArgumentException("invalid value for \$adminUrl when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($adminUrl)) {
            throw new \InvalidArgumentException('non-nullable adminUrl cannot be null');
        }

        $this->container['adminUrl'] = $adminUrl;

        return $this;
    }

    /**
     * Gets adminUrls
     *
     * @return string|null
     */
    public function getAdminUrls()
    {
        return $this->container['adminUrls'];
    }

    /**
     * Sets adminUrls
     *
     * @param string|null $adminUrls adminUrls
     *
     * @return self
     */
    public function setAdminUrls($adminUrls)
    {
        if (!is_null($adminUrls) && (mb_strlen($adminUrls) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $adminUrls when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($adminUrls) && (!preg_match("/(.*){0,2147483647}/", $adminUrls))) {
            throw new \InvalidArgumentException("invalid value for \$adminUrls when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($adminUrls)) {
            throw new \InvalidArgumentException('non-nullable adminUrls cannot be null');
        }

        $this->container['adminUrls'] = $adminUrls;

        return $this;
    }

    /**
     * Gets activeEngine
     *
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine|null
     */
    public function getActiveEngine()
    {
        return $this->container['activeEngine'];
    }

    /**
     * Sets activeEngine
     *
     * @param \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine|null $activeEngine activeEngine
     *
     * @return self
     */
    public function setActiveEngine($activeEngine)
    {

        if (is_null($activeEngine)) {
            throw new \InvalidArgumentException('non-nullable activeEngine cannot be null');
        }

        $this->container['activeEngine'] = $activeEngine;

        return $this;
    }

    /**
     * Gets extIps
     *
     * @return object[]|null
     */
    public function getExtIps()
    {
        return $this->container['extIps'];
    }

    /**
     * Sets extIps
     *
     * @param object[]|null $extIps extIps
     *
     * @return self
     */
    public function setExtIps($extIps)
    {

        if (!is_null($extIps) && (count($extIps) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $extIps when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($extIps)) {
            throw new \InvalidArgumentException('non-nullable extIps cannot be null');
        }

        $this->container['extIps'] = $extIps;

        return $this;
    }

    /**
     * Gets vmMemory
     *
     * @return float|null
     */
    public function getVmMemory()
    {
        return $this->container['vmMemory'];
    }

    /**
     * Sets vmMemory
     *
     * @param float|null $vmMemory vmMemory
     *
     * @return self
     */
    public function setVmMemory($vmMemory)
    {

        if (!is_null($vmMemory) && ($vmMemory > 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) {
            throw new \InvalidArgumentException('invalid value for $vmMemory when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.');
        }
        if (!is_null($vmMemory) && ($vmMemory < 4.9E-324)) {
            throw new \InvalidArgumentException('invalid value for $vmMemory when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be bigger than or equal to 4.9E-324.');
        }


        if (is_null($vmMemory)) {
            throw new \InvalidArgumentException('non-nullable vmMemory cannot be null');
        }

        $this->container['vmMemory'] = $vmMemory;

        return $this;
    }

    /**
     * Gets ctid
     *
     * @return int|null
     */
    public function getCtid()
    {
        return $this->container['ctid'];
    }

    /**
     * Sets ctid
     *
     * @param int|null $ctid ctid
     *
     * @return self
     */
    public function setCtid($ctid)
    {

        if (!is_null($ctid) && ($ctid > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $ctid when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($ctid) && ($ctid < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $ctid when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($ctid)) {
            throw new \InvalidArgumentException('non-nullable ctid cannot be null');
        }

        $this->container['ctid'] = $ctid;

        return $this;
    }

    /**
     * Gets endpoints
     *
     * @return object[]|null
     */
    public function getEndpoints()
    {
        return $this->container['endpoints'];
    }

    /**
     * Sets endpoints
     *
     * @param object[]|null $endpoints endpoints
     *
     * @return self
     */
    public function setEndpoints($endpoints)
    {

        if (!is_null($endpoints) && (count($endpoints) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $endpoints when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($endpoints)) {
            throw new \InvalidArgumentException('non-nullable endpoints cannot be null');
        }

        $this->container['endpoints'] = $endpoints;

        return $this;
    }

    /**
     * Gets hostOSType
     *
     * @return string|null
     */
    public function getHostOSType()
    {
        return $this->container['hostOSType'];
    }

    /**
     * Sets hostOSType
     *
     * @param string|null $hostOSType hostOSType
     *
     * @return self
     */
    public function setHostOSType($hostOSType)
    {
        $allowedValues = $this->getHostOSTypeAllowableValues();
        if (!is_null($hostOSType) && !in_array($hostOSType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hostOSType', must be one of '%s'",
                    $hostOSType,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($hostOSType)) {
            throw new \InvalidArgumentException('non-nullable hostOSType cannot be null');
        }

        $this->container['hostOSType'] = $hostOSType;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (!is_null($address) && (mb_strlen($address) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $address when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($address) && (!preg_match("/(.*){0,2147483647}/", $address))) {
            throw new \InvalidArgumentException("invalid value for \$address when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets clustergroupid
     *
     * @return int|null
     */
    public function getClustergroupid()
    {
        return $this->container['clustergroupid'];
    }

    /**
     * Sets clustergroupid
     *
     * @param int|null $clustergroupid clustergroupid
     *
     * @return self
     */
    public function setClustergroupid($clustergroupid)
    {

        if (!is_null($clustergroupid) && ($clustergroupid > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $clustergroupid when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($clustergroupid) && ($clustergroupid < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $clustergroupid when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($clustergroupid)) {
            throw new \InvalidArgumentException('non-nullable clustergroupid cannot be null');
        }

        $this->container['clustergroupid'] = $clustergroupid;

        return $this;
    }

    /**
     * Gets diskLimit
     *
     * @return int|null
     */
    public function getDiskLimit()
    {
        return $this->container['diskLimit'];
    }

    /**
     * Sets diskLimit
     *
     * @param int|null $diskLimit diskLimit
     *
     * @return self
     */
    public function setDiskLimit($diskLimit)
    {

        if (!is_null($diskLimit) && ($diskLimit > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $diskLimit when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($diskLimit) && ($diskLimit < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $diskLimit when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($diskLimit)) {
            throw new \InvalidArgumentException('non-nullable diskLimit cannot be null');
        }

        $this->container['diskLimit'] = $diskLimit;

        return $this;
    }

    /**
     * Gets maxchanks
     *
     * @return int|null
     */
    public function getMaxchanks()
    {
        return $this->container['maxchanks'];
    }

    /**
     * Sets maxchanks
     *
     * @param int|null $maxchanks maxchanks
     *
     * @return self
     */
    public function setMaxchanks($maxchanks)
    {

        if (!is_null($maxchanks) && ($maxchanks > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $maxchanks when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($maxchanks) && ($maxchanks < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $maxchanks when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($maxchanks)) {
            throw new \InvalidArgumentException('non-nullable maxchanks cannot be null');
        }

        $this->container['maxchanks'] = $maxchanks;

        return $this;
    }

    /**
     * Gets hostGroupUniqName
     *
     * @return string|null
     */
    public function getHostGroupUniqName()
    {
        return $this->container['hostGroupUniqName'];
    }

    /**
     * Sets hostGroupUniqName
     *
     * @param string|null $hostGroupUniqName hostGroupUniqName
     *
     * @return self
     */
    public function setHostGroupUniqName($hostGroupUniqName)
    {
        if (!is_null($hostGroupUniqName) && (mb_strlen($hostGroupUniqName) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $hostGroupUniqName when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($hostGroupUniqName) && (!preg_match("/(.*){0,2147483647}/", $hostGroupUniqName))) {
            throw new \InvalidArgumentException("invalid value for \$hostGroupUniqName when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($hostGroupUniqName)) {
            throw new \InvalidArgumentException('non-nullable hostGroupUniqName cannot be null');
        }

        $this->container['hostGroupUniqName'] = $hostGroupUniqName;

        return $this;
    }

    /**
     * Gets vmVCPU
     *
     * @return int|null
     */
    public function getVmVCPU()
    {
        return $this->container['vmVCPU'];
    }

    /**
     * Sets vmVCPU
     *
     * @param int|null $vmVCPU vmVCPU
     *
     * @return self
     */
    public function setVmVCPU($vmVCPU)
    {

        if (!is_null($vmVCPU) && ($vmVCPU > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $vmVCPU when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($vmVCPU) && ($vmVCPU < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $vmVCPU when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($vmVCPU)) {
            throw new \InvalidArgumentException('non-nullable vmVCPU cannot be null');
        }

        $this->container['vmVCPU'] = $vmVCPU;

        return $this;
    }

    /**
     * Gets envId
     *
     * @return string|null
     */
    public function getEnvId()
    {
        return $this->container['envId'];
    }

    /**
     * Sets envId
     *
     * @param string|null $envId envId
     *
     * @return self
     */
    public function setEnvId($envId)
    {
        if (!is_null($envId) && (mb_strlen($envId) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $envId when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($envId) && (!preg_match("/(.*){0,2147483647}/", $envId))) {
            throw new \InvalidArgumentException("invalid value for \$envId when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($envId)) {
            throw new \InvalidArgumentException('non-nullable envId cannot be null');
        }

        $this->container['envId'] = $envId;

        return $this;
    }

    /**
     * Gets flexibleCloudlets
     *
     * @return int|null
     */
    public function getFlexibleCloudlets()
    {
        return $this->container['flexibleCloudlets'];
    }

    /**
     * Sets flexibleCloudlets
     *
     * @param int|null $flexibleCloudlets flexibleCloudlets
     *
     * @return self
     */
    public function setFlexibleCloudlets($flexibleCloudlets)
    {

        if (!is_null($flexibleCloudlets) && ($flexibleCloudlets > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $flexibleCloudlets when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($flexibleCloudlets) && ($flexibleCloudlets < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $flexibleCloudlets when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($flexibleCloudlets)) {
            throw new \InvalidArgumentException('non-nullable flexibleCloudlets cannot be null');
        }

        $this->container['flexibleCloudlets'] = $flexibleCloudlets;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return object[]|null
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param object[]|null $packages packages
     *
     * @return self
     */
    public function setPackages($packages)
    {

        if (!is_null($packages) && (count($packages) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $packages when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($packages)) {
            throw new \InvalidArgumentException('non-nullable packages cannot be null');
        }

        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets buildCustomData
     *
     * @return string|null
     */
    public function getBuildCustomData()
    {
        return $this->container['buildCustomData'];
    }

    /**
     * Sets buildCustomData
     *
     * @param string|null $buildCustomData buildCustomData
     *
     * @return self
     */
    public function setBuildCustomData($buildCustomData)
    {
        if (!is_null($buildCustomData) && (mb_strlen($buildCustomData) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $buildCustomData when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($buildCustomData) && (!preg_match("/(.*){0,2147483647}/", $buildCustomData))) {
            throw new \InvalidArgumentException("invalid value for \$buildCustomData when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($buildCustomData)) {
            throw new \InvalidArgumentException('non-nullable buildCustomData cannot be null');
        }

        $this->container['buildCustomData'] = $buildCustomData;

        return $this;
    }

    /**
     * Gets intIP
     *
     * @return string|null
     */
    public function getIntIP()
    {
        return $this->container['intIP'];
    }

    /**
     * Sets intIP
     *
     * @param string|null $intIP intIP
     *
     * @return self
     */
    public function setIntIP($intIP)
    {
        if (!is_null($intIP) && (mb_strlen($intIP) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $intIP when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($intIP) && (!preg_match("/(.*){0,2147483647}/", $intIP))) {
            throw new \InvalidArgumentException("invalid value for \$intIP when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($intIP)) {
            throw new \InvalidArgumentException('non-nullable intIP cannot be null');
        }

        $this->container['intIP'] = $intIP;

        return $this;
    }

    /**
     * Gets nodeGroup
     *
     * @return string|null
     */
    public function getNodeGroup()
    {
        return $this->container['nodeGroup'];
    }

    /**
     * Sets nodeGroup
     *
     * @param string|null $nodeGroup nodeGroup
     *
     * @return self
     */
    public function setNodeGroup($nodeGroup)
    {
        if (!is_null($nodeGroup) && (mb_strlen($nodeGroup) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $nodeGroup when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($nodeGroup) && (!preg_match("/(.*){0,2147483647}/", $nodeGroup))) {
            throw new \InvalidArgumentException("invalid value for \$nodeGroup when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($nodeGroup)) {
            throw new \InvalidArgumentException('non-nullable nodeGroup cannot be null');
        }

        $this->container['nodeGroup'] = $nodeGroup;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (!is_null($url) && (mb_strlen($url) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $url when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($url) && (!preg_match("/(.*){0,2147483647}/", $url))) {
            throw new \InvalidArgumentException("invalid value for \$url when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets vType
     *
     * @return string|null
     */
    public function getVType()
    {
        return $this->container['vType'];
    }

    /**
     * Sets vType
     *
     * @param string|null $vType vType
     *
     * @return self
     */
    public function setVType($vType)
    {
        $allowedValues = $this->getVTypeAllowableValues();
        if (!is_null($vType) && !in_array($vType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vType', must be one of '%s'",
                    $vType,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($vType)) {
            throw new \InvalidArgumentException('non-nullable vType cannot be null');
        }

        $this->container['vType'] = $vType;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return object[]|null
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param object[]|null $messages messages
     *
     * @return self
     */
    public function setMessages($messages)
    {

        if (!is_null($messages) && (count($messages) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $messages when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }

        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets fixedCloudlets
     *
     * @return int|null
     */
    public function getFixedCloudlets()
    {
        return $this->container['fixedCloudlets'];
    }

    /**
     * Sets fixedCloudlets
     *
     * @param int|null $fixedCloudlets fixedCloudlets
     *
     * @return self
     */
    public function setFixedCloudlets($fixedCloudlets)
    {

        if (!is_null($fixedCloudlets) && ($fixedCloudlets > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $fixedCloudlets when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($fixedCloudlets) && ($fixedCloudlets < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $fixedCloudlets when calling ComHivextApiServerEnvironmentResponseSoftwareNodeResponseSoftNode., must be bigger than or equal to -2147483648.');
        }


        if (is_null($fixedCloudlets)) {
            throw new \InvalidArgumentException('non-nullable fixedCloudlets cannot be null');
        }

        $this->container['fixedCloudlets'] = $fixedCloudlets;

        return $this;
    }

    /**
     * Gets softNodeGroup
     *
     * @return \OpenAPI\Client\Model\EnvironmentControlRestEditnodegroupPostRequestNodeGroup|null
     */
    public function getSoftNodeGroup()
    {
        return $this->container['softNodeGroup'];
    }

    /**
     * Sets softNodeGroup
     *
     * @param \OpenAPI\Client\Model\EnvironmentControlRestEditnodegroupPostRequestNodeGroup|null $softNodeGroup softNodeGroup
     *
     * @return self
     */
    public function setSoftNodeGroup($softNodeGroup)
    {

        if (is_null($softNodeGroup)) {
            throw new \InvalidArgumentException('non-nullable softNodeGroup cannot be null');
        }

        $this->container['softNodeGroup'] = $softNodeGroup;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


