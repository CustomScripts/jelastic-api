<?php
/**
 * ComHivextApiServerUsersResponseApiTokenResponseToken
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComHivextApiServerUsersResponseApiTokenResponseToken Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComHivextApiServerUsersResponseApiTokenResponseToken implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com_hivext_api_server_users_response_ApiTokenResponse_token';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'isSystem' => 'bool',
        'lastUsed' => '\DateTime',
        'tokenTemplate' => '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponseTokenTokenTemplate',
        'extraData' => 'string',
        'useObjectHash' => 'bool',
        'description' => 'string',
        'apiListItems' => 'object[]',
        'id' => 'int',
        'expiresAt' => '\DateTime',
        'key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'isSystem' => null,
        'lastUsed' => 'date',
        'tokenTemplate' => null,
        'extraData' => null,
        'useObjectHash' => null,
        'description' => null,
        'apiListItems' => null,
        'id' => 'int32',
        'expiresAt' => 'date',
        'key' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'isSystem' => false,
		'lastUsed' => false,
		'tokenTemplate' => false,
		'extraData' => false,
		'useObjectHash' => false,
		'description' => false,
		'apiListItems' => false,
		'id' => false,
		'expiresAt' => false,
		'key' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'isSystem' => 'isSystem',
        'lastUsed' => 'lastUsed',
        'tokenTemplate' => 'tokenTemplate',
        'extraData' => 'extraData',
        'useObjectHash' => 'useObjectHash',
        'description' => 'description',
        'apiListItems' => 'apiListItems',
        'id' => 'id',
        'expiresAt' => 'expiresAt',
        'key' => 'key'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'isSystem' => 'setIsSystem',
        'lastUsed' => 'setLastUsed',
        'tokenTemplate' => 'setTokenTemplate',
        'extraData' => 'setExtraData',
        'useObjectHash' => 'setUseObjectHash',
        'description' => 'setDescription',
        'apiListItems' => 'setApiListItems',
        'id' => 'setId',
        'expiresAt' => 'setExpiresAt',
        'key' => 'setKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'isSystem' => 'getIsSystem',
        'lastUsed' => 'getLastUsed',
        'tokenTemplate' => 'getTokenTemplate',
        'extraData' => 'getExtraData',
        'useObjectHash' => 'getUseObjectHash',
        'description' => 'getDescription',
        'apiListItems' => 'getApiListItems',
        'id' => 'getId',
        'expiresAt' => 'getExpiresAt',
        'key' => 'getKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('isSystem', $data ?? [], null);
        $this->setIfExists('lastUsed', $data ?? [], null);
        $this->setIfExists('tokenTemplate', $data ?? [], null);
        $this->setIfExists('extraData', $data ?? [], null);
        $this->setIfExists('useObjectHash', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('apiListItems', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('expiresAt', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['lastUsed']) && (mb_strlen($this->container['lastUsed']) > 19)) {
            $invalidProperties[] = "invalid value for 'lastUsed', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['lastUsed']) && !preg_match("/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/", $this->container['lastUsed'])) {
            $invalidProperties[] = "invalid value for 'lastUsed', must be conform to the pattern /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/.";
        }

        if (!is_null($this->container['extraData']) && (mb_strlen($this->container['extraData']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'extraData', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['extraData']) && !preg_match("/(.*){0,2147483647}/", $this->container['extraData'])) {
            $invalidProperties[] = "invalid value for 'extraData', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['description']) && !preg_match("/(.*){0,2147483647}/", $this->container['description'])) {
            $invalidProperties[] = "invalid value for 'description', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['apiListItems']) && (count($this->container['apiListItems']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'apiListItems', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['expiresAt']) && (mb_strlen($this->container['expiresAt']) > 19)) {
            $invalidProperties[] = "invalid value for 'expiresAt', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['expiresAt']) && !preg_match("/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/", $this->container['expiresAt'])) {
            $invalidProperties[] = "invalid value for 'expiresAt', must be conform to the pattern /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/.";
        }

        if (!is_null($this->container['key']) && (mb_strlen($this->container['key']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'key', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['key']) && !preg_match("/(.*){0,2147483647}/", $this->container['key'])) {
            $invalidProperties[] = "invalid value for 'key', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets isSystem
     *
     * @return bool|null
     */
    public function getIsSystem()
    {
        return $this->container['isSystem'];
    }

    /**
     * Sets isSystem
     *
     * @param bool|null $isSystem isSystem
     *
     * @return self
     */
    public function setIsSystem($isSystem)
    {

        if (is_null($isSystem)) {
            throw new \InvalidArgumentException('non-nullable isSystem cannot be null');
        }

        $this->container['isSystem'] = $isSystem;

        return $this;
    }

    /**
     * Gets lastUsed
     *
     * @return \DateTime|null
     */
    public function getLastUsed()
    {
        return $this->container['lastUsed'];
    }

    /**
     * Sets lastUsed
     *
     * @param \DateTime|null $lastUsed lastUsed
     *
     * @return self
     */
    public function setLastUsed($lastUsed)
    {
        if (!is_null($lastUsed) && (mb_strlen($lastUsed) > 19)) {
            throw new \InvalidArgumentException('invalid length for $lastUsed when calling ComHivextApiServerUsersResponseApiTokenResponseToken., must be smaller than or equal to 19.');
        }
        if (!is_null($lastUsed) && (!preg_match("/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/", $lastUsed))) {
            throw new \InvalidArgumentException("invalid value for \$lastUsed when calling ComHivextApiServerUsersResponseApiTokenResponseToken., must conform to the pattern /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/.");
        }


        if (is_null($lastUsed)) {
            throw new \InvalidArgumentException('non-nullable lastUsed cannot be null');
        }

        $this->container['lastUsed'] = $lastUsed;

        return $this;
    }

    /**
     * Gets tokenTemplate
     *
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponseTokenTokenTemplate|null
     */
    public function getTokenTemplate()
    {
        return $this->container['tokenTemplate'];
    }

    /**
     * Sets tokenTemplate
     *
     * @param \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponseTokenTokenTemplate|null $tokenTemplate tokenTemplate
     *
     * @return self
     */
    public function setTokenTemplate($tokenTemplate)
    {

        if (is_null($tokenTemplate)) {
            throw new \InvalidArgumentException('non-nullable tokenTemplate cannot be null');
        }

        $this->container['tokenTemplate'] = $tokenTemplate;

        return $this;
    }

    /**
     * Gets extraData
     *
     * @return string|null
     */
    public function getExtraData()
    {
        return $this->container['extraData'];
    }

    /**
     * Sets extraData
     *
     * @param string|null $extraData extraData
     *
     * @return self
     */
    public function setExtraData($extraData)
    {
        if (!is_null($extraData) && (mb_strlen($extraData) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $extraData when calling ComHivextApiServerUsersResponseApiTokenResponseToken., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($extraData) && (!preg_match("/(.*){0,2147483647}/", $extraData))) {
            throw new \InvalidArgumentException("invalid value for \$extraData when calling ComHivextApiServerUsersResponseApiTokenResponseToken., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($extraData)) {
            throw new \InvalidArgumentException('non-nullable extraData cannot be null');
        }

        $this->container['extraData'] = $extraData;

        return $this;
    }

    /**
     * Gets useObjectHash
     *
     * @return bool|null
     */
    public function getUseObjectHash()
    {
        return $this->container['useObjectHash'];
    }

    /**
     * Sets useObjectHash
     *
     * @param bool|null $useObjectHash useObjectHash
     *
     * @return self
     */
    public function setUseObjectHash($useObjectHash)
    {

        if (is_null($useObjectHash)) {
            throw new \InvalidArgumentException('non-nullable useObjectHash cannot be null');
        }

        $this->container['useObjectHash'] = $useObjectHash;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ComHivextApiServerUsersResponseApiTokenResponseToken., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($description) && (!preg_match("/(.*){0,2147483647}/", $description))) {
            throw new \InvalidArgumentException("invalid value for \$description when calling ComHivextApiServerUsersResponseApiTokenResponseToken., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets apiListItems
     *
     * @return object[]|null
     */
    public function getApiListItems()
    {
        return $this->container['apiListItems'];
    }

    /**
     * Sets apiListItems
     *
     * @param object[]|null $apiListItems apiListItems
     *
     * @return self
     */
    public function setApiListItems($apiListItems)
    {

        if (!is_null($apiListItems) && (count($apiListItems) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $apiListItems when calling ComHivextApiServerUsersResponseApiTokenResponseToken., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($apiListItems)) {
            throw new \InvalidArgumentException('non-nullable apiListItems cannot be null');
        }

        $this->container['apiListItems'] = $apiListItems;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ComHivextApiServerUsersResponseApiTokenResponseToken., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($id) && ($id < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ComHivextApiServerUsersResponseApiTokenResponseToken., must be bigger than or equal to -2147483648.');
        }


        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets expiresAt
     *
     * @return \DateTime|null
     */
    public function getExpiresAt()
    {
        return $this->container['expiresAt'];
    }

    /**
     * Sets expiresAt
     *
     * @param \DateTime|null $expiresAt expiresAt
     *
     * @return self
     */
    public function setExpiresAt($expiresAt)
    {
        if (!is_null($expiresAt) && (mb_strlen($expiresAt) > 19)) {
            throw new \InvalidArgumentException('invalid length for $expiresAt when calling ComHivextApiServerUsersResponseApiTokenResponseToken., must be smaller than or equal to 19.');
        }
        if (!is_null($expiresAt) && (!preg_match("/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/", $expiresAt))) {
            throw new \InvalidArgumentException("invalid value for \$expiresAt when calling ComHivextApiServerUsersResponseApiTokenResponseToken., must conform to the pattern /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/.");
        }


        if (is_null($expiresAt)) {
            throw new \InvalidArgumentException('non-nullable expiresAt cannot be null');
        }

        $this->container['expiresAt'] = $expiresAt;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return self
     */
    public function setKey($key)
    {
        if (!is_null($key) && (mb_strlen($key) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $key when calling ComHivextApiServerUsersResponseApiTokenResponseToken., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($key) && (!preg_match("/(.*){0,2147483647}/", $key))) {
            throw new \InvalidArgumentException("invalid value for \$key when calling ComHivextApiServerUsersResponseApiTokenResponseToken., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }

        $this->container['key'] = $key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


