<?php
/**
 * RemouteFile
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RemouteFile Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RemouteFile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RemouteFile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'absolutePath' => 'string',
        'fileType' => 'string',
        'isDir' => 'bool',
        'isExported' => 'bool',
        'isRoot' => 'bool',
        'lastModified' => 'string',
        'length' => 'int',
        'name' => 'string',
        'permission' => 'string',
        'protocol' => 'string',
        'sourceHost' => 'string',
        'sourceNodeId' => 'int',
        'sourcePath' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'absolutePath' => null,
        'fileType' => null,
        'isDir' => null,
        'isExported' => null,
        'isRoot' => null,
        'lastModified' => null,
        'length' => 'int64',
        'name' => null,
        'permission' => null,
        'protocol' => null,
        'sourceHost' => null,
        'sourceNodeId' => 'int32',
        'sourcePath' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'absolutePath' => false,
		'fileType' => false,
		'isDir' => false,
		'isExported' => false,
		'isRoot' => false,
		'lastModified' => false,
		'length' => false,
		'name' => false,
		'permission' => false,
		'protocol' => false,
		'sourceHost' => false,
		'sourceNodeId' => false,
		'sourcePath' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'absolutePath' => 'absolutePath',
        'fileType' => 'fileType',
        'isDir' => 'isDir',
        'isExported' => 'isExported',
        'isRoot' => 'isRoot',
        'lastModified' => 'lastModified',
        'length' => 'length',
        'name' => 'name',
        'permission' => 'permission',
        'protocol' => 'protocol',
        'sourceHost' => 'sourceHost',
        'sourceNodeId' => 'sourceNodeId',
        'sourcePath' => 'sourcePath'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'absolutePath' => 'setAbsolutePath',
        'fileType' => 'setFileType',
        'isDir' => 'setIsDir',
        'isExported' => 'setIsExported',
        'isRoot' => 'setIsRoot',
        'lastModified' => 'setLastModified',
        'length' => 'setLength',
        'name' => 'setName',
        'permission' => 'setPermission',
        'protocol' => 'setProtocol',
        'sourceHost' => 'setSourceHost',
        'sourceNodeId' => 'setSourceNodeId',
        'sourcePath' => 'setSourcePath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'absolutePath' => 'getAbsolutePath',
        'fileType' => 'getFileType',
        'isDir' => 'getIsDir',
        'isExported' => 'getIsExported',
        'isRoot' => 'getIsRoot',
        'lastModified' => 'getLastModified',
        'length' => 'getLength',
        'name' => 'getName',
        'permission' => 'getPermission',
        'protocol' => 'getProtocol',
        'sourceHost' => 'getSourceHost',
        'sourceNodeId' => 'getSourceNodeId',
        'sourcePath' => 'getSourcePath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('absolutePath', $data ?? [], null);
        $this->setIfExists('fileType', $data ?? [], null);
        $this->setIfExists('isDir', $data ?? [], null);
        $this->setIfExists('isExported', $data ?? [], null);
        $this->setIfExists('isRoot', $data ?? [], null);
        $this->setIfExists('lastModified', $data ?? [], null);
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('permission', $data ?? [], null);
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('sourceHost', $data ?? [], null);
        $this->setIfExists('sourceNodeId', $data ?? [], null);
        $this->setIfExists('sourcePath', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['absolutePath']) && (mb_strlen($this->container['absolutePath']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'absolutePath', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['absolutePath']) && !preg_match("/(.*){0,2147483647}/", $this->container['absolutePath'])) {
            $invalidProperties[] = "invalid value for 'absolutePath', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['fileType']) && (mb_strlen($this->container['fileType']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'fileType', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['fileType']) && !preg_match("/(.*){0,2147483647}/", $this->container['fileType'])) {
            $invalidProperties[] = "invalid value for 'fileType', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['lastModified']) && (mb_strlen($this->container['lastModified']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'lastModified', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['lastModified']) && !preg_match("/(.*){0,2147483647}/", $this->container['lastModified'])) {
            $invalidProperties[] = "invalid value for 'lastModified', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['length']) && ($this->container['length'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'length', must be smaller than or equal to 9223372036854775807.";
        }

        if (!is_null($this->container['length']) && ($this->container['length'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'length', must be bigger than or equal to -9223372036854775808.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['name']) && !preg_match("/(.*){0,2147483647}/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['permission']) && (mb_strlen($this->container['permission']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'permission', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['permission']) && !preg_match("/(.*){0,2147483647}/", $this->container['permission'])) {
            $invalidProperties[] = "invalid value for 'permission', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['protocol']) && (mb_strlen($this->container['protocol']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'protocol', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['protocol']) && !preg_match("/(.*){0,2147483647}/", $this->container['protocol'])) {
            $invalidProperties[] = "invalid value for 'protocol', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['sourceHost']) && (mb_strlen($this->container['sourceHost']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'sourceHost', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['sourceHost']) && !preg_match("/(.*){0,2147483647}/", $this->container['sourceHost'])) {
            $invalidProperties[] = "invalid value for 'sourceHost', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['sourceNodeId']) && ($this->container['sourceNodeId'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'sourceNodeId', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['sourceNodeId']) && ($this->container['sourceNodeId'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'sourceNodeId', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['sourcePath']) && (mb_strlen($this->container['sourcePath']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'sourcePath', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['sourcePath']) && !preg_match("/(.*){0,2147483647}/", $this->container['sourcePath'])) {
            $invalidProperties[] = "invalid value for 'sourcePath', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets absolutePath
     *
     * @return string|null
     */
    public function getAbsolutePath()
    {
        return $this->container['absolutePath'];
    }

    /**
     * Sets absolutePath
     *
     * @param string|null $absolutePath absolutePath
     *
     * @return self
     */
    public function setAbsolutePath($absolutePath)
    {
        if (!is_null($absolutePath) && (mb_strlen($absolutePath) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $absolutePath when calling RemouteFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($absolutePath) && (!preg_match("/(.*){0,2147483647}/", $absolutePath))) {
            throw new \InvalidArgumentException("invalid value for \$absolutePath when calling RemouteFile., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($absolutePath)) {
            throw new \InvalidArgumentException('non-nullable absolutePath cannot be null');
        }

        $this->container['absolutePath'] = $absolutePath;

        return $this;
    }

    /**
     * Gets fileType
     *
     * @return string|null
     */
    public function getFileType()
    {
        return $this->container['fileType'];
    }

    /**
     * Sets fileType
     *
     * @param string|null $fileType fileType
     *
     * @return self
     */
    public function setFileType($fileType)
    {
        if (!is_null($fileType) && (mb_strlen($fileType) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $fileType when calling RemouteFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($fileType) && (!preg_match("/(.*){0,2147483647}/", $fileType))) {
            throw new \InvalidArgumentException("invalid value for \$fileType when calling RemouteFile., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($fileType)) {
            throw new \InvalidArgumentException('non-nullable fileType cannot be null');
        }

        $this->container['fileType'] = $fileType;

        return $this;
    }

    /**
     * Gets isDir
     *
     * @return bool|null
     */
    public function getIsDir()
    {
        return $this->container['isDir'];
    }

    /**
     * Sets isDir
     *
     * @param bool|null $isDir isDir
     *
     * @return self
     */
    public function setIsDir($isDir)
    {

        if (is_null($isDir)) {
            throw new \InvalidArgumentException('non-nullable isDir cannot be null');
        }

        $this->container['isDir'] = $isDir;

        return $this;
    }

    /**
     * Gets isExported
     *
     * @return bool|null
     */
    public function getIsExported()
    {
        return $this->container['isExported'];
    }

    /**
     * Sets isExported
     *
     * @param bool|null $isExported isExported
     *
     * @return self
     */
    public function setIsExported($isExported)
    {

        if (is_null($isExported)) {
            throw new \InvalidArgumentException('non-nullable isExported cannot be null');
        }

        $this->container['isExported'] = $isExported;

        return $this;
    }

    /**
     * Gets isRoot
     *
     * @return bool|null
     */
    public function getIsRoot()
    {
        return $this->container['isRoot'];
    }

    /**
     * Sets isRoot
     *
     * @param bool|null $isRoot isRoot
     *
     * @return self
     */
    public function setIsRoot($isRoot)
    {

        if (is_null($isRoot)) {
            throw new \InvalidArgumentException('non-nullable isRoot cannot be null');
        }

        $this->container['isRoot'] = $isRoot;

        return $this;
    }

    /**
     * Gets lastModified
     *
     * @return string|null
     */
    public function getLastModified()
    {
        return $this->container['lastModified'];
    }

    /**
     * Sets lastModified
     *
     * @param string|null $lastModified lastModified
     *
     * @return self
     */
    public function setLastModified($lastModified)
    {
        if (!is_null($lastModified) && (mb_strlen($lastModified) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $lastModified when calling RemouteFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($lastModified) && (!preg_match("/(.*){0,2147483647}/", $lastModified))) {
            throw new \InvalidArgumentException("invalid value for \$lastModified when calling RemouteFile., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($lastModified)) {
            throw new \InvalidArgumentException('non-nullable lastModified cannot be null');
        }

        $this->container['lastModified'] = $lastModified;

        return $this;
    }

    /**
     * Gets length
     *
     * @return int|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int|null $length length
     *
     * @return self
     */
    public function setLength($length)
    {

        if (!is_null($length) && ($length > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $length when calling RemouteFile., must be smaller than or equal to 9223372036854775807.');
        }
        if (!is_null($length) && ($length < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $length when calling RemouteFile., must be bigger than or equal to -9223372036854775808.');
        }


        if (is_null($length)) {
            throw new \InvalidArgumentException('non-nullable length cannot be null');
        }

        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $name when calling RemouteFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($name) && (!preg_match("/(.*){0,2147483647}/", $name))) {
            throw new \InvalidArgumentException("invalid value for \$name when calling RemouteFile., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets permission
     *
     * @return string|null
     */
    public function getPermission()
    {
        return $this->container['permission'];
    }

    /**
     * Sets permission
     *
     * @param string|null $permission permission
     *
     * @return self
     */
    public function setPermission($permission)
    {
        if (!is_null($permission) && (mb_strlen($permission) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $permission when calling RemouteFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($permission) && (!preg_match("/(.*){0,2147483647}/", $permission))) {
            throw new \InvalidArgumentException("invalid value for \$permission when calling RemouteFile., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($permission)) {
            throw new \InvalidArgumentException('non-nullable permission cannot be null');
        }

        $this->container['permission'] = $permission;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol protocol
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        if (!is_null($protocol) && (mb_strlen($protocol) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $protocol when calling RemouteFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($protocol) && (!preg_match("/(.*){0,2147483647}/", $protocol))) {
            throw new \InvalidArgumentException("invalid value for \$protocol when calling RemouteFile., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($protocol)) {
            throw new \InvalidArgumentException('non-nullable protocol cannot be null');
        }

        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets sourceHost
     *
     * @return string|null
     */
    public function getSourceHost()
    {
        return $this->container['sourceHost'];
    }

    /**
     * Sets sourceHost
     *
     * @param string|null $sourceHost sourceHost
     *
     * @return self
     */
    public function setSourceHost($sourceHost)
    {
        if (!is_null($sourceHost) && (mb_strlen($sourceHost) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $sourceHost when calling RemouteFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($sourceHost) && (!preg_match("/(.*){0,2147483647}/", $sourceHost))) {
            throw new \InvalidArgumentException("invalid value for \$sourceHost when calling RemouteFile., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($sourceHost)) {
            throw new \InvalidArgumentException('non-nullable sourceHost cannot be null');
        }

        $this->container['sourceHost'] = $sourceHost;

        return $this;
    }

    /**
     * Gets sourceNodeId
     *
     * @return int|null
     */
    public function getSourceNodeId()
    {
        return $this->container['sourceNodeId'];
    }

    /**
     * Sets sourceNodeId
     *
     * @param int|null $sourceNodeId sourceNodeId
     *
     * @return self
     */
    public function setSourceNodeId($sourceNodeId)
    {

        if (!is_null($sourceNodeId) && ($sourceNodeId > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $sourceNodeId when calling RemouteFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($sourceNodeId) && ($sourceNodeId < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $sourceNodeId when calling RemouteFile., must be bigger than or equal to -2147483648.');
        }


        if (is_null($sourceNodeId)) {
            throw new \InvalidArgumentException('non-nullable sourceNodeId cannot be null');
        }

        $this->container['sourceNodeId'] = $sourceNodeId;

        return $this;
    }

    /**
     * Gets sourcePath
     *
     * @return string|null
     */
    public function getSourcePath()
    {
        return $this->container['sourcePath'];
    }

    /**
     * Sets sourcePath
     *
     * @param string|null $sourcePath sourcePath
     *
     * @return self
     */
    public function setSourcePath($sourcePath)
    {
        if (!is_null($sourcePath) && (mb_strlen($sourcePath) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $sourcePath when calling RemouteFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($sourcePath) && (!preg_match("/(.*){0,2147483647}/", $sourcePath))) {
            throw new \InvalidArgumentException("invalid value for \$sourcePath when calling RemouteFile., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($sourcePath)) {
            throw new \InvalidArgumentException('non-nullable sourcePath cannot be null');
        }

        $this->container['sourcePath'] = $sourcePath;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


