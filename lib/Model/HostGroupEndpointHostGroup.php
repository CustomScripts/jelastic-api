<?php
/**
 * HostGroupEndpointHostGroup
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HostGroupEndpointHostGroup Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HostGroupEndpointHostGroup implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HostGroupEndpoint_hostGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'endpoints' => '\OpenAPI\Client\Model\HostGroupEndpoint[]',
        'metadata' => 'string',
        'data' => 'string',
        'vzType' => 'int',
        'displayName' => 'string',
        'iconsData' => 'string',
        'description' => 'string',
        'shortDescription' => 'string',
        'isDefault' => 'bool',
        'uniqueName' => 'string',
        'vzTypes' => 'object[]',
        'engine' => 'string',
        'isEnabled' => 'bool',
        'vTypes' => 'object[]',
        'comment' => 'string',
        'osTypes' => 'object[]',
        'regionUniqueName' => 'string',
        'l3Group' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'endpoints' => null,
        'metadata' => null,
        'data' => null,
        'vzType' => 'int32',
        'displayName' => null,
        'iconsData' => null,
        'description' => null,
        'shortDescription' => null,
        'isDefault' => null,
        'uniqueName' => null,
        'vzTypes' => 'int32',
        'engine' => null,
        'isEnabled' => null,
        'vTypes' => null,
        'comment' => null,
        'osTypes' => null,
        'regionUniqueName' => null,
        'l3Group' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'endpoints' => false,
		'metadata' => false,
		'data' => false,
		'vzType' => false,
		'displayName' => false,
		'iconsData' => false,
		'description' => false,
		'shortDescription' => false,
		'isDefault' => false,
		'uniqueName' => false,
		'vzTypes' => false,
		'engine' => false,
		'isEnabled' => false,
		'vTypes' => false,
		'comment' => false,
		'osTypes' => false,
		'regionUniqueName' => false,
		'l3Group' => false,
		'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'endpoints' => 'endpoints',
        'metadata' => 'metadata',
        'data' => 'data',
        'vzType' => 'vzType',
        'displayName' => 'displayName',
        'iconsData' => 'iconsData',
        'description' => 'description',
        'shortDescription' => 'shortDescription',
        'isDefault' => 'isDefault',
        'uniqueName' => 'uniqueName',
        'vzTypes' => 'vzTypes',
        'engine' => 'engine',
        'isEnabled' => 'isEnabled',
        'vTypes' => 'vTypes',
        'comment' => 'comment',
        'osTypes' => 'osTypes',
        'regionUniqueName' => 'regionUniqueName',
        'l3Group' => 'l3Group',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'endpoints' => 'setEndpoints',
        'metadata' => 'setMetadata',
        'data' => 'setData',
        'vzType' => 'setVzType',
        'displayName' => 'setDisplayName',
        'iconsData' => 'setIconsData',
        'description' => 'setDescription',
        'shortDescription' => 'setShortDescription',
        'isDefault' => 'setIsDefault',
        'uniqueName' => 'setUniqueName',
        'vzTypes' => 'setVzTypes',
        'engine' => 'setEngine',
        'isEnabled' => 'setIsEnabled',
        'vTypes' => 'setVTypes',
        'comment' => 'setComment',
        'osTypes' => 'setOsTypes',
        'regionUniqueName' => 'setRegionUniqueName',
        'l3Group' => 'setL3Group',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'endpoints' => 'getEndpoints',
        'metadata' => 'getMetadata',
        'data' => 'getData',
        'vzType' => 'getVzType',
        'displayName' => 'getDisplayName',
        'iconsData' => 'getIconsData',
        'description' => 'getDescription',
        'shortDescription' => 'getShortDescription',
        'isDefault' => 'getIsDefault',
        'uniqueName' => 'getUniqueName',
        'vzTypes' => 'getVzTypes',
        'engine' => 'getEngine',
        'isEnabled' => 'getIsEnabled',
        'vTypes' => 'getVTypes',
        'comment' => 'getComment',
        'osTypes' => 'getOsTypes',
        'regionUniqueName' => 'getRegionUniqueName',
        'l3Group' => 'getL3Group',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ENGINE_PAAS_0 = 'PAAS(0)';
    public const ENGINE_VHI_1 = 'VHI(1)';
    public const ENGINE_S3_2 = 'S3(2)';
    public const ENGINE_VCLOUD_3 = 'VCLOUD(3)';
    public const ENGINE_UNKNOWN_4 = 'UNKNOWN(4)';
    public const V_TYPES_CT_0 = 'CT(0)';
    public const V_TYPES_VM_1 = 'VM(1)';
    public const OS_TYPES_LINUX_0 = 'LINUX(0)';
    public const OS_TYPES_WINDOWS2008_1 = 'WINDOWS2008(1)';
    public const OS_TYPES_WINDOWS2012_2 = 'WINDOWS2012(2)';
    public const OS_TYPES_WINDOWS2016_3 = 'WINDOWS2016(3)';
    public const OS_TYPES_WINDOWS2019_4 = 'WINDOWS2019(4)';
    public const STATUS_ACTIVE_0 = 'ACTIVE(0)';
    public const STATUS_MAINTENANCE_1 = 'MAINTENANCE(1)';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEngineAllowableValues()
    {
        return [
            self::ENGINE_PAAS_0,
            self::ENGINE_VHI_1,
            self::ENGINE_S3_2,
            self::ENGINE_VCLOUD_3,
            self::ENGINE_UNKNOWN_4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVTypesAllowableValues()
    {
        return [
            self::V_TYPES_CT_0,
            self::V_TYPES_VM_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOsTypesAllowableValues()
    {
        return [
            self::OS_TYPES_LINUX_0,
            self::OS_TYPES_WINDOWS2008_1,
            self::OS_TYPES_WINDOWS2012_2,
            self::OS_TYPES_WINDOWS2016_3,
            self::OS_TYPES_WINDOWS2019_4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE_0,
            self::STATUS_MAINTENANCE_1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('endpoints', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('vzType', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('iconsData', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('shortDescription', $data ?? [], null);
        $this->setIfExists('isDefault', $data ?? [], null);
        $this->setIfExists('uniqueName', $data ?? [], null);
        $this->setIfExists('vzTypes', $data ?? [], null);
        $this->setIfExists('engine', $data ?? [], null);
        $this->setIfExists('isEnabled', $data ?? [], null);
        $this->setIfExists('vTypes', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('osTypes', $data ?? [], null);
        $this->setIfExists('regionUniqueName', $data ?? [], null);
        $this->setIfExists('l3Group', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['endpoints']) && (count($this->container['endpoints']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'endpoints', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['metadata']) && (mb_strlen($this->container['metadata']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'metadata', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['metadata']) && !preg_match("/(.*){0,2147483647}/", $this->container['metadata'])) {
            $invalidProperties[] = "invalid value for 'metadata', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['data']) && (mb_strlen($this->container['data']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'data', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['data']) && !preg_match("/(.*){0,2147483647}/", $this->container['data'])) {
            $invalidProperties[] = "invalid value for 'data', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['vzType']) && ($this->container['vzType'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'vzType', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['vzType']) && ($this->container['vzType'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'vzType', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['displayName']) && (mb_strlen($this->container['displayName']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'displayName', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['displayName']) && !preg_match("/(.*){0,2147483647}/", $this->container['displayName'])) {
            $invalidProperties[] = "invalid value for 'displayName', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['iconsData']) && (mb_strlen($this->container['iconsData']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'iconsData', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['iconsData']) && !preg_match("/(.*){0,2147483647}/", $this->container['iconsData'])) {
            $invalidProperties[] = "invalid value for 'iconsData', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['description']) && !preg_match("/(.*){0,2147483647}/", $this->container['description'])) {
            $invalidProperties[] = "invalid value for 'description', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['shortDescription']) && (mb_strlen($this->container['shortDescription']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'shortDescription', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['shortDescription']) && !preg_match("/(.*){0,2147483647}/", $this->container['shortDescription'])) {
            $invalidProperties[] = "invalid value for 'shortDescription', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['uniqueName']) && (mb_strlen($this->container['uniqueName']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'uniqueName', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['uniqueName']) && !preg_match("/(.*){0,2147483647}/", $this->container['uniqueName'])) {
            $invalidProperties[] = "invalid value for 'uniqueName', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['vzTypes']) && (count($this->container['vzTypes']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'vzTypes', number of items must be less than or equal to 2147483647.";
        }

        $allowedValues = $this->getEngineAllowableValues();
        if (!is_null($this->container['engine']) && !in_array($this->container['engine'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'engine', must be one of '%s'",
                $this->container['engine'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vTypes']) && (count($this->container['vTypes']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'vTypes', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['comment']) && !preg_match("/(.*){0,2147483647}/", $this->container['comment'])) {
            $invalidProperties[] = "invalid value for 'comment', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['osTypes']) && (count($this->container['osTypes']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'osTypes', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['regionUniqueName']) && (mb_strlen($this->container['regionUniqueName']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'regionUniqueName', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['regionUniqueName']) && !preg_match("/(.*){0,2147483647}/", $this->container['regionUniqueName'])) {
            $invalidProperties[] = "invalid value for 'regionUniqueName', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['l3Group']) && (mb_strlen($this->container['l3Group']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'l3Group', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['l3Group']) && !preg_match("/(.*){0,2147483647}/", $this->container['l3Group'])) {
            $invalidProperties[] = "invalid value for 'l3Group', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets endpoints
     *
     * @return \OpenAPI\Client\Model\HostGroupEndpoint[]|null
     */
    public function getEndpoints()
    {
        return $this->container['endpoints'];
    }

    /**
     * Sets endpoints
     *
     * @param \OpenAPI\Client\Model\HostGroupEndpoint[]|null $endpoints endpoints
     *
     * @return self
     */
    public function setEndpoints($endpoints)
    {

        if (!is_null($endpoints) && (count($endpoints) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $endpoints when calling HostGroupEndpointHostGroup., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($endpoints)) {
            throw new \InvalidArgumentException('non-nullable endpoints cannot be null');
        }

        $this->container['endpoints'] = $endpoints;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (!is_null($metadata) && (mb_strlen($metadata) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $metadata when calling HostGroupEndpointHostGroup., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($metadata) && (!preg_match("/(.*){0,2147483647}/", $metadata))) {
            throw new \InvalidArgumentException("invalid value for \$metadata when calling HostGroupEndpointHostGroup., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }

        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        if (!is_null($data) && (mb_strlen($data) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $data when calling HostGroupEndpointHostGroup., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($data) && (!preg_match("/(.*){0,2147483647}/", $data))) {
            throw new \InvalidArgumentException("invalid value for \$data when calling HostGroupEndpointHostGroup., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($data)) {
            throw new \InvalidArgumentException('non-nullable data cannot be null');
        }

        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets vzType
     *
     * @return int|null
     */
    public function getVzType()
    {
        return $this->container['vzType'];
    }

    /**
     * Sets vzType
     *
     * @param int|null $vzType vzType
     *
     * @return self
     */
    public function setVzType($vzType)
    {

        if (!is_null($vzType) && ($vzType > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $vzType when calling HostGroupEndpointHostGroup., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($vzType) && ($vzType < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $vzType when calling HostGroupEndpointHostGroup., must be bigger than or equal to -2147483648.');
        }


        if (is_null($vzType)) {
            throw new \InvalidArgumentException('non-nullable vzType cannot be null');
        }

        $this->container['vzType'] = $vzType;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName displayName
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        if (!is_null($displayName) && (mb_strlen($displayName) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $displayName when calling HostGroupEndpointHostGroup., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($displayName) && (!preg_match("/(.*){0,2147483647}/", $displayName))) {
            throw new \InvalidArgumentException("invalid value for \$displayName when calling HostGroupEndpointHostGroup., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($displayName)) {
            throw new \InvalidArgumentException('non-nullable displayName cannot be null');
        }

        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets iconsData
     *
     * @return string|null
     */
    public function getIconsData()
    {
        return $this->container['iconsData'];
    }

    /**
     * Sets iconsData
     *
     * @param string|null $iconsData iconsData
     *
     * @return self
     */
    public function setIconsData($iconsData)
    {
        if (!is_null($iconsData) && (mb_strlen($iconsData) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $iconsData when calling HostGroupEndpointHostGroup., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($iconsData) && (!preg_match("/(.*){0,2147483647}/", $iconsData))) {
            throw new \InvalidArgumentException("invalid value for \$iconsData when calling HostGroupEndpointHostGroup., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($iconsData)) {
            throw new \InvalidArgumentException('non-nullable iconsData cannot be null');
        }

        $this->container['iconsData'] = $iconsData;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $description when calling HostGroupEndpointHostGroup., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($description) && (!preg_match("/(.*){0,2147483647}/", $description))) {
            throw new \InvalidArgumentException("invalid value for \$description when calling HostGroupEndpointHostGroup., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets shortDescription
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['shortDescription'];
    }

    /**
     * Sets shortDescription
     *
     * @param string|null $shortDescription shortDescription
     *
     * @return self
     */
    public function setShortDescription($shortDescription)
    {
        if (!is_null($shortDescription) && (mb_strlen($shortDescription) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $shortDescription when calling HostGroupEndpointHostGroup., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($shortDescription) && (!preg_match("/(.*){0,2147483647}/", $shortDescription))) {
            throw new \InvalidArgumentException("invalid value for \$shortDescription when calling HostGroupEndpointHostGroup., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($shortDescription)) {
            throw new \InvalidArgumentException('non-nullable shortDescription cannot be null');
        }

        $this->container['shortDescription'] = $shortDescription;

        return $this;
    }

    /**
     * Gets isDefault
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['isDefault'];
    }

    /**
     * Sets isDefault
     *
     * @param bool|null $isDefault isDefault
     *
     * @return self
     */
    public function setIsDefault($isDefault)
    {

        if (is_null($isDefault)) {
            throw new \InvalidArgumentException('non-nullable isDefault cannot be null');
        }

        $this->container['isDefault'] = $isDefault;

        return $this;
    }

    /**
     * Gets uniqueName
     *
     * @return string|null
     */
    public function getUniqueName()
    {
        return $this->container['uniqueName'];
    }

    /**
     * Sets uniqueName
     *
     * @param string|null $uniqueName uniqueName
     *
     * @return self
     */
    public function setUniqueName($uniqueName)
    {
        if (!is_null($uniqueName) && (mb_strlen($uniqueName) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $uniqueName when calling HostGroupEndpointHostGroup., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($uniqueName) && (!preg_match("/(.*){0,2147483647}/", $uniqueName))) {
            throw new \InvalidArgumentException("invalid value for \$uniqueName when calling HostGroupEndpointHostGroup., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($uniqueName)) {
            throw new \InvalidArgumentException('non-nullable uniqueName cannot be null');
        }

        $this->container['uniqueName'] = $uniqueName;

        return $this;
    }

    /**
     * Gets vzTypes
     *
     * @return object[]|null
     */
    public function getVzTypes()
    {
        return $this->container['vzTypes'];
    }

    /**
     * Sets vzTypes
     *
     * @param object[]|null $vzTypes vzTypes
     *
     * @return self
     */
    public function setVzTypes($vzTypes)
    {

        if (!is_null($vzTypes) && (count($vzTypes) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $vzTypes when calling HostGroupEndpointHostGroup., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($vzTypes)) {
            throw new \InvalidArgumentException('non-nullable vzTypes cannot be null');
        }

        $this->container['vzTypes'] = $vzTypes;

        return $this;
    }

    /**
     * Gets engine
     *
     * @return string|null
     */
    public function getEngine()
    {
        return $this->container['engine'];
    }

    /**
     * Sets engine
     *
     * @param string|null $engine engine
     *
     * @return self
     */
    public function setEngine($engine)
    {
        $allowedValues = $this->getEngineAllowableValues();
        if (!is_null($engine) && !in_array($engine, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'engine', must be one of '%s'",
                    $engine,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($engine)) {
            throw new \InvalidArgumentException('non-nullable engine cannot be null');
        }

        $this->container['engine'] = $engine;

        return $this;
    }

    /**
     * Gets isEnabled
     *
     * @return bool|null
     */
    public function getIsEnabled()
    {
        return $this->container['isEnabled'];
    }

    /**
     * Sets isEnabled
     *
     * @param bool|null $isEnabled isEnabled
     *
     * @return self
     */
    public function setIsEnabled($isEnabled)
    {

        if (is_null($isEnabled)) {
            throw new \InvalidArgumentException('non-nullable isEnabled cannot be null');
        }

        $this->container['isEnabled'] = $isEnabled;

        return $this;
    }

    /**
     * Gets vTypes
     *
     * @return object[]|null
     */
    public function getVTypes()
    {
        return $this->container['vTypes'];
    }

    /**
     * Sets vTypes
     *
     * @param object[]|null $vTypes vTypes
     *
     * @return self
     */
    public function setVTypes($vTypes)
    {
        $allowedValues = $this->getVTypesAllowableValues();
        if (!is_null($vTypes) && array_diff($vTypes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'vTypes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (!is_null($vTypes) && (count($vTypes) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $vTypes when calling HostGroupEndpointHostGroup., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($vTypes)) {
            throw new \InvalidArgumentException('non-nullable vTypes cannot be null');
        }

        $this->container['vTypes'] = $vTypes;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling HostGroupEndpointHostGroup., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($comment) && (!preg_match("/(.*){0,2147483647}/", $comment))) {
            throw new \InvalidArgumentException("invalid value for \$comment when calling HostGroupEndpointHostGroup., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets osTypes
     *
     * @return object[]|null
     */
    public function getOsTypes()
    {
        return $this->container['osTypes'];
    }

    /**
     * Sets osTypes
     *
     * @param object[]|null $osTypes osTypes
     *
     * @return self
     */
    public function setOsTypes($osTypes)
    {
        $allowedValues = $this->getOsTypesAllowableValues();
        if (!is_null($osTypes) && array_diff($osTypes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'osTypes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (!is_null($osTypes) && (count($osTypes) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $osTypes when calling HostGroupEndpointHostGroup., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($osTypes)) {
            throw new \InvalidArgumentException('non-nullable osTypes cannot be null');
        }

        $this->container['osTypes'] = $osTypes;

        return $this;
    }

    /**
     * Gets regionUniqueName
     *
     * @return string|null
     */
    public function getRegionUniqueName()
    {
        return $this->container['regionUniqueName'];
    }

    /**
     * Sets regionUniqueName
     *
     * @param string|null $regionUniqueName regionUniqueName
     *
     * @return self
     */
    public function setRegionUniqueName($regionUniqueName)
    {
        if (!is_null($regionUniqueName) && (mb_strlen($regionUniqueName) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $regionUniqueName when calling HostGroupEndpointHostGroup., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($regionUniqueName) && (!preg_match("/(.*){0,2147483647}/", $regionUniqueName))) {
            throw new \InvalidArgumentException("invalid value for \$regionUniqueName when calling HostGroupEndpointHostGroup., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($regionUniqueName)) {
            throw new \InvalidArgumentException('non-nullable regionUniqueName cannot be null');
        }

        $this->container['regionUniqueName'] = $regionUniqueName;

        return $this;
    }

    /**
     * Gets l3Group
     *
     * @return string|null
     */
    public function getL3Group()
    {
        return $this->container['l3Group'];
    }

    /**
     * Sets l3Group
     *
     * @param string|null $l3Group l3Group
     *
     * @return self
     */
    public function setL3Group($l3Group)
    {
        if (!is_null($l3Group) && (mb_strlen($l3Group) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $l3Group when calling HostGroupEndpointHostGroup., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($l3Group) && (!preg_match("/(.*){0,2147483647}/", $l3Group))) {
            throw new \InvalidArgumentException("invalid value for \$l3Group when calling HostGroupEndpointHostGroup., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($l3Group)) {
            throw new \InvalidArgumentException('non-nullable l3Group cannot be null');
        }

        $this->container['l3Group'] = $l3Group;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


