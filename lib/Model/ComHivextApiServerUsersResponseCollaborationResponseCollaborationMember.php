<?php
/**
 * ComHivextApiServerUsersResponseCollaborationResponseCollaborationMember
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComHivextApiServerUsersResponseCollaborationResponseCollaborationMember Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComHivextApiServerUsersResponseCollaborationResponseCollaborationMember implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com_hivext_api_server_users_response_CollaborationResponse_collaboration_member';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'phoneNumber' => 'string',
        'authConfig' => '\OpenAPI\Client\Model\AuthConfig',
        'name' => 'string',
        'externalId' => 'string',
        'id' => 'int',
        'authType' => 'string',
        'email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'phoneNumber' => null,
        'authConfig' => null,
        'name' => null,
        'externalId' => null,
        'id' => 'int32',
        'authType' => null,
        'email' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'phoneNumber' => false,
		'authConfig' => false,
		'name' => false,
		'externalId' => false,
		'id' => false,
		'authType' => false,
		'email' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'phoneNumber' => 'phoneNumber',
        'authConfig' => 'authConfig',
        'name' => 'name',
        'externalId' => 'externalId',
        'id' => 'id',
        'authType' => 'authType',
        'email' => 'email'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'phoneNumber' => 'setPhoneNumber',
        'authConfig' => 'setAuthConfig',
        'name' => 'setName',
        'externalId' => 'setExternalId',
        'id' => 'setId',
        'authType' => 'setAuthType',
        'email' => 'setEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'phoneNumber' => 'getPhoneNumber',
        'authConfig' => 'getAuthConfig',
        'name' => 'getName',
        'externalId' => 'getExternalId',
        'id' => 'getId',
        'authType' => 'getAuthType',
        'email' => 'getEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AUTH_TYPE_BASIC_0 = 'BASIC(0)';
    public const AUTH_TYPE_TFA_1 = 'TFA(1)';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthTypeAllowableValues()
    {
        return [
            self::AUTH_TYPE_BASIC_0,
            self::AUTH_TYPE_TFA_1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('phoneNumber', $data ?? [], null);
        $this->setIfExists('authConfig', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('externalId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('authType', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['phoneNumber']) && (mb_strlen($this->container['phoneNumber']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'phoneNumber', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['phoneNumber']) && !preg_match("/(.*){0,2147483647}/", $this->container['phoneNumber'])) {
            $invalidProperties[] = "invalid value for 'phoneNumber', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['name']) && !preg_match("/(.*){0,2147483647}/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['externalId']) && (mb_strlen($this->container['externalId']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'externalId', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['externalId']) && !preg_match("/(.*){0,2147483647}/", $this->container['externalId'])) {
            $invalidProperties[] = "invalid value for 'externalId', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to -2147483648.";
        }

        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($this->container['authType']) && !in_array($this->container['authType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authType', must be one of '%s'",
                $this->container['authType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['email']) && !preg_match("/(.*){0,2147483647}/", $this->container['email'])) {
            $invalidProperties[] = "invalid value for 'email', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets phoneNumber
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phoneNumber'];
    }

    /**
     * Sets phoneNumber
     *
     * @param string|null $phoneNumber phoneNumber
     *
     * @return self
     */
    public function setPhoneNumber($phoneNumber)
    {
        if (!is_null($phoneNumber) && (mb_strlen($phoneNumber) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $phoneNumber when calling ComHivextApiServerUsersResponseCollaborationResponseCollaborationMember., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($phoneNumber) && (!preg_match("/(.*){0,2147483647}/", $phoneNumber))) {
            throw new \InvalidArgumentException("invalid value for \$phoneNumber when calling ComHivextApiServerUsersResponseCollaborationResponseCollaborationMember., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($phoneNumber)) {
            throw new \InvalidArgumentException('non-nullable phoneNumber cannot be null');
        }

        $this->container['phoneNumber'] = $phoneNumber;

        return $this;
    }

    /**
     * Gets authConfig
     *
     * @return \OpenAPI\Client\Model\AuthConfig|null
     */
    public function getAuthConfig()
    {
        return $this->container['authConfig'];
    }

    /**
     * Sets authConfig
     *
     * @param \OpenAPI\Client\Model\AuthConfig|null $authConfig authConfig
     *
     * @return self
     */
    public function setAuthConfig($authConfig)
    {

        if (is_null($authConfig)) {
            throw new \InvalidArgumentException('non-nullable authConfig cannot be null');
        }

        $this->container['authConfig'] = $authConfig;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ComHivextApiServerUsersResponseCollaborationResponseCollaborationMember., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($name) && (!preg_match("/(.*){0,2147483647}/", $name))) {
            throw new \InvalidArgumentException("invalid value for \$name when calling ComHivextApiServerUsersResponseCollaborationResponseCollaborationMember., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string|null $externalId externalId
     *
     * @return self
     */
    public function setExternalId($externalId)
    {
        if (!is_null($externalId) && (mb_strlen($externalId) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $externalId when calling ComHivextApiServerUsersResponseCollaborationResponseCollaborationMember., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($externalId) && (!preg_match("/(.*){0,2147483647}/", $externalId))) {
            throw new \InvalidArgumentException("invalid value for \$externalId when calling ComHivextApiServerUsersResponseCollaborationResponseCollaborationMember., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($externalId)) {
            throw new \InvalidArgumentException('non-nullable externalId cannot be null');
        }

        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ComHivextApiServerUsersResponseCollaborationResponseCollaborationMember., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($id) && ($id < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ComHivextApiServerUsersResponseCollaborationResponseCollaborationMember., must be bigger than or equal to -2147483648.');
        }


        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets authType
     *
     * @return string|null
     */
    public function getAuthType()
    {
        return $this->container['authType'];
    }

    /**
     * Sets authType
     *
     * @param string|null $authType authType
     *
     * @return self
     */
    public function setAuthType($authType)
    {
        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($authType) && !in_array($authType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authType', must be one of '%s'",
                    $authType,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($authType)) {
            throw new \InvalidArgumentException('non-nullable authType cannot be null');
        }

        $this->container['authType'] = $authType;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $email when calling ComHivextApiServerUsersResponseCollaborationResponseCollaborationMember., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($email) && (!preg_match("/(.*){0,2147483647}/", $email))) {
            throw new \InvalidArgumentException("invalid value for \$email when calling ComHivextApiServerUsersResponseCollaborationResponseCollaborationMember., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        $this->container['email'] = $email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


