<?php
/**
 * EnvironmentControlRestCreateenvironmentPostRequestNodesDocker
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EnvironmentControlRestCreateenvironmentPostRequestNodesDocker Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EnvironmentControlRestCreateenvironmentPostRequestNodesDocker implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_environment_control_rest_createenvironment_post_request_nodes_docker';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'image' => 'string',
        'registry' => '\OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodesDockerRegistry',
        'links' => 'object[]',
        'cmd' => 'string',
        'env' => '\OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodesDockerEnv',
        'nodeGroup' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'image' => null,
        'registry' => null,
        'links' => null,
        'cmd' => null,
        'env' => null,
        'nodeGroup' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'image' => false,
		'registry' => false,
		'links' => false,
		'cmd' => false,
		'env' => false,
		'nodeGroup' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'image' => 'image',
        'registry' => 'registry',
        'links' => 'links',
        'cmd' => 'cmd',
        'env' => 'env',
        'nodeGroup' => 'nodeGroup'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'image' => 'setImage',
        'registry' => 'setRegistry',
        'links' => 'setLinks',
        'cmd' => 'setCmd',
        'env' => 'setEnv',
        'nodeGroup' => 'setNodeGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'image' => 'getImage',
        'registry' => 'getRegistry',
        'links' => 'getLinks',
        'cmd' => 'getCmd',
        'env' => 'getEnv',
        'nodeGroup' => 'getNodeGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('registry', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('cmd', $data ?? [], null);
        $this->setIfExists('env', $data ?? [], null);
        $this->setIfExists('nodeGroup', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['image']) && (mb_strlen($this->container['image']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'image', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['image']) && !preg_match("/(.*){0,2147483647}/", $this->container['image'])) {
            $invalidProperties[] = "invalid value for 'image', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['links']) && (count($this->container['links']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'links', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['cmd']) && (mb_strlen($this->container['cmd']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'cmd', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['cmd']) && !preg_match("/(.*){0,2147483647}/", $this->container['cmd'])) {
            $invalidProperties[] = "invalid value for 'cmd', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['nodeGroup']) && (mb_strlen($this->container['nodeGroup']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'nodeGroup', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['nodeGroup']) && !preg_match("/(.*){0,2147483647}/", $this->container['nodeGroup'])) {
            $invalidProperties[] = "invalid value for 'nodeGroup', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (!is_null($image) && (mb_strlen($image) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $image when calling EnvironmentControlRestCreateenvironmentPostRequestNodesDocker., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($image) && (!preg_match("/(.*){0,2147483647}/", $image))) {
            throw new \InvalidArgumentException("invalid value for \$image when calling EnvironmentControlRestCreateenvironmentPostRequestNodesDocker., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }

        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets registry
     *
     * @return \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodesDockerRegistry|null
     */
    public function getRegistry()
    {
        return $this->container['registry'];
    }

    /**
     * Sets registry
     *
     * @param \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodesDockerRegistry|null $registry registry
     *
     * @return self
     */
    public function setRegistry($registry)
    {

        if (is_null($registry)) {
            throw new \InvalidArgumentException('non-nullable registry cannot be null');
        }

        $this->container['registry'] = $registry;

        return $this;
    }

    /**
     * Gets links
     *
     * @return object[]|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param object[]|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {

        if (!is_null($links) && (count($links) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $links when calling EnvironmentControlRestCreateenvironmentPostRequestNodesDocker., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }

        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets cmd
     *
     * @return string|null
     */
    public function getCmd()
    {
        return $this->container['cmd'];
    }

    /**
     * Sets cmd
     *
     * @param string|null $cmd cmd
     *
     * @return self
     */
    public function setCmd($cmd)
    {
        if (!is_null($cmd) && (mb_strlen($cmd) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $cmd when calling EnvironmentControlRestCreateenvironmentPostRequestNodesDocker., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($cmd) && (!preg_match("/(.*){0,2147483647}/", $cmd))) {
            throw new \InvalidArgumentException("invalid value for \$cmd when calling EnvironmentControlRestCreateenvironmentPostRequestNodesDocker., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($cmd)) {
            throw new \InvalidArgumentException('non-nullable cmd cannot be null');
        }

        $this->container['cmd'] = $cmd;

        return $this;
    }

    /**
     * Gets env
     *
     * @return \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodesDockerEnv|null
     */
    public function getEnv()
    {
        return $this->container['env'];
    }

    /**
     * Sets env
     *
     * @param \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodesDockerEnv|null $env env
     *
     * @return self
     */
    public function setEnv($env)
    {

        if (is_null($env)) {
            throw new \InvalidArgumentException('non-nullable env cannot be null');
        }

        $this->container['env'] = $env;

        return $this;
    }

    /**
     * Gets nodeGroup
     *
     * @return string|null
     */
    public function getNodeGroup()
    {
        return $this->container['nodeGroup'];
    }

    /**
     * Sets nodeGroup
     *
     * @param string|null $nodeGroup nodeGroup
     *
     * @return self
     */
    public function setNodeGroup($nodeGroup)
    {
        if (!is_null($nodeGroup) && (mb_strlen($nodeGroup) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $nodeGroup when calling EnvironmentControlRestCreateenvironmentPostRequestNodesDocker., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($nodeGroup) && (!preg_match("/(.*){0,2147483647}/", $nodeGroup))) {
            throw new \InvalidArgumentException("invalid value for \$nodeGroup when calling EnvironmentControlRestCreateenvironmentPostRequestNodesDocker., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($nodeGroup)) {
            throw new \InvalidArgumentException('non-nullable nodeGroup cannot be null');
        }

        $this->container['nodeGroup'] = $nodeGroup;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


