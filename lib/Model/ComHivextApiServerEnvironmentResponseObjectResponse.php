<?php
/**
 * ComHivextApiServerEnvironmentResponseObjectResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComHivextApiServerEnvironmentResponseObjectResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComHivextApiServerEnvironmentResponseObjectResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.hivext.api.server.environment.response.ObjectResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action' => 'string',
        'direction' => 'string',
        'dst' => 'string',
        'isEnabled' => 'bool',
        'isInfra' => 'bool',
        'name' => 'string',
        'ports' => 'string',
        'priority' => 'int',
        'protocol' => 'string',
        'relatedEnvName' => 'string',
        'relatedSoftNodeGroup' => 'string',
        'softNodeGroup' => 'string',
        'src' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action' => null,
        'direction' => null,
        'dst' => null,
        'isEnabled' => null,
        'isInfra' => null,
        'name' => null,
        'ports' => null,
        'priority' => 'int32',
        'protocol' => null,
        'relatedEnvName' => null,
        'relatedSoftNodeGroup' => null,
        'softNodeGroup' => null,
        'src' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'action' => false,
		'direction' => false,
		'dst' => false,
		'isEnabled' => false,
		'isInfra' => false,
		'name' => false,
		'ports' => false,
		'priority' => false,
		'protocol' => false,
		'relatedEnvName' => false,
		'relatedSoftNodeGroup' => false,
		'softNodeGroup' => false,
		'src' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'action',
        'direction' => 'direction',
        'dst' => 'dst',
        'isEnabled' => 'isEnabled',
        'isInfra' => 'isInfra',
        'name' => 'name',
        'ports' => 'ports',
        'priority' => 'priority',
        'protocol' => 'protocol',
        'relatedEnvName' => 'relatedEnvName',
        'relatedSoftNodeGroup' => 'relatedSoftNodeGroup',
        'softNodeGroup' => 'softNodeGroup',
        'src' => 'src'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'direction' => 'setDirection',
        'dst' => 'setDst',
        'isEnabled' => 'setIsEnabled',
        'isInfra' => 'setIsInfra',
        'name' => 'setName',
        'ports' => 'setPorts',
        'priority' => 'setPriority',
        'protocol' => 'setProtocol',
        'relatedEnvName' => 'setRelatedEnvName',
        'relatedSoftNodeGroup' => 'setRelatedSoftNodeGroup',
        'softNodeGroup' => 'setSoftNodeGroup',
        'src' => 'setSrc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'direction' => 'getDirection',
        'dst' => 'getDst',
        'isEnabled' => 'getIsEnabled',
        'isInfra' => 'getIsInfra',
        'name' => 'getName',
        'ports' => 'getPorts',
        'priority' => 'getPriority',
        'protocol' => 'getProtocol',
        'relatedEnvName' => 'getRelatedEnvName',
        'relatedSoftNodeGroup' => 'getRelatedSoftNodeGroup',
        'softNodeGroup' => 'getSoftNodeGroup',
        'src' => 'getSrc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACTION_DENY_0 = 'DENY(0)';
    public const ACTION_ALLOW_1 = 'ALLOW(1)';
    public const DIRECTION_INPUT_0 = 'INPUT(0)';
    public const DIRECTION_OUTPUT_1 = 'OUTPUT(1)';
    public const DIRECTION_BIDIRECTIONAL_2 = 'BIDIRECTIONAL(2)';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_DENY_0,
            self::ACTION_ALLOW_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_INPUT_0,
            self::DIRECTION_OUTPUT_1,
            self::DIRECTION_BIDIRECTIONAL_2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('direction', $data ?? [], null);
        $this->setIfExists('dst', $data ?? [], null);
        $this->setIfExists('isEnabled', $data ?? [], null);
        $this->setIfExists('isInfra', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('ports', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('relatedEnvName', $data ?? [], null);
        $this->setIfExists('relatedSoftNodeGroup', $data ?? [], null);
        $this->setIfExists('softNodeGroup', $data ?? [], null);
        $this->setIfExists('src', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'direction', must be one of '%s'",
                $this->container['direction'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['dst']) && (mb_strlen($this->container['dst']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'dst', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['dst']) && !preg_match("/(.*){0,2147483647}/", $this->container['dst'])) {
            $invalidProperties[] = "invalid value for 'dst', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['name']) && !preg_match("/(.*){0,2147483647}/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['ports']) && (mb_strlen($this->container['ports']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'ports', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['ports']) && !preg_match("/(.*){0,2147483647}/", $this->container['ports'])) {
            $invalidProperties[] = "invalid value for 'ports', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'priority', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['priority']) && ($this->container['priority'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'priority', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['protocol']) && (mb_strlen($this->container['protocol']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'protocol', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['protocol']) && !preg_match("/(.*){0,2147483647}/", $this->container['protocol'])) {
            $invalidProperties[] = "invalid value for 'protocol', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['relatedEnvName']) && (mb_strlen($this->container['relatedEnvName']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'relatedEnvName', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['relatedEnvName']) && !preg_match("/(.*){0,2147483647}/", $this->container['relatedEnvName'])) {
            $invalidProperties[] = "invalid value for 'relatedEnvName', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['relatedSoftNodeGroup']) && (mb_strlen($this->container['relatedSoftNodeGroup']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'relatedSoftNodeGroup', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['relatedSoftNodeGroup']) && !preg_match("/(.*){0,2147483647}/", $this->container['relatedSoftNodeGroup'])) {
            $invalidProperties[] = "invalid value for 'relatedSoftNodeGroup', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['softNodeGroup']) && (mb_strlen($this->container['softNodeGroup']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'softNodeGroup', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['softNodeGroup']) && !preg_match("/(.*){0,2147483647}/", $this->container['softNodeGroup'])) {
            $invalidProperties[] = "invalid value for 'softNodeGroup', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['src']) && (mb_strlen($this->container['src']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'src', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['src']) && !preg_match("/(.*){0,2147483647}/", $this->container['src'])) {
            $invalidProperties[] = "invalid value for 'src', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }

        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction direction
     *
     * @return self
     */
    public function setDirection($direction)
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($direction) && !in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'direction', must be one of '%s'",
                    $direction,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($direction)) {
            throw new \InvalidArgumentException('non-nullable direction cannot be null');
        }

        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets dst
     *
     * @return string|null
     */
    public function getDst()
    {
        return $this->container['dst'];
    }

    /**
     * Sets dst
     *
     * @param string|null $dst dst
     *
     * @return self
     */
    public function setDst($dst)
    {
        if (!is_null($dst) && (mb_strlen($dst) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $dst when calling ComHivextApiServerEnvironmentResponseObjectResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($dst) && (!preg_match("/(.*){0,2147483647}/", $dst))) {
            throw new \InvalidArgumentException("invalid value for \$dst when calling ComHivextApiServerEnvironmentResponseObjectResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($dst)) {
            throw new \InvalidArgumentException('non-nullable dst cannot be null');
        }

        $this->container['dst'] = $dst;

        return $this;
    }

    /**
     * Gets isEnabled
     *
     * @return bool|null
     */
    public function getIsEnabled()
    {
        return $this->container['isEnabled'];
    }

    /**
     * Sets isEnabled
     *
     * @param bool|null $isEnabled isEnabled
     *
     * @return self
     */
    public function setIsEnabled($isEnabled)
    {

        if (is_null($isEnabled)) {
            throw new \InvalidArgumentException('non-nullable isEnabled cannot be null');
        }

        $this->container['isEnabled'] = $isEnabled;

        return $this;
    }

    /**
     * Gets isInfra
     *
     * @return bool|null
     */
    public function getIsInfra()
    {
        return $this->container['isInfra'];
    }

    /**
     * Sets isInfra
     *
     * @param bool|null $isInfra isInfra
     *
     * @return self
     */
    public function setIsInfra($isInfra)
    {

        if (is_null($isInfra)) {
            throw new \InvalidArgumentException('non-nullable isInfra cannot be null');
        }

        $this->container['isInfra'] = $isInfra;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ComHivextApiServerEnvironmentResponseObjectResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($name) && (!preg_match("/(.*){0,2147483647}/", $name))) {
            throw new \InvalidArgumentException("invalid value for \$name when calling ComHivextApiServerEnvironmentResponseObjectResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ports
     *
     * @return string|null
     */
    public function getPorts()
    {
        return $this->container['ports'];
    }

    /**
     * Sets ports
     *
     * @param string|null $ports ports
     *
     * @return self
     */
    public function setPorts($ports)
    {
        if (!is_null($ports) && (mb_strlen($ports) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $ports when calling ComHivextApiServerEnvironmentResponseObjectResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($ports) && (!preg_match("/(.*){0,2147483647}/", $ports))) {
            throw new \InvalidArgumentException("invalid value for \$ports when calling ComHivextApiServerEnvironmentResponseObjectResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($ports)) {
            throw new \InvalidArgumentException('non-nullable ports cannot be null');
        }

        $this->container['ports'] = $ports;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (!is_null($priority) && ($priority > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling ComHivextApiServerEnvironmentResponseObjectResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($priority) && ($priority < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $priority when calling ComHivextApiServerEnvironmentResponseObjectResponse., must be bigger than or equal to -2147483648.');
        }


        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol protocol
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        if (!is_null($protocol) && (mb_strlen($protocol) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $protocol when calling ComHivextApiServerEnvironmentResponseObjectResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($protocol) && (!preg_match("/(.*){0,2147483647}/", $protocol))) {
            throw new \InvalidArgumentException("invalid value for \$protocol when calling ComHivextApiServerEnvironmentResponseObjectResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($protocol)) {
            throw new \InvalidArgumentException('non-nullable protocol cannot be null');
        }

        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets relatedEnvName
     *
     * @return string|null
     */
    public function getRelatedEnvName()
    {
        return $this->container['relatedEnvName'];
    }

    /**
     * Sets relatedEnvName
     *
     * @param string|null $relatedEnvName relatedEnvName
     *
     * @return self
     */
    public function setRelatedEnvName($relatedEnvName)
    {
        if (!is_null($relatedEnvName) && (mb_strlen($relatedEnvName) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $relatedEnvName when calling ComHivextApiServerEnvironmentResponseObjectResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($relatedEnvName) && (!preg_match("/(.*){0,2147483647}/", $relatedEnvName))) {
            throw new \InvalidArgumentException("invalid value for \$relatedEnvName when calling ComHivextApiServerEnvironmentResponseObjectResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($relatedEnvName)) {
            throw new \InvalidArgumentException('non-nullable relatedEnvName cannot be null');
        }

        $this->container['relatedEnvName'] = $relatedEnvName;

        return $this;
    }

    /**
     * Gets relatedSoftNodeGroup
     *
     * @return string|null
     */
    public function getRelatedSoftNodeGroup()
    {
        return $this->container['relatedSoftNodeGroup'];
    }

    /**
     * Sets relatedSoftNodeGroup
     *
     * @param string|null $relatedSoftNodeGroup relatedSoftNodeGroup
     *
     * @return self
     */
    public function setRelatedSoftNodeGroup($relatedSoftNodeGroup)
    {
        if (!is_null($relatedSoftNodeGroup) && (mb_strlen($relatedSoftNodeGroup) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $relatedSoftNodeGroup when calling ComHivextApiServerEnvironmentResponseObjectResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($relatedSoftNodeGroup) && (!preg_match("/(.*){0,2147483647}/", $relatedSoftNodeGroup))) {
            throw new \InvalidArgumentException("invalid value for \$relatedSoftNodeGroup when calling ComHivextApiServerEnvironmentResponseObjectResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($relatedSoftNodeGroup)) {
            throw new \InvalidArgumentException('non-nullable relatedSoftNodeGroup cannot be null');
        }

        $this->container['relatedSoftNodeGroup'] = $relatedSoftNodeGroup;

        return $this;
    }

    /**
     * Gets softNodeGroup
     *
     * @return string|null
     */
    public function getSoftNodeGroup()
    {
        return $this->container['softNodeGroup'];
    }

    /**
     * Sets softNodeGroup
     *
     * @param string|null $softNodeGroup softNodeGroup
     *
     * @return self
     */
    public function setSoftNodeGroup($softNodeGroup)
    {
        if (!is_null($softNodeGroup) && (mb_strlen($softNodeGroup) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $softNodeGroup when calling ComHivextApiServerEnvironmentResponseObjectResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($softNodeGroup) && (!preg_match("/(.*){0,2147483647}/", $softNodeGroup))) {
            throw new \InvalidArgumentException("invalid value for \$softNodeGroup when calling ComHivextApiServerEnvironmentResponseObjectResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($softNodeGroup)) {
            throw new \InvalidArgumentException('non-nullable softNodeGroup cannot be null');
        }

        $this->container['softNodeGroup'] = $softNodeGroup;

        return $this;
    }

    /**
     * Gets src
     *
     * @return string|null
     */
    public function getSrc()
    {
        return $this->container['src'];
    }

    /**
     * Sets src
     *
     * @param string|null $src src
     *
     * @return self
     */
    public function setSrc($src)
    {
        if (!is_null($src) && (mb_strlen($src) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $src when calling ComHivextApiServerEnvironmentResponseObjectResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($src) && (!preg_match("/(.*){0,2147483647}/", $src))) {
            throw new \InvalidArgumentException("invalid value for \$src when calling ComHivextApiServerEnvironmentResponseObjectResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($src)) {
            throw new \InvalidArgumentException('non-nullable src cannot be null');
        }

        $this->container['src'] = $src;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


