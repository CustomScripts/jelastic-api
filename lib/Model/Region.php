<?php
/**
 * Region
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Region Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Region implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Region';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'comment' => 'string',
        'connected' => 'bool',
        'displayName' => 'string',
        'dockerHost' => 'string',
        'dockerLogin' => 'string',
        'dockerPassword' => 'string',
        'dockerSSHPort' => 'int',
        'dockerSshKey' => 'string',
        'dockerTCPPort' => 'int',
        'domain' => 'string',
        'hardwareNodeGroups' => 'object[]',
        'ipRange' => 'string',
        'isDefault' => 'bool',
        'isMigrationAllowed' => 'bool',
        'ospfArea' => 'int',
        'ospfKey' => 'string',
        'shortUniqueName' => 'string',
        'sslEnabled' => 'bool',
        'sslExpireDate' => '\DateTime',
        'sslType' => 'string',
        'status' => 'string',
        'stubnets' => 'string',
        'subnet' => 'string',
        'uniqueName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'comment' => null,
        'connected' => null,
        'displayName' => null,
        'dockerHost' => null,
        'dockerLogin' => null,
        'dockerPassword' => null,
        'dockerSSHPort' => 'int32',
        'dockerSshKey' => null,
        'dockerTCPPort' => 'int32',
        'domain' => null,
        'hardwareNodeGroups' => null,
        'ipRange' => null,
        'isDefault' => null,
        'isMigrationAllowed' => null,
        'ospfArea' => 'int32',
        'ospfKey' => null,
        'shortUniqueName' => null,
        'sslEnabled' => null,
        'sslExpireDate' => 'date',
        'sslType' => null,
        'status' => null,
        'stubnets' => null,
        'subnet' => null,
        'uniqueName' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'comment' => false,
		'connected' => false,
		'displayName' => false,
		'dockerHost' => false,
		'dockerLogin' => false,
		'dockerPassword' => false,
		'dockerSSHPort' => false,
		'dockerSshKey' => false,
		'dockerTCPPort' => false,
		'domain' => false,
		'hardwareNodeGroups' => false,
		'ipRange' => false,
		'isDefault' => false,
		'isMigrationAllowed' => false,
		'ospfArea' => false,
		'ospfKey' => false,
		'shortUniqueName' => false,
		'sslEnabled' => false,
		'sslExpireDate' => false,
		'sslType' => false,
		'status' => false,
		'stubnets' => false,
		'subnet' => false,
		'uniqueName' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comment' => 'comment',
        'connected' => 'connected',
        'displayName' => 'displayName',
        'dockerHost' => 'dockerHost',
        'dockerLogin' => 'dockerLogin',
        'dockerPassword' => 'dockerPassword',
        'dockerSSHPort' => 'dockerSSHPort',
        'dockerSshKey' => 'dockerSshKey',
        'dockerTCPPort' => 'dockerTCPPort',
        'domain' => 'domain',
        'hardwareNodeGroups' => 'hardwareNodeGroups',
        'ipRange' => 'ipRange',
        'isDefault' => 'isDefault',
        'isMigrationAllowed' => 'isMigrationAllowed',
        'ospfArea' => 'ospfArea',
        'ospfKey' => 'ospfKey',
        'shortUniqueName' => 'shortUniqueName',
        'sslEnabled' => 'sslEnabled',
        'sslExpireDate' => 'sslExpireDate',
        'sslType' => 'sslType',
        'status' => 'status',
        'stubnets' => 'stubnets',
        'subnet' => 'subnet',
        'uniqueName' => 'uniqueName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comment' => 'setComment',
        'connected' => 'setConnected',
        'displayName' => 'setDisplayName',
        'dockerHost' => 'setDockerHost',
        'dockerLogin' => 'setDockerLogin',
        'dockerPassword' => 'setDockerPassword',
        'dockerSSHPort' => 'setDockerSSHPort',
        'dockerSshKey' => 'setDockerSshKey',
        'dockerTCPPort' => 'setDockerTCPPort',
        'domain' => 'setDomain',
        'hardwareNodeGroups' => 'setHardwareNodeGroups',
        'ipRange' => 'setIpRange',
        'isDefault' => 'setIsDefault',
        'isMigrationAllowed' => 'setIsMigrationAllowed',
        'ospfArea' => 'setOspfArea',
        'ospfKey' => 'setOspfKey',
        'shortUniqueName' => 'setShortUniqueName',
        'sslEnabled' => 'setSslEnabled',
        'sslExpireDate' => 'setSslExpireDate',
        'sslType' => 'setSslType',
        'status' => 'setStatus',
        'stubnets' => 'setStubnets',
        'subnet' => 'setSubnet',
        'uniqueName' => 'setUniqueName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comment' => 'getComment',
        'connected' => 'getConnected',
        'displayName' => 'getDisplayName',
        'dockerHost' => 'getDockerHost',
        'dockerLogin' => 'getDockerLogin',
        'dockerPassword' => 'getDockerPassword',
        'dockerSSHPort' => 'getDockerSSHPort',
        'dockerSshKey' => 'getDockerSshKey',
        'dockerTCPPort' => 'getDockerTCPPort',
        'domain' => 'getDomain',
        'hardwareNodeGroups' => 'getHardwareNodeGroups',
        'ipRange' => 'getIpRange',
        'isDefault' => 'getIsDefault',
        'isMigrationAllowed' => 'getIsMigrationAllowed',
        'ospfArea' => 'getOspfArea',
        'ospfKey' => 'getOspfKey',
        'shortUniqueName' => 'getShortUniqueName',
        'sslEnabled' => 'getSslEnabled',
        'sslExpireDate' => 'getSslExpireDate',
        'sslType' => 'getSslType',
        'status' => 'getStatus',
        'stubnets' => 'getStubnets',
        'subnet' => 'getSubnet',
        'uniqueName' => 'getUniqueName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SSL_TYPE_CUSTOM_0 = 'CUSTOM(0)';
    public const SSL_TYPE_LETSENCRYPT_1 = 'LETSENCRYPT(1)';
    public const STATUS_ACTIVE_0 = 'ACTIVE(0)';
    public const STATUS_MAINTENANCE_1 = 'MAINTENANCE(1)';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslTypeAllowableValues()
    {
        return [
            self::SSL_TYPE_CUSTOM_0,
            self::SSL_TYPE_LETSENCRYPT_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE_0,
            self::STATUS_MAINTENANCE_1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('connected', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('dockerHost', $data ?? [], null);
        $this->setIfExists('dockerLogin', $data ?? [], null);
        $this->setIfExists('dockerPassword', $data ?? [], null);
        $this->setIfExists('dockerSSHPort', $data ?? [], null);
        $this->setIfExists('dockerSshKey', $data ?? [], null);
        $this->setIfExists('dockerTCPPort', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('hardwareNodeGroups', $data ?? [], null);
        $this->setIfExists('ipRange', $data ?? [], null);
        $this->setIfExists('isDefault', $data ?? [], null);
        $this->setIfExists('isMigrationAllowed', $data ?? [], null);
        $this->setIfExists('ospfArea', $data ?? [], null);
        $this->setIfExists('ospfKey', $data ?? [], null);
        $this->setIfExists('shortUniqueName', $data ?? [], null);
        $this->setIfExists('sslEnabled', $data ?? [], null);
        $this->setIfExists('sslExpireDate', $data ?? [], null);
        $this->setIfExists('sslType', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('stubnets', $data ?? [], null);
        $this->setIfExists('subnet', $data ?? [], null);
        $this->setIfExists('uniqueName', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['comment']) && !preg_match("/(.*){0,2147483647}/", $this->container['comment'])) {
            $invalidProperties[] = "invalid value for 'comment', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['displayName']) && (mb_strlen($this->container['displayName']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'displayName', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['displayName']) && !preg_match("/(.*){0,2147483647}/", $this->container['displayName'])) {
            $invalidProperties[] = "invalid value for 'displayName', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['dockerHost']) && (mb_strlen($this->container['dockerHost']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'dockerHost', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['dockerHost']) && !preg_match("/(.*){0,2147483647}/", $this->container['dockerHost'])) {
            $invalidProperties[] = "invalid value for 'dockerHost', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['dockerLogin']) && (mb_strlen($this->container['dockerLogin']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'dockerLogin', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['dockerLogin']) && !preg_match("/(.*){0,2147483647}/", $this->container['dockerLogin'])) {
            $invalidProperties[] = "invalid value for 'dockerLogin', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['dockerPassword']) && (mb_strlen($this->container['dockerPassword']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'dockerPassword', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['dockerPassword']) && !preg_match("/(.*){0,2147483647}/", $this->container['dockerPassword'])) {
            $invalidProperties[] = "invalid value for 'dockerPassword', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['dockerSSHPort']) && ($this->container['dockerSSHPort'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'dockerSSHPort', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['dockerSSHPort']) && ($this->container['dockerSSHPort'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'dockerSSHPort', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['dockerSshKey']) && (mb_strlen($this->container['dockerSshKey']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'dockerSshKey', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['dockerSshKey']) && !preg_match("/(.*){0,2147483647}/", $this->container['dockerSshKey'])) {
            $invalidProperties[] = "invalid value for 'dockerSshKey', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['dockerTCPPort']) && ($this->container['dockerTCPPort'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'dockerTCPPort', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['dockerTCPPort']) && ($this->container['dockerTCPPort'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'dockerTCPPort', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['domain']) && (mb_strlen($this->container['domain']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'domain', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['domain']) && !preg_match("/(.*){0,2147483647}/", $this->container['domain'])) {
            $invalidProperties[] = "invalid value for 'domain', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['hardwareNodeGroups']) && (count($this->container['hardwareNodeGroups']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'hardwareNodeGroups', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['ipRange']) && (mb_strlen($this->container['ipRange']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'ipRange', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['ipRange']) && !preg_match("/(.*){0,2147483647}/", $this->container['ipRange'])) {
            $invalidProperties[] = "invalid value for 'ipRange', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['ospfArea']) && ($this->container['ospfArea'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'ospfArea', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['ospfArea']) && ($this->container['ospfArea'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'ospfArea', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['ospfKey']) && (mb_strlen($this->container['ospfKey']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'ospfKey', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['ospfKey']) && !preg_match("/(.*){0,2147483647}/", $this->container['ospfKey'])) {
            $invalidProperties[] = "invalid value for 'ospfKey', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['shortUniqueName']) && (mb_strlen($this->container['shortUniqueName']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'shortUniqueName', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['shortUniqueName']) && !preg_match("/(.*){0,2147483647}/", $this->container['shortUniqueName'])) {
            $invalidProperties[] = "invalid value for 'shortUniqueName', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['sslExpireDate']) && (mb_strlen($this->container['sslExpireDate']) > 47)) {
            $invalidProperties[] = "invalid value for 'sslExpireDate', the character length must be smaller than or equal to 47.";
        }

        if (!is_null($this->container['sslExpireDate']) && !preg_match("/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/", $this->container['sslExpireDate'])) {
            $invalidProperties[] = "invalid value for 'sslExpireDate', must be conform to the pattern /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/.";
        }

        $allowedValues = $this->getSslTypeAllowableValues();
        if (!is_null($this->container['sslType']) && !in_array($this->container['sslType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sslType', must be one of '%s'",
                $this->container['sslType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['stubnets']) && (mb_strlen($this->container['stubnets']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'stubnets', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['stubnets']) && !preg_match("/(.*){0,2147483647}/", $this->container['stubnets'])) {
            $invalidProperties[] = "invalid value for 'stubnets', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['subnet']) && (mb_strlen($this->container['subnet']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'subnet', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['subnet']) && !preg_match("/(.*){0,2147483647}/", $this->container['subnet'])) {
            $invalidProperties[] = "invalid value for 'subnet', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['uniqueName']) && (mb_strlen($this->container['uniqueName']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'uniqueName', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['uniqueName']) && !preg_match("/(.*){0,2147483647}/", $this->container['uniqueName'])) {
            $invalidProperties[] = "invalid value for 'uniqueName', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (!is_null($comment) && (mb_strlen($comment) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($comment) && (!preg_match("/(.*){0,2147483647}/", $comment))) {
            throw new \InvalidArgumentException("invalid value for \$comment when calling Region., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets connected
     *
     * @return bool|null
     */
    public function getConnected()
    {
        return $this->container['connected'];
    }

    /**
     * Sets connected
     *
     * @param bool|null $connected connected
     *
     * @return self
     */
    public function setConnected($connected)
    {

        if (is_null($connected)) {
            throw new \InvalidArgumentException('non-nullable connected cannot be null');
        }

        $this->container['connected'] = $connected;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName displayName
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        if (!is_null($displayName) && (mb_strlen($displayName) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $displayName when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($displayName) && (!preg_match("/(.*){0,2147483647}/", $displayName))) {
            throw new \InvalidArgumentException("invalid value for \$displayName when calling Region., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($displayName)) {
            throw new \InvalidArgumentException('non-nullable displayName cannot be null');
        }

        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets dockerHost
     *
     * @return string|null
     */
    public function getDockerHost()
    {
        return $this->container['dockerHost'];
    }

    /**
     * Sets dockerHost
     *
     * @param string|null $dockerHost dockerHost
     *
     * @return self
     */
    public function setDockerHost($dockerHost)
    {
        if (!is_null($dockerHost) && (mb_strlen($dockerHost) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $dockerHost when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($dockerHost) && (!preg_match("/(.*){0,2147483647}/", $dockerHost))) {
            throw new \InvalidArgumentException("invalid value for \$dockerHost when calling Region., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($dockerHost)) {
            throw new \InvalidArgumentException('non-nullable dockerHost cannot be null');
        }

        $this->container['dockerHost'] = $dockerHost;

        return $this;
    }

    /**
     * Gets dockerLogin
     *
     * @return string|null
     */
    public function getDockerLogin()
    {
        return $this->container['dockerLogin'];
    }

    /**
     * Sets dockerLogin
     *
     * @param string|null $dockerLogin dockerLogin
     *
     * @return self
     */
    public function setDockerLogin($dockerLogin)
    {
        if (!is_null($dockerLogin) && (mb_strlen($dockerLogin) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $dockerLogin when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($dockerLogin) && (!preg_match("/(.*){0,2147483647}/", $dockerLogin))) {
            throw new \InvalidArgumentException("invalid value for \$dockerLogin when calling Region., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($dockerLogin)) {
            throw new \InvalidArgumentException('non-nullable dockerLogin cannot be null');
        }

        $this->container['dockerLogin'] = $dockerLogin;

        return $this;
    }

    /**
     * Gets dockerPassword
     *
     * @return string|null
     */
    public function getDockerPassword()
    {
        return $this->container['dockerPassword'];
    }

    /**
     * Sets dockerPassword
     *
     * @param string|null $dockerPassword dockerPassword
     *
     * @return self
     */
    public function setDockerPassword($dockerPassword)
    {
        if (!is_null($dockerPassword) && (mb_strlen($dockerPassword) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $dockerPassword when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($dockerPassword) && (!preg_match("/(.*){0,2147483647}/", $dockerPassword))) {
            throw new \InvalidArgumentException("invalid value for \$dockerPassword when calling Region., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($dockerPassword)) {
            throw new \InvalidArgumentException('non-nullable dockerPassword cannot be null');
        }

        $this->container['dockerPassword'] = $dockerPassword;

        return $this;
    }

    /**
     * Gets dockerSSHPort
     *
     * @return int|null
     */
    public function getDockerSSHPort()
    {
        return $this->container['dockerSSHPort'];
    }

    /**
     * Sets dockerSSHPort
     *
     * @param int|null $dockerSSHPort dockerSSHPort
     *
     * @return self
     */
    public function setDockerSSHPort($dockerSSHPort)
    {

        if (!is_null($dockerSSHPort) && ($dockerSSHPort > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $dockerSSHPort when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($dockerSSHPort) && ($dockerSSHPort < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $dockerSSHPort when calling Region., must be bigger than or equal to -2147483648.');
        }


        if (is_null($dockerSSHPort)) {
            throw new \InvalidArgumentException('non-nullable dockerSSHPort cannot be null');
        }

        $this->container['dockerSSHPort'] = $dockerSSHPort;

        return $this;
    }

    /**
     * Gets dockerSshKey
     *
     * @return string|null
     */
    public function getDockerSshKey()
    {
        return $this->container['dockerSshKey'];
    }

    /**
     * Sets dockerSshKey
     *
     * @param string|null $dockerSshKey dockerSshKey
     *
     * @return self
     */
    public function setDockerSshKey($dockerSshKey)
    {
        if (!is_null($dockerSshKey) && (mb_strlen($dockerSshKey) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $dockerSshKey when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($dockerSshKey) && (!preg_match("/(.*){0,2147483647}/", $dockerSshKey))) {
            throw new \InvalidArgumentException("invalid value for \$dockerSshKey when calling Region., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($dockerSshKey)) {
            throw new \InvalidArgumentException('non-nullable dockerSshKey cannot be null');
        }

        $this->container['dockerSshKey'] = $dockerSshKey;

        return $this;
    }

    /**
     * Gets dockerTCPPort
     *
     * @return int|null
     */
    public function getDockerTCPPort()
    {
        return $this->container['dockerTCPPort'];
    }

    /**
     * Sets dockerTCPPort
     *
     * @param int|null $dockerTCPPort dockerTCPPort
     *
     * @return self
     */
    public function setDockerTCPPort($dockerTCPPort)
    {

        if (!is_null($dockerTCPPort) && ($dockerTCPPort > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $dockerTCPPort when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($dockerTCPPort) && ($dockerTCPPort < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $dockerTCPPort when calling Region., must be bigger than or equal to -2147483648.');
        }


        if (is_null($dockerTCPPort)) {
            throw new \InvalidArgumentException('non-nullable dockerTCPPort cannot be null');
        }

        $this->container['dockerTCPPort'] = $dockerTCPPort;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (!is_null($domain) && (mb_strlen($domain) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $domain when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($domain) && (!preg_match("/(.*){0,2147483647}/", $domain))) {
            throw new \InvalidArgumentException("invalid value for \$domain when calling Region., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets hardwareNodeGroups
     *
     * @return object[]|null
     */
    public function getHardwareNodeGroups()
    {
        return $this->container['hardwareNodeGroups'];
    }

    /**
     * Sets hardwareNodeGroups
     *
     * @param object[]|null $hardwareNodeGroups hardwareNodeGroups
     *
     * @return self
     */
    public function setHardwareNodeGroups($hardwareNodeGroups)
    {

        if (!is_null($hardwareNodeGroups) && (count($hardwareNodeGroups) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $hardwareNodeGroups when calling Region., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($hardwareNodeGroups)) {
            throw new \InvalidArgumentException('non-nullable hardwareNodeGroups cannot be null');
        }

        $this->container['hardwareNodeGroups'] = $hardwareNodeGroups;

        return $this;
    }

    /**
     * Gets ipRange
     *
     * @return string|null
     */
    public function getIpRange()
    {
        return $this->container['ipRange'];
    }

    /**
     * Sets ipRange
     *
     * @param string|null $ipRange ipRange
     *
     * @return self
     */
    public function setIpRange($ipRange)
    {
        if (!is_null($ipRange) && (mb_strlen($ipRange) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $ipRange when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($ipRange) && (!preg_match("/(.*){0,2147483647}/", $ipRange))) {
            throw new \InvalidArgumentException("invalid value for \$ipRange when calling Region., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($ipRange)) {
            throw new \InvalidArgumentException('non-nullable ipRange cannot be null');
        }

        $this->container['ipRange'] = $ipRange;

        return $this;
    }

    /**
     * Gets isDefault
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['isDefault'];
    }

    /**
     * Sets isDefault
     *
     * @param bool|null $isDefault isDefault
     *
     * @return self
     */
    public function setIsDefault($isDefault)
    {

        if (is_null($isDefault)) {
            throw new \InvalidArgumentException('non-nullable isDefault cannot be null');
        }

        $this->container['isDefault'] = $isDefault;

        return $this;
    }

    /**
     * Gets isMigrationAllowed
     *
     * @return bool|null
     */
    public function getIsMigrationAllowed()
    {
        return $this->container['isMigrationAllowed'];
    }

    /**
     * Sets isMigrationAllowed
     *
     * @param bool|null $isMigrationAllowed isMigrationAllowed
     *
     * @return self
     */
    public function setIsMigrationAllowed($isMigrationAllowed)
    {

        if (is_null($isMigrationAllowed)) {
            throw new \InvalidArgumentException('non-nullable isMigrationAllowed cannot be null');
        }

        $this->container['isMigrationAllowed'] = $isMigrationAllowed;

        return $this;
    }

    /**
     * Gets ospfArea
     *
     * @return int|null
     */
    public function getOspfArea()
    {
        return $this->container['ospfArea'];
    }

    /**
     * Sets ospfArea
     *
     * @param int|null $ospfArea ospfArea
     *
     * @return self
     */
    public function setOspfArea($ospfArea)
    {

        if (!is_null($ospfArea) && ($ospfArea > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $ospfArea when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($ospfArea) && ($ospfArea < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $ospfArea when calling Region., must be bigger than or equal to -2147483648.');
        }


        if (is_null($ospfArea)) {
            throw new \InvalidArgumentException('non-nullable ospfArea cannot be null');
        }

        $this->container['ospfArea'] = $ospfArea;

        return $this;
    }

    /**
     * Gets ospfKey
     *
     * @return string|null
     */
    public function getOspfKey()
    {
        return $this->container['ospfKey'];
    }

    /**
     * Sets ospfKey
     *
     * @param string|null $ospfKey ospfKey
     *
     * @return self
     */
    public function setOspfKey($ospfKey)
    {
        if (!is_null($ospfKey) && (mb_strlen($ospfKey) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $ospfKey when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($ospfKey) && (!preg_match("/(.*){0,2147483647}/", $ospfKey))) {
            throw new \InvalidArgumentException("invalid value for \$ospfKey when calling Region., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($ospfKey)) {
            throw new \InvalidArgumentException('non-nullable ospfKey cannot be null');
        }

        $this->container['ospfKey'] = $ospfKey;

        return $this;
    }

    /**
     * Gets shortUniqueName
     *
     * @return string|null
     */
    public function getShortUniqueName()
    {
        return $this->container['shortUniqueName'];
    }

    /**
     * Sets shortUniqueName
     *
     * @param string|null $shortUniqueName shortUniqueName
     *
     * @return self
     */
    public function setShortUniqueName($shortUniqueName)
    {
        if (!is_null($shortUniqueName) && (mb_strlen($shortUniqueName) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $shortUniqueName when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($shortUniqueName) && (!preg_match("/(.*){0,2147483647}/", $shortUniqueName))) {
            throw new \InvalidArgumentException("invalid value for \$shortUniqueName when calling Region., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($shortUniqueName)) {
            throw new \InvalidArgumentException('non-nullable shortUniqueName cannot be null');
        }

        $this->container['shortUniqueName'] = $shortUniqueName;

        return $this;
    }

    /**
     * Gets sslEnabled
     *
     * @return bool|null
     */
    public function getSslEnabled()
    {
        return $this->container['sslEnabled'];
    }

    /**
     * Sets sslEnabled
     *
     * @param bool|null $sslEnabled sslEnabled
     *
     * @return self
     */
    public function setSslEnabled($sslEnabled)
    {

        if (is_null($sslEnabled)) {
            throw new \InvalidArgumentException('non-nullable sslEnabled cannot be null');
        }

        $this->container['sslEnabled'] = $sslEnabled;

        return $this;
    }

    /**
     * Gets sslExpireDate
     *
     * @return \DateTime|null
     */
    public function getSslExpireDate()
    {
        return $this->container['sslExpireDate'];
    }

    /**
     * Sets sslExpireDate
     *
     * @param \DateTime|null $sslExpireDate sslExpireDate
     *
     * @return self
     */
    public function setSslExpireDate($sslExpireDate)
    {
        if (!is_null($sslExpireDate) && (mb_strlen($sslExpireDate) > 47)) {
            throw new \InvalidArgumentException('invalid length for $sslExpireDate when calling Region., must be smaller than or equal to 47.');
        }
        if (!is_null($sslExpireDate) && (!preg_match("/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/", $sslExpireDate))) {
            throw new \InvalidArgumentException("invalid value for \$sslExpireDate when calling Region., must conform to the pattern /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/.");
        }


        if (is_null($sslExpireDate)) {
            throw new \InvalidArgumentException('non-nullable sslExpireDate cannot be null');
        }

        $this->container['sslExpireDate'] = $sslExpireDate;

        return $this;
    }

    /**
     * Gets sslType
     *
     * @return string|null
     */
    public function getSslType()
    {
        return $this->container['sslType'];
    }

    /**
     * Sets sslType
     *
     * @param string|null $sslType sslType
     *
     * @return self
     */
    public function setSslType($sslType)
    {
        $allowedValues = $this->getSslTypeAllowableValues();
        if (!is_null($sslType) && !in_array($sslType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sslType', must be one of '%s'",
                    $sslType,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($sslType)) {
            throw new \InvalidArgumentException('non-nullable sslType cannot be null');
        }

        $this->container['sslType'] = $sslType;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets stubnets
     *
     * @return string|null
     */
    public function getStubnets()
    {
        return $this->container['stubnets'];
    }

    /**
     * Sets stubnets
     *
     * @param string|null $stubnets stubnets
     *
     * @return self
     */
    public function setStubnets($stubnets)
    {
        if (!is_null($stubnets) && (mb_strlen($stubnets) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $stubnets when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($stubnets) && (!preg_match("/(.*){0,2147483647}/", $stubnets))) {
            throw new \InvalidArgumentException("invalid value for \$stubnets when calling Region., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($stubnets)) {
            throw new \InvalidArgumentException('non-nullable stubnets cannot be null');
        }

        $this->container['stubnets'] = $stubnets;

        return $this;
    }

    /**
     * Gets subnet
     *
     * @return string|null
     */
    public function getSubnet()
    {
        return $this->container['subnet'];
    }

    /**
     * Sets subnet
     *
     * @param string|null $subnet subnet
     *
     * @return self
     */
    public function setSubnet($subnet)
    {
        if (!is_null($subnet) && (mb_strlen($subnet) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $subnet when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($subnet) && (!preg_match("/(.*){0,2147483647}/", $subnet))) {
            throw new \InvalidArgumentException("invalid value for \$subnet when calling Region., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($subnet)) {
            throw new \InvalidArgumentException('non-nullable subnet cannot be null');
        }

        $this->container['subnet'] = $subnet;

        return $this;
    }

    /**
     * Gets uniqueName
     *
     * @return string|null
     */
    public function getUniqueName()
    {
        return $this->container['uniqueName'];
    }

    /**
     * Sets uniqueName
     *
     * @param string|null $uniqueName uniqueName
     *
     * @return self
     */
    public function setUniqueName($uniqueName)
    {
        if (!is_null($uniqueName) && (mb_strlen($uniqueName) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $uniqueName when calling Region., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($uniqueName) && (!preg_match("/(.*){0,2147483647}/", $uniqueName))) {
            throw new \InvalidArgumentException("invalid value for \$uniqueName when calling Region., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($uniqueName)) {
            throw new \InvalidArgumentException('non-nullable uniqueName cannot be null');
        }

        $this->container['uniqueName'] = $uniqueName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


