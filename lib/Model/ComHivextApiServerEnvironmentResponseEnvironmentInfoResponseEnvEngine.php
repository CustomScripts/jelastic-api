<?php
/**
 * ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com_hivext_api_server_environment_response_EnvironmentInfoResponse_env_engine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'vcsSupport' => 'bool',
        'packageName' => 'string',
        'keyword' => 'string',
        'type' => 'string',
        'version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'vcsSupport' => null,
        'packageName' => null,
        'keyword' => null,
        'type' => null,
        'version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'vcsSupport' => false,
		'packageName' => false,
		'keyword' => false,
		'type' => false,
		'version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'vcsSupport' => 'vcsSupport',
        'packageName' => 'packageName',
        'keyword' => 'keyword',
        'type' => 'type',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'vcsSupport' => 'setVcsSupport',
        'packageName' => 'setPackageName',
        'keyword' => 'setKeyword',
        'type' => 'setType',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'vcsSupport' => 'getVcsSupport',
        'packageName' => 'getPackageName',
        'keyword' => 'getKeyword',
        'type' => 'getType',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('vcsSupport', $data ?? [], null);
        $this->setIfExists('packageName', $data ?? [], null);
        $this->setIfExists('keyword', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['name']) && !preg_match("/(.*){0,2147483647}/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['packageName']) && (mb_strlen($this->container['packageName']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'packageName', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['packageName']) && !preg_match("/(.*){0,2147483647}/", $this->container['packageName'])) {
            $invalidProperties[] = "invalid value for 'packageName', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['keyword']) && (mb_strlen($this->container['keyword']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'keyword', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['keyword']) && !preg_match("/(.*){0,2147483647}/", $this->container['keyword'])) {
            $invalidProperties[] = "invalid value for 'keyword', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['type']) && (mb_strlen($this->container['type']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['type']) && !preg_match("/(.*){0,2147483647}/", $this->container['type'])) {
            $invalidProperties[] = "invalid value for 'type', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['version']) && (mb_strlen($this->container['version']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'version', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['version']) && !preg_match("/(.*){0,2147483647}/", $this->container['version'])) {
            $invalidProperties[] = "invalid value for 'version', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($name) && (!preg_match("/(.*){0,2147483647}/", $name))) {
            throw new \InvalidArgumentException("invalid value for \$name when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets vcsSupport
     *
     * @return bool|null
     */
    public function getVcsSupport()
    {
        return $this->container['vcsSupport'];
    }

    /**
     * Sets vcsSupport
     *
     * @param bool|null $vcsSupport vcsSupport
     *
     * @return self
     */
    public function setVcsSupport($vcsSupport)
    {

        if (is_null($vcsSupport)) {
            throw new \InvalidArgumentException('non-nullable vcsSupport cannot be null');
        }

        $this->container['vcsSupport'] = $vcsSupport;

        return $this;
    }

    /**
     * Gets packageName
     *
     * @return string|null
     */
    public function getPackageName()
    {
        return $this->container['packageName'];
    }

    /**
     * Sets packageName
     *
     * @param string|null $packageName packageName
     *
     * @return self
     */
    public function setPackageName($packageName)
    {
        if (!is_null($packageName) && (mb_strlen($packageName) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $packageName when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($packageName) && (!preg_match("/(.*){0,2147483647}/", $packageName))) {
            throw new \InvalidArgumentException("invalid value for \$packageName when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($packageName)) {
            throw new \InvalidArgumentException('non-nullable packageName cannot be null');
        }

        $this->container['packageName'] = $packageName;

        return $this;
    }

    /**
     * Gets keyword
     *
     * @return string|null
     */
    public function getKeyword()
    {
        return $this->container['keyword'];
    }

    /**
     * Sets keyword
     *
     * @param string|null $keyword keyword
     *
     * @return self
     */
    public function setKeyword($keyword)
    {
        if (!is_null($keyword) && (mb_strlen($keyword) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $keyword when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($keyword) && (!preg_match("/(.*){0,2147483647}/", $keyword))) {
            throw new \InvalidArgumentException("invalid value for \$keyword when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($keyword)) {
            throw new \InvalidArgumentException('non-nullable keyword cannot be null');
        }

        $this->container['keyword'] = $keyword;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (!is_null($type) && (mb_strlen($type) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $type when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($type) && (!preg_match("/(.*){0,2147483647}/", $type))) {
            throw new \InvalidArgumentException("invalid value for \$type when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (!is_null($version) && (mb_strlen($version) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $version when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($version) && (!preg_match("/(.*){0,2147483647}/", $version))) {
            throw new \InvalidArgumentException("invalid value for \$version when calling ComHivextApiServerEnvironmentResponseEnvironmentInfoResponseEnvEngine., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }

        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


