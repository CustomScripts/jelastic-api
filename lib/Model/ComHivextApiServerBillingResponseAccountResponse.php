<?php
/**
 * ComHivextApiServerBillingResponseAccountResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComHivextApiServerBillingResponseAccountResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComHivextApiServerBillingResponseAccountResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.hivext.api.server.billing.response.AccountResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'balance' => 'float',
        'bonus' => 'float',
        'createdOn' => '\DateTime',
        'credit' => 'float',
        'debit' => 'float',
        'defaultHardNodeGroup' => 'string',
        'defaultPayMethodId' => 'int',
        'ebsUserId' => 'string',
        'email' => 'string',
        'error' => 'string',
        'group' => 'string',
        'groupType' => 'string',
        'groupWinDomain' => 'int',
        'hardNodeGroups' => 'object[]',
        'isCommerial' => 'bool',
        'isEnabled' => 'bool',
        'isRegistered' => 'bool',
        'language' => 'string',
        'previousUpdatedGroupOn' => '\DateTime',
        'reason' => 'int',
        'result' => 'int',
        'source' => 'string',
        'status' => 'string',
        'uid' => 'int',
        'updatedGroupOn' => '\DateTime',
        'updatedStatusOn' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'balance' => 'double',
        'bonus' => 'double',
        'createdOn' => 'date',
        'credit' => 'double',
        'debit' => 'double',
        'defaultHardNodeGroup' => null,
        'defaultPayMethodId' => 'int32',
        'ebsUserId' => null,
        'email' => null,
        'error' => null,
        'group' => null,
        'groupType' => null,
        'groupWinDomain' => 'int32',
        'hardNodeGroups' => null,
        'isCommerial' => null,
        'isEnabled' => null,
        'isRegistered' => null,
        'language' => null,
        'previousUpdatedGroupOn' => 'date',
        'reason' => 'int32',
        'result' => 'int32',
        'source' => null,
        'status' => null,
        'uid' => 'int32',
        'updatedGroupOn' => 'date',
        'updatedStatusOn' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'balance' => false,
		'bonus' => false,
		'createdOn' => false,
		'credit' => false,
		'debit' => false,
		'defaultHardNodeGroup' => false,
		'defaultPayMethodId' => false,
		'ebsUserId' => false,
		'email' => false,
		'error' => false,
		'group' => false,
		'groupType' => false,
		'groupWinDomain' => false,
		'hardNodeGroups' => false,
		'isCommerial' => false,
		'isEnabled' => false,
		'isRegistered' => false,
		'language' => false,
		'previousUpdatedGroupOn' => false,
		'reason' => false,
		'result' => false,
		'source' => false,
		'status' => false,
		'uid' => false,
		'updatedGroupOn' => false,
		'updatedStatusOn' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'balance' => 'balance',
        'bonus' => 'bonus',
        'createdOn' => 'createdOn',
        'credit' => 'credit',
        'debit' => 'debit',
        'defaultHardNodeGroup' => 'defaultHardNodeGroup',
        'defaultPayMethodId' => 'defaultPayMethodId',
        'ebsUserId' => 'ebsUserId',
        'email' => 'email',
        'error' => 'error',
        'group' => 'group',
        'groupType' => 'groupType',
        'groupWinDomain' => 'groupWinDomain',
        'hardNodeGroups' => 'hardNodeGroups',
        'isCommerial' => 'isCommerial',
        'isEnabled' => 'isEnabled',
        'isRegistered' => 'isRegistered',
        'language' => 'language',
        'previousUpdatedGroupOn' => 'previousUpdatedGroupOn',
        'reason' => 'reason',
        'result' => 'result',
        'source' => 'source',
        'status' => 'status',
        'uid' => 'uid',
        'updatedGroupOn' => 'updatedGroupOn',
        'updatedStatusOn' => 'updatedStatusOn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'balance' => 'setBalance',
        'bonus' => 'setBonus',
        'createdOn' => 'setCreatedOn',
        'credit' => 'setCredit',
        'debit' => 'setDebit',
        'defaultHardNodeGroup' => 'setDefaultHardNodeGroup',
        'defaultPayMethodId' => 'setDefaultPayMethodId',
        'ebsUserId' => 'setEbsUserId',
        'email' => 'setEmail',
        'error' => 'setError',
        'group' => 'setGroup',
        'groupType' => 'setGroupType',
        'groupWinDomain' => 'setGroupWinDomain',
        'hardNodeGroups' => 'setHardNodeGroups',
        'isCommerial' => 'setIsCommerial',
        'isEnabled' => 'setIsEnabled',
        'isRegistered' => 'setIsRegistered',
        'language' => 'setLanguage',
        'previousUpdatedGroupOn' => 'setPreviousUpdatedGroupOn',
        'reason' => 'setReason',
        'result' => 'setResult',
        'source' => 'setSource',
        'status' => 'setStatus',
        'uid' => 'setUid',
        'updatedGroupOn' => 'setUpdatedGroupOn',
        'updatedStatusOn' => 'setUpdatedStatusOn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'balance' => 'getBalance',
        'bonus' => 'getBonus',
        'createdOn' => 'getCreatedOn',
        'credit' => 'getCredit',
        'debit' => 'getDebit',
        'defaultHardNodeGroup' => 'getDefaultHardNodeGroup',
        'defaultPayMethodId' => 'getDefaultPayMethodId',
        'ebsUserId' => 'getEbsUserId',
        'email' => 'getEmail',
        'error' => 'getError',
        'group' => 'getGroup',
        'groupType' => 'getGroupType',
        'groupWinDomain' => 'getGroupWinDomain',
        'hardNodeGroups' => 'getHardNodeGroups',
        'isCommerial' => 'getIsCommerial',
        'isEnabled' => 'getIsEnabled',
        'isRegistered' => 'getIsRegistered',
        'language' => 'getLanguage',
        'previousUpdatedGroupOn' => 'getPreviousUpdatedGroupOn',
        'reason' => 'getReason',
        'result' => 'getResult',
        'source' => 'getSource',
        'status' => 'getStatus',
        'uid' => 'getUid',
        'updatedGroupOn' => 'getUpdatedGroupOn',
        'updatedStatusOn' => 'getUpdatedStatusOn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_ACTIVE_1 = 'ACTIVE(1)';
    public const STATUS_INACTIVE_2 = 'INACTIVE(2)';
    public const STATUS_DESTROY_3 = 'DESTROY(3)';
    public const STATUS_DELETED_4 = 'DELETED(4)';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE_1,
            self::STATUS_INACTIVE_2,
            self::STATUS_DESTROY_3,
            self::STATUS_DELETED_4,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('bonus', $data ?? [], null);
        $this->setIfExists('createdOn', $data ?? [], null);
        $this->setIfExists('credit', $data ?? [], null);
        $this->setIfExists('debit', $data ?? [], null);
        $this->setIfExists('defaultHardNodeGroup', $data ?? [], null);
        $this->setIfExists('defaultPayMethodId', $data ?? [], null);
        $this->setIfExists('ebsUserId', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('groupType', $data ?? [], null);
        $this->setIfExists('groupWinDomain', $data ?? [], null);
        $this->setIfExists('hardNodeGroups', $data ?? [], null);
        $this->setIfExists('isCommerial', $data ?? [], null);
        $this->setIfExists('isEnabled', $data ?? [], null);
        $this->setIfExists('isRegistered', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('previousUpdatedGroupOn', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('uid', $data ?? [], null);
        $this->setIfExists('updatedGroupOn', $data ?? [], null);
        $this->setIfExists('updatedStatusOn', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['balance']) && ($this->container['balance'] > 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) {
            $invalidProperties[] = "invalid value for 'balance', must be smaller than or equal to 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.";
        }

        if (!is_null($this->container['balance']) && ($this->container['balance'] < 4.9E-324)) {
            $invalidProperties[] = "invalid value for 'balance', must be bigger than or equal to 4.9E-324.";
        }

        if (!is_null($this->container['bonus']) && ($this->container['bonus'] > 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) {
            $invalidProperties[] = "invalid value for 'bonus', must be smaller than or equal to 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.";
        }

        if (!is_null($this->container['bonus']) && ($this->container['bonus'] < 4.9E-324)) {
            $invalidProperties[] = "invalid value for 'bonus', must be bigger than or equal to 4.9E-324.";
        }

        if (!is_null($this->container['createdOn']) && (mb_strlen($this->container['createdOn']) > 19)) {
            $invalidProperties[] = "invalid value for 'createdOn', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['createdOn']) && !preg_match("/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/", $this->container['createdOn'])) {
            $invalidProperties[] = "invalid value for 'createdOn', must be conform to the pattern /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/.";
        }

        if (!is_null($this->container['credit']) && ($this->container['credit'] > 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) {
            $invalidProperties[] = "invalid value for 'credit', must be smaller than or equal to 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.";
        }

        if (!is_null($this->container['credit']) && ($this->container['credit'] < 4.9E-324)) {
            $invalidProperties[] = "invalid value for 'credit', must be bigger than or equal to 4.9E-324.";
        }

        if (!is_null($this->container['debit']) && ($this->container['debit'] > 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) {
            $invalidProperties[] = "invalid value for 'debit', must be smaller than or equal to 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.";
        }

        if (!is_null($this->container['debit']) && ($this->container['debit'] < 4.9E-324)) {
            $invalidProperties[] = "invalid value for 'debit', must be bigger than or equal to 4.9E-324.";
        }

        if (!is_null($this->container['defaultHardNodeGroup']) && (mb_strlen($this->container['defaultHardNodeGroup']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'defaultHardNodeGroup', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['defaultHardNodeGroup']) && !preg_match("/(.*){0,2147483647}/", $this->container['defaultHardNodeGroup'])) {
            $invalidProperties[] = "invalid value for 'defaultHardNodeGroup', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['defaultPayMethodId']) && ($this->container['defaultPayMethodId'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'defaultPayMethodId', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['defaultPayMethodId']) && ($this->container['defaultPayMethodId'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'defaultPayMethodId', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['ebsUserId']) && (mb_strlen($this->container['ebsUserId']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'ebsUserId', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['ebsUserId']) && !preg_match("/(.*){0,2147483647}/", $this->container['ebsUserId'])) {
            $invalidProperties[] = "invalid value for 'ebsUserId', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['email']) && !preg_match("/(.*){0,2147483647}/", $this->container['email'])) {
            $invalidProperties[] = "invalid value for 'email', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['error']) && (mb_strlen($this->container['error']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'error', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['error']) && !preg_match("/(.*){0,2147483647}/", $this->container['error'])) {
            $invalidProperties[] = "invalid value for 'error', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['group']) && (mb_strlen($this->container['group']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'group', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['group']) && !preg_match("/(.*){0,2147483647}/", $this->container['group'])) {
            $invalidProperties[] = "invalid value for 'group', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['groupType']) && (mb_strlen($this->container['groupType']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'groupType', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['groupType']) && !preg_match("/(.*){0,2147483647}/", $this->container['groupType'])) {
            $invalidProperties[] = "invalid value for 'groupType', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['groupWinDomain']) && ($this->container['groupWinDomain'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'groupWinDomain', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['groupWinDomain']) && ($this->container['groupWinDomain'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'groupWinDomain', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['hardNodeGroups']) && (count($this->container['hardNodeGroups']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'hardNodeGroups', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['language']) && !preg_match("/(.*){0,2147483647}/", $this->container['language'])) {
            $invalidProperties[] = "invalid value for 'language', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        if (!is_null($this->container['previousUpdatedGroupOn']) && (mb_strlen($this->container['previousUpdatedGroupOn']) > 19)) {
            $invalidProperties[] = "invalid value for 'previousUpdatedGroupOn', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['previousUpdatedGroupOn']) && !preg_match("/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/", $this->container['previousUpdatedGroupOn'])) {
            $invalidProperties[] = "invalid value for 'previousUpdatedGroupOn', must be conform to the pattern /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/.";
        }

        if (!is_null($this->container['reason']) && ($this->container['reason'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'reason', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['reason']) && ($this->container['reason'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'reason', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['result']) && ($this->container['result'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'result', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['result']) && ($this->container['result'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'result', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['source']) && (mb_strlen($this->container['source']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'source', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['source']) && !preg_match("/(.*){0,2147483647}/", $this->container['source'])) {
            $invalidProperties[] = "invalid value for 'source', must be conform to the pattern /(.*){0,2147483647}/.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['uid']) && ($this->container['uid'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'uid', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['uid']) && ($this->container['uid'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'uid', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['updatedGroupOn']) && (mb_strlen($this->container['updatedGroupOn']) > 19)) {
            $invalidProperties[] = "invalid value for 'updatedGroupOn', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['updatedGroupOn']) && !preg_match("/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/", $this->container['updatedGroupOn'])) {
            $invalidProperties[] = "invalid value for 'updatedGroupOn', must be conform to the pattern /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/.";
        }

        if (!is_null($this->container['updatedStatusOn']) && (mb_strlen($this->container['updatedStatusOn']) > 19)) {
            $invalidProperties[] = "invalid value for 'updatedStatusOn', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['updatedStatusOn']) && !preg_match("/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/", $this->container['updatedStatusOn'])) {
            $invalidProperties[] = "invalid value for 'updatedStatusOn', must be conform to the pattern /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {

        if (!is_null($balance) && ($balance > 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) {
            throw new \InvalidArgumentException('invalid value for $balance when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.');
        }
        if (!is_null($balance) && ($balance < 4.9E-324)) {
            throw new \InvalidArgumentException('invalid value for $balance when calling ComHivextApiServerBillingResponseAccountResponse., must be bigger than or equal to 4.9E-324.');
        }


        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }

        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets bonus
     *
     * @return float|null
     */
    public function getBonus()
    {
        return $this->container['bonus'];
    }

    /**
     * Sets bonus
     *
     * @param float|null $bonus bonus
     *
     * @return self
     */
    public function setBonus($bonus)
    {

        if (!is_null($bonus) && ($bonus > 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) {
            throw new \InvalidArgumentException('invalid value for $bonus when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.');
        }
        if (!is_null($bonus) && ($bonus < 4.9E-324)) {
            throw new \InvalidArgumentException('invalid value for $bonus when calling ComHivextApiServerBillingResponseAccountResponse., must be bigger than or equal to 4.9E-324.');
        }


        if (is_null($bonus)) {
            throw new \InvalidArgumentException('non-nullable bonus cannot be null');
        }

        $this->container['bonus'] = $bonus;

        return $this;
    }

    /**
     * Gets createdOn
     *
     * @return \DateTime|null
     */
    public function getCreatedOn()
    {
        return $this->container['createdOn'];
    }

    /**
     * Sets createdOn
     *
     * @param \DateTime|null $createdOn createdOn
     *
     * @return self
     */
    public function setCreatedOn($createdOn)
    {
        if (!is_null($createdOn) && (mb_strlen($createdOn) > 19)) {
            throw new \InvalidArgumentException('invalid length for $createdOn when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 19.');
        }
        if (!is_null($createdOn) && (!preg_match("/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/", $createdOn))) {
            throw new \InvalidArgumentException("invalid value for \$createdOn when calling ComHivextApiServerBillingResponseAccountResponse., must conform to the pattern /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/.");
        }


        if (is_null($createdOn)) {
            throw new \InvalidArgumentException('non-nullable createdOn cannot be null');
        }

        $this->container['createdOn'] = $createdOn;

        return $this;
    }

    /**
     * Gets credit
     *
     * @return float|null
     */
    public function getCredit()
    {
        return $this->container['credit'];
    }

    /**
     * Sets credit
     *
     * @param float|null $credit credit
     *
     * @return self
     */
    public function setCredit($credit)
    {

        if (!is_null($credit) && ($credit > 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) {
            throw new \InvalidArgumentException('invalid value for $credit when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.');
        }
        if (!is_null($credit) && ($credit < 4.9E-324)) {
            throw new \InvalidArgumentException('invalid value for $credit when calling ComHivextApiServerBillingResponseAccountResponse., must be bigger than or equal to 4.9E-324.');
        }


        if (is_null($credit)) {
            throw new \InvalidArgumentException('non-nullable credit cannot be null');
        }

        $this->container['credit'] = $credit;

        return $this;
    }

    /**
     * Gets debit
     *
     * @return float|null
     */
    public function getDebit()
    {
        return $this->container['debit'];
    }

    /**
     * Sets debit
     *
     * @param float|null $debit debit
     *
     * @return self
     */
    public function setDebit($debit)
    {

        if (!is_null($debit) && ($debit > 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) {
            throw new \InvalidArgumentException('invalid value for $debit when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.');
        }
        if (!is_null($debit) && ($debit < 4.9E-324)) {
            throw new \InvalidArgumentException('invalid value for $debit when calling ComHivextApiServerBillingResponseAccountResponse., must be bigger than or equal to 4.9E-324.');
        }


        if (is_null($debit)) {
            throw new \InvalidArgumentException('non-nullable debit cannot be null');
        }

        $this->container['debit'] = $debit;

        return $this;
    }

    /**
     * Gets defaultHardNodeGroup
     *
     * @return string|null
     */
    public function getDefaultHardNodeGroup()
    {
        return $this->container['defaultHardNodeGroup'];
    }

    /**
     * Sets defaultHardNodeGroup
     *
     * @param string|null $defaultHardNodeGroup defaultHardNodeGroup
     *
     * @return self
     */
    public function setDefaultHardNodeGroup($defaultHardNodeGroup)
    {
        if (!is_null($defaultHardNodeGroup) && (mb_strlen($defaultHardNodeGroup) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $defaultHardNodeGroup when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($defaultHardNodeGroup) && (!preg_match("/(.*){0,2147483647}/", $defaultHardNodeGroup))) {
            throw new \InvalidArgumentException("invalid value for \$defaultHardNodeGroup when calling ComHivextApiServerBillingResponseAccountResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($defaultHardNodeGroup)) {
            throw new \InvalidArgumentException('non-nullable defaultHardNodeGroup cannot be null');
        }

        $this->container['defaultHardNodeGroup'] = $defaultHardNodeGroup;

        return $this;
    }

    /**
     * Gets defaultPayMethodId
     *
     * @return int|null
     */
    public function getDefaultPayMethodId()
    {
        return $this->container['defaultPayMethodId'];
    }

    /**
     * Sets defaultPayMethodId
     *
     * @param int|null $defaultPayMethodId defaultPayMethodId
     *
     * @return self
     */
    public function setDefaultPayMethodId($defaultPayMethodId)
    {

        if (!is_null($defaultPayMethodId) && ($defaultPayMethodId > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $defaultPayMethodId when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($defaultPayMethodId) && ($defaultPayMethodId < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $defaultPayMethodId when calling ComHivextApiServerBillingResponseAccountResponse., must be bigger than or equal to -2147483648.');
        }


        if (is_null($defaultPayMethodId)) {
            throw new \InvalidArgumentException('non-nullable defaultPayMethodId cannot be null');
        }

        $this->container['defaultPayMethodId'] = $defaultPayMethodId;

        return $this;
    }

    /**
     * Gets ebsUserId
     *
     * @return string|null
     */
    public function getEbsUserId()
    {
        return $this->container['ebsUserId'];
    }

    /**
     * Sets ebsUserId
     *
     * @param string|null $ebsUserId ebsUserId
     *
     * @return self
     */
    public function setEbsUserId($ebsUserId)
    {
        if (!is_null($ebsUserId) && (mb_strlen($ebsUserId) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $ebsUserId when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($ebsUserId) && (!preg_match("/(.*){0,2147483647}/", $ebsUserId))) {
            throw new \InvalidArgumentException("invalid value for \$ebsUserId when calling ComHivextApiServerBillingResponseAccountResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($ebsUserId)) {
            throw new \InvalidArgumentException('non-nullable ebsUserId cannot be null');
        }

        $this->container['ebsUserId'] = $ebsUserId;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $email when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($email) && (!preg_match("/(.*){0,2147483647}/", $email))) {
            throw new \InvalidArgumentException("invalid value for \$email when calling ComHivextApiServerBillingResponseAccountResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (!is_null($error) && (mb_strlen($error) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $error when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($error) && (!preg_match("/(.*){0,2147483647}/", $error))) {
            throw new \InvalidArgumentException("invalid value for \$error when calling ComHivextApiServerBillingResponseAccountResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }

        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (!is_null($group) && (mb_strlen($group) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $group when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($group) && (!preg_match("/(.*){0,2147483647}/", $group))) {
            throw new \InvalidArgumentException("invalid value for \$group when calling ComHivextApiServerBillingResponseAccountResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }

        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets groupType
     *
     * @return string|null
     */
    public function getGroupType()
    {
        return $this->container['groupType'];
    }

    /**
     * Sets groupType
     *
     * @param string|null $groupType groupType
     *
     * @return self
     */
    public function setGroupType($groupType)
    {
        if (!is_null($groupType) && (mb_strlen($groupType) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $groupType when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($groupType) && (!preg_match("/(.*){0,2147483647}/", $groupType))) {
            throw new \InvalidArgumentException("invalid value for \$groupType when calling ComHivextApiServerBillingResponseAccountResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($groupType)) {
            throw new \InvalidArgumentException('non-nullable groupType cannot be null');
        }

        $this->container['groupType'] = $groupType;

        return $this;
    }

    /**
     * Gets groupWinDomain
     *
     * @return int|null
     */
    public function getGroupWinDomain()
    {
        return $this->container['groupWinDomain'];
    }

    /**
     * Sets groupWinDomain
     *
     * @param int|null $groupWinDomain groupWinDomain
     *
     * @return self
     */
    public function setGroupWinDomain($groupWinDomain)
    {

        if (!is_null($groupWinDomain) && ($groupWinDomain > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $groupWinDomain when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($groupWinDomain) && ($groupWinDomain < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $groupWinDomain when calling ComHivextApiServerBillingResponseAccountResponse., must be bigger than or equal to -2147483648.');
        }


        if (is_null($groupWinDomain)) {
            throw new \InvalidArgumentException('non-nullable groupWinDomain cannot be null');
        }

        $this->container['groupWinDomain'] = $groupWinDomain;

        return $this;
    }

    /**
     * Gets hardNodeGroups
     *
     * @return object[]|null
     */
    public function getHardNodeGroups()
    {
        return $this->container['hardNodeGroups'];
    }

    /**
     * Sets hardNodeGroups
     *
     * @param object[]|null $hardNodeGroups hardNodeGroups
     *
     * @return self
     */
    public function setHardNodeGroups($hardNodeGroups)
    {

        if (!is_null($hardNodeGroups) && (count($hardNodeGroups) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $hardNodeGroups when calling ComHivextApiServerBillingResponseAccountResponse., number of items must be less than or equal to 2147483647.');
        }

        if (is_null($hardNodeGroups)) {
            throw new \InvalidArgumentException('non-nullable hardNodeGroups cannot be null');
        }

        $this->container['hardNodeGroups'] = $hardNodeGroups;

        return $this;
    }

    /**
     * Gets isCommerial
     *
     * @return bool|null
     */
    public function getIsCommerial()
    {
        return $this->container['isCommerial'];
    }

    /**
     * Sets isCommerial
     *
     * @param bool|null $isCommerial isCommerial
     *
     * @return self
     */
    public function setIsCommerial($isCommerial)
    {

        if (is_null($isCommerial)) {
            throw new \InvalidArgumentException('non-nullable isCommerial cannot be null');
        }

        $this->container['isCommerial'] = $isCommerial;

        return $this;
    }

    /**
     * Gets isEnabled
     *
     * @return bool|null
     */
    public function getIsEnabled()
    {
        return $this->container['isEnabled'];
    }

    /**
     * Sets isEnabled
     *
     * @param bool|null $isEnabled isEnabled
     *
     * @return self
     */
    public function setIsEnabled($isEnabled)
    {

        if (is_null($isEnabled)) {
            throw new \InvalidArgumentException('non-nullable isEnabled cannot be null');
        }

        $this->container['isEnabled'] = $isEnabled;

        return $this;
    }

    /**
     * Gets isRegistered
     *
     * @return bool|null
     */
    public function getIsRegistered()
    {
        return $this->container['isRegistered'];
    }

    /**
     * Sets isRegistered
     *
     * @param bool|null $isRegistered isRegistered
     *
     * @return self
     */
    public function setIsRegistered($isRegistered)
    {

        if (is_null($isRegistered)) {
            throw new \InvalidArgumentException('non-nullable isRegistered cannot be null');
        }

        $this->container['isRegistered'] = $isRegistered;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (!is_null($language) && (mb_strlen($language) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $language when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($language) && (!preg_match("/(.*){0,2147483647}/", $language))) {
            throw new \InvalidArgumentException("invalid value for \$language when calling ComHivextApiServerBillingResponseAccountResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets previousUpdatedGroupOn
     *
     * @return \DateTime|null
     */
    public function getPreviousUpdatedGroupOn()
    {
        return $this->container['previousUpdatedGroupOn'];
    }

    /**
     * Sets previousUpdatedGroupOn
     *
     * @param \DateTime|null $previousUpdatedGroupOn previousUpdatedGroupOn
     *
     * @return self
     */
    public function setPreviousUpdatedGroupOn($previousUpdatedGroupOn)
    {
        if (!is_null($previousUpdatedGroupOn) && (mb_strlen($previousUpdatedGroupOn) > 19)) {
            throw new \InvalidArgumentException('invalid length for $previousUpdatedGroupOn when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 19.');
        }
        if (!is_null($previousUpdatedGroupOn) && (!preg_match("/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/", $previousUpdatedGroupOn))) {
            throw new \InvalidArgumentException("invalid value for \$previousUpdatedGroupOn when calling ComHivextApiServerBillingResponseAccountResponse., must conform to the pattern /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/.");
        }


        if (is_null($previousUpdatedGroupOn)) {
            throw new \InvalidArgumentException('non-nullable previousUpdatedGroupOn cannot be null');
        }

        $this->container['previousUpdatedGroupOn'] = $previousUpdatedGroupOn;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return int|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param int|null $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {

        if (!is_null($reason) && ($reason > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $reason when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($reason) && ($reason < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $reason when calling ComHivextApiServerBillingResponseAccountResponse., must be bigger than or equal to -2147483648.');
        }


        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }

        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets result
     *
     * @return int|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param int|null $result result
     *
     * @return self
     */
    public function setResult($result)
    {

        if (!is_null($result) && ($result > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $result when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($result) && ($result < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $result when calling ComHivextApiServerBillingResponseAccountResponse., must be bigger than or equal to -2147483648.');
        }


        if (is_null($result)) {
            throw new \InvalidArgumentException('non-nullable result cannot be null');
        }

        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (!is_null($source) && (mb_strlen($source) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $source when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($source) && (!preg_match("/(.*){0,2147483647}/", $source))) {
            throw new \InvalidArgumentException("invalid value for \$source when calling ComHivextApiServerBillingResponseAccountResponse., must conform to the pattern /(.*){0,2147483647}/.");
        }


        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }

        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return int|null
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param int|null $uid uid
     *
     * @return self
     */
    public function setUid($uid)
    {

        if (!is_null($uid) && ($uid > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $uid when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($uid) && ($uid < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $uid when calling ComHivextApiServerBillingResponseAccountResponse., must be bigger than or equal to -2147483648.');
        }


        if (is_null($uid)) {
            throw new \InvalidArgumentException('non-nullable uid cannot be null');
        }

        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets updatedGroupOn
     *
     * @return \DateTime|null
     */
    public function getUpdatedGroupOn()
    {
        return $this->container['updatedGroupOn'];
    }

    /**
     * Sets updatedGroupOn
     *
     * @param \DateTime|null $updatedGroupOn updatedGroupOn
     *
     * @return self
     */
    public function setUpdatedGroupOn($updatedGroupOn)
    {
        if (!is_null($updatedGroupOn) && (mb_strlen($updatedGroupOn) > 19)) {
            throw new \InvalidArgumentException('invalid length for $updatedGroupOn when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 19.');
        }
        if (!is_null($updatedGroupOn) && (!preg_match("/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/", $updatedGroupOn))) {
            throw new \InvalidArgumentException("invalid value for \$updatedGroupOn when calling ComHivextApiServerBillingResponseAccountResponse., must conform to the pattern /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/.");
        }


        if (is_null($updatedGroupOn)) {
            throw new \InvalidArgumentException('non-nullable updatedGroupOn cannot be null');
        }

        $this->container['updatedGroupOn'] = $updatedGroupOn;

        return $this;
    }

    /**
     * Gets updatedStatusOn
     *
     * @return \DateTime|null
     */
    public function getUpdatedStatusOn()
    {
        return $this->container['updatedStatusOn'];
    }

    /**
     * Sets updatedStatusOn
     *
     * @param \DateTime|null $updatedStatusOn updatedStatusOn
     *
     * @return self
     */
    public function setUpdatedStatusOn($updatedStatusOn)
    {
        if (!is_null($updatedStatusOn) && (mb_strlen($updatedStatusOn) > 19)) {
            throw new \InvalidArgumentException('invalid length for $updatedStatusOn when calling ComHivextApiServerBillingResponseAccountResponse., must be smaller than or equal to 19.');
        }
        if (!is_null($updatedStatusOn) && (!preg_match("/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/", $updatedStatusOn))) {
            throw new \InvalidArgumentException("invalid value for \$updatedStatusOn when calling ComHivextApiServerBillingResponseAccountResponse., must conform to the pattern /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/.");
        }


        if (is_null($updatedStatusOn)) {
            throw new \InvalidArgumentException('non-nullable updatedStatusOn cannot be null');
        }

        $this->container['updatedStatusOn'] = $updatedStatusOn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


