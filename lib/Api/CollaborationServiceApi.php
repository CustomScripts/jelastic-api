<?php
/**
 * CollaborationServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CollaborationServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CollaborationServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'usersCollaborationRestAcceptcollaborationPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestActivatememberPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestAddpolicyPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestAddresourcesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestAddrolePost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestCheckenvironmentrightsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestDeletememberPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestDeletepolicyPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestDeleteresourcesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestDeleterolePost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestEditcollaborationPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestEditmemberPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestEditpolicyPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestEditrolePost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestGetcollaborationresourcemethodsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestGetcollaborationresourcesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestGetcollaborationrolemethodsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestGetcollaborationsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestGetmemberresourcesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestGetmembersPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestGetpoliciesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestGetpolicymethodsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestGetresourcerolesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestGetrolesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestInvitememberPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestLeavecollaborationPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestRejectcollaborationPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestResendmemberinvitationPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestSetresourcePost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestSetresourcesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersCollaborationRestSuspendmemberPost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation usersCollaborationRestAcceptcollaborationPost
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAcceptcollaborationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse
     */
    public function usersCollaborationRestAcceptcollaborationPost($id, string $contentType = self::contentTypes['usersCollaborationRestAcceptcollaborationPost'][0])
    {
        list($response) = $this->usersCollaborationRestAcceptcollaborationPostWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestAcceptcollaborationPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAcceptcollaborationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestAcceptcollaborationPostWithHttpInfo($id, string $contentType = self::contentTypes['usersCollaborationRestAcceptcollaborationPost'][0])
    {
        $request = $this->usersCollaborationRestAcceptcollaborationPostRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestAcceptcollaborationPostAsync
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAcceptcollaborationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestAcceptcollaborationPostAsync($id, string $contentType = self::contentTypes['usersCollaborationRestAcceptcollaborationPost'][0])
    {
        return $this->usersCollaborationRestAcceptcollaborationPostAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestAcceptcollaborationPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAcceptcollaborationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestAcceptcollaborationPostAsyncWithHttpInfo($id, string $contentType = self::contentTypes['usersCollaborationRestAcceptcollaborationPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse';
        $request = $this->usersCollaborationRestAcceptcollaborationPostRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestAcceptcollaborationPost'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAcceptcollaborationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestAcceptcollaborationPostRequest($id, string $contentType = self::contentTypes['usersCollaborationRestAcceptcollaborationPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersCollaborationRestAcceptcollaborationPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestAcceptcollaborationPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestAcceptcollaborationPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/acceptcollaboration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestActivatememberPost
     *
     * @param  int $id id (required)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestActivatememberPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function usersCollaborationRestActivatememberPost($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestActivatememberPost'][0])
    {
        list($response) = $this->usersCollaborationRestActivatememberPostWithHttpInfo($id, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestActivatememberPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestActivatememberPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestActivatememberPostWithHttpInfo($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestActivatememberPost'][0])
    {
        $request = $this->usersCollaborationRestActivatememberPostRequest($id, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestActivatememberPostAsync
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestActivatememberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestActivatememberPostAsync($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestActivatememberPost'][0])
    {
        return $this->usersCollaborationRestActivatememberPostAsyncWithHttpInfo($id, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestActivatememberPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestActivatememberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestActivatememberPostAsyncWithHttpInfo($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestActivatememberPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->usersCollaborationRestActivatememberPostRequest($id, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestActivatememberPost'
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestActivatememberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestActivatememberPostRequest($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestActivatememberPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersCollaborationRestActivatememberPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestActivatememberPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestActivatememberPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestActivatememberPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestActivatememberPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/activatemember';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestAddpolicyPost
     *
     * @param  string $methods methods (required)
     * @param  string $name name (required)
     * @param  string $description description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddpolicyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse
     */
    public function usersCollaborationRestAddpolicyPost($methods, $name, $description = null, string $contentType = self::contentTypes['usersCollaborationRestAddpolicyPost'][0])
    {
        list($response) = $this->usersCollaborationRestAddpolicyPostWithHttpInfo($methods, $name, $description, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestAddpolicyPostWithHttpInfo
     *
     * @param  string $methods (required)
     * @param  string $name (required)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddpolicyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestAddpolicyPostWithHttpInfo($methods, $name, $description = null, string $contentType = self::contentTypes['usersCollaborationRestAddpolicyPost'][0])
    {
        $request = $this->usersCollaborationRestAddpolicyPostRequest($methods, $name, $description, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestAddpolicyPostAsync
     *
     * @param  string $methods (required)
     * @param  string $name (required)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddpolicyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestAddpolicyPostAsync($methods, $name, $description = null, string $contentType = self::contentTypes['usersCollaborationRestAddpolicyPost'][0])
    {
        return $this->usersCollaborationRestAddpolicyPostAsyncWithHttpInfo($methods, $name, $description, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestAddpolicyPostAsyncWithHttpInfo
     *
     * @param  string $methods (required)
     * @param  string $name (required)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddpolicyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestAddpolicyPostAsyncWithHttpInfo($methods, $name, $description = null, string $contentType = self::contentTypes['usersCollaborationRestAddpolicyPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse';
        $request = $this->usersCollaborationRestAddpolicyPostRequest($methods, $name, $description, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestAddpolicyPost'
     *
     * @param  string $methods (required)
     * @param  string $name (required)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddpolicyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestAddpolicyPostRequest($methods, $name, $description = null, string $contentType = self::contentTypes['usersCollaborationRestAddpolicyPost'][0])
    {

        // verify the required parameter 'methods' is set
        if ($methods === null || (is_array($methods) && count($methods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $methods when calling usersCollaborationRestAddpolicyPost'
            );
        }
        if (strlen($methods) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$methods" when calling CollaborationServiceApi.usersCollaborationRestAddpolicyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $methods)) {
            throw new \InvalidArgumentException("invalid value for \"methods\" when calling CollaborationServiceApi.usersCollaborationRestAddpolicyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling usersCollaborationRestAddpolicyPost'
            );
        }
        if (strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling CollaborationServiceApi.usersCollaborationRestAddpolicyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling CollaborationServiceApi.usersCollaborationRestAddpolicyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($description !== null && strlen($description) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$description" when calling CollaborationServiceApi.usersCollaborationRestAddpolicyPost, must be smaller than or equal to 2147483647.');
        }
        if ($description !== null && !preg_match("/(.*){0,2147483647}/", $description)) {
            throw new \InvalidArgumentException("invalid value for \"description\" when calling CollaborationServiceApi.usersCollaborationRestAddpolicyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/collaboration/rest/addpolicy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($methods !== null) {
            $formParams['methods'] = ObjectSerializer::toFormValue($methods);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestAddresourcesPost
     *
     * @param  string $resources resources (required)
     * @param  int $collaborationId collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddresourcesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses
     */
    public function usersCollaborationRestAddresourcesPost($resources, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestAddresourcesPost'][0])
    {
        list($response) = $this->usersCollaborationRestAddresourcesPostWithHttpInfo($resources, $collaborationId, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestAddresourcesPostWithHttpInfo
     *
     * @param  string $resources (required)
     * @param  int $collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddresourcesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestAddresourcesPostWithHttpInfo($resources, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestAddresourcesPost'][0])
    {
        $request = $this->usersCollaborationRestAddresourcesPostRequest($resources, $collaborationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestAddresourcesPostAsync
     *
     * @param  string $resources (required)
     * @param  int $collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestAddresourcesPostAsync($resources, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestAddresourcesPost'][0])
    {
        return $this->usersCollaborationRestAddresourcesPostAsyncWithHttpInfo($resources, $collaborationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestAddresourcesPostAsyncWithHttpInfo
     *
     * @param  string $resources (required)
     * @param  int $collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestAddresourcesPostAsyncWithHttpInfo($resources, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestAddresourcesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses';
        $request = $this->usersCollaborationRestAddresourcesPostRequest($resources, $collaborationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestAddresourcesPost'
     *
     * @param  string $resources (required)
     * @param  int $collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestAddresourcesPostRequest($resources, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestAddresourcesPost'][0])
    {

        // verify the required parameter 'resources' is set
        if ($resources === null || (is_array($resources) && count($resources) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resources when calling usersCollaborationRestAddresourcesPost'
            );
        }
        if (strlen($resources) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$resources" when calling CollaborationServiceApi.usersCollaborationRestAddresourcesPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $resources)) {
            throw new \InvalidArgumentException("invalid value for \"resources\" when calling CollaborationServiceApi.usersCollaborationRestAddresourcesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'collaborationId' is set
        if ($collaborationId === null || (is_array($collaborationId) && count($collaborationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collaborationId when calling usersCollaborationRestAddresourcesPost'
            );
        }
        if ($collaborationId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$collaborationId" when calling CollaborationServiceApi.usersCollaborationRestAddresourcesPost, must be smaller than or equal to 2147483647.');
        }
        if ($collaborationId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$collaborationId" when calling CollaborationServiceApi.usersCollaborationRestAddresourcesPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/addresources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($resources !== null) {
            $formParams['resources'] = ObjectSerializer::toFormValue($resources);
        }
        // form params
        if ($collaborationId !== null) {
            $formParams['collaborationId'] = ObjectSerializer::toFormValue($collaborationId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestAddrolePost
     *
     * @param  bool $receiveNotification receiveNotification (required)
     * @param  string $name name (required)
     * @param  string $policies policies (required)
     * @param  string $description description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddrolePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse
     */
    public function usersCollaborationRestAddrolePost($receiveNotification, $name, $policies, $description = null, string $contentType = self::contentTypes['usersCollaborationRestAddrolePost'][0])
    {
        list($response) = $this->usersCollaborationRestAddrolePostWithHttpInfo($receiveNotification, $name, $policies, $description, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestAddrolePostWithHttpInfo
     *
     * @param  bool $receiveNotification (required)
     * @param  string $name (required)
     * @param  string $policies (required)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddrolePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestAddrolePostWithHttpInfo($receiveNotification, $name, $policies, $description = null, string $contentType = self::contentTypes['usersCollaborationRestAddrolePost'][0])
    {
        $request = $this->usersCollaborationRestAddrolePostRequest($receiveNotification, $name, $policies, $description, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestAddrolePostAsync
     *
     * @param  bool $receiveNotification (required)
     * @param  string $name (required)
     * @param  string $policies (required)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddrolePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestAddrolePostAsync($receiveNotification, $name, $policies, $description = null, string $contentType = self::contentTypes['usersCollaborationRestAddrolePost'][0])
    {
        return $this->usersCollaborationRestAddrolePostAsyncWithHttpInfo($receiveNotification, $name, $policies, $description, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestAddrolePostAsyncWithHttpInfo
     *
     * @param  bool $receiveNotification (required)
     * @param  string $name (required)
     * @param  string $policies (required)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddrolePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestAddrolePostAsyncWithHttpInfo($receiveNotification, $name, $policies, $description = null, string $contentType = self::contentTypes['usersCollaborationRestAddrolePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse';
        $request = $this->usersCollaborationRestAddrolePostRequest($receiveNotification, $name, $policies, $description, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestAddrolePost'
     *
     * @param  bool $receiveNotification (required)
     * @param  string $name (required)
     * @param  string $policies (required)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestAddrolePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestAddrolePostRequest($receiveNotification, $name, $policies, $description = null, string $contentType = self::contentTypes['usersCollaborationRestAddrolePost'][0])
    {

        // verify the required parameter 'receiveNotification' is set
        if ($receiveNotification === null || (is_array($receiveNotification) && count($receiveNotification) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $receiveNotification when calling usersCollaborationRestAddrolePost'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling usersCollaborationRestAddrolePost'
            );
        }
        if (strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling CollaborationServiceApi.usersCollaborationRestAddrolePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling CollaborationServiceApi.usersCollaborationRestAddrolePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'policies' is set
        if ($policies === null || (is_array($policies) && count($policies) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $policies when calling usersCollaborationRestAddrolePost'
            );
        }
        if (strlen($policies) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$policies" when calling CollaborationServiceApi.usersCollaborationRestAddrolePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $policies)) {
            throw new \InvalidArgumentException("invalid value for \"policies\" when calling CollaborationServiceApi.usersCollaborationRestAddrolePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($description !== null && strlen($description) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$description" when calling CollaborationServiceApi.usersCollaborationRestAddrolePost, must be smaller than or equal to 2147483647.');
        }
        if ($description !== null && !preg_match("/(.*){0,2147483647}/", $description)) {
            throw new \InvalidArgumentException("invalid value for \"description\" when calling CollaborationServiceApi.usersCollaborationRestAddrolePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/collaboration/rest/addrole';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($receiveNotification !== null) {
            $formParams['receiveNotification'] = ObjectSerializer::toFormValue($receiveNotification);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($policies !== null) {
            $formParams['policies'] = ObjectSerializer::toFormValue($policies);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestCheckenvironmentrightsPost
     *
     * @param  string $serviceMethod serviceMethod (required)
     * @param  bool $isAny isAny (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestCheckenvironmentrightsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function usersCollaborationRestCheckenvironmentrightsPost($serviceMethod, $isAny = null, string $contentType = self::contentTypes['usersCollaborationRestCheckenvironmentrightsPost'][0])
    {
        list($response) = $this->usersCollaborationRestCheckenvironmentrightsPostWithHttpInfo($serviceMethod, $isAny, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestCheckenvironmentrightsPostWithHttpInfo
     *
     * @param  string $serviceMethod (required)
     * @param  bool $isAny (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestCheckenvironmentrightsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestCheckenvironmentrightsPostWithHttpInfo($serviceMethod, $isAny = null, string $contentType = self::contentTypes['usersCollaborationRestCheckenvironmentrightsPost'][0])
    {
        $request = $this->usersCollaborationRestCheckenvironmentrightsPostRequest($serviceMethod, $isAny, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestCheckenvironmentrightsPostAsync
     *
     * @param  string $serviceMethod (required)
     * @param  bool $isAny (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestCheckenvironmentrightsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestCheckenvironmentrightsPostAsync($serviceMethod, $isAny = null, string $contentType = self::contentTypes['usersCollaborationRestCheckenvironmentrightsPost'][0])
    {
        return $this->usersCollaborationRestCheckenvironmentrightsPostAsyncWithHttpInfo($serviceMethod, $isAny, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestCheckenvironmentrightsPostAsyncWithHttpInfo
     *
     * @param  string $serviceMethod (required)
     * @param  bool $isAny (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestCheckenvironmentrightsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestCheckenvironmentrightsPostAsyncWithHttpInfo($serviceMethod, $isAny = null, string $contentType = self::contentTypes['usersCollaborationRestCheckenvironmentrightsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->usersCollaborationRestCheckenvironmentrightsPostRequest($serviceMethod, $isAny, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestCheckenvironmentrightsPost'
     *
     * @param  string $serviceMethod (required)
     * @param  bool $isAny (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestCheckenvironmentrightsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestCheckenvironmentrightsPostRequest($serviceMethod, $isAny = null, string $contentType = self::contentTypes['usersCollaborationRestCheckenvironmentrightsPost'][0])
    {

        // verify the required parameter 'serviceMethod' is set
        if ($serviceMethod === null || (is_array($serviceMethod) && count($serviceMethod) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceMethod when calling usersCollaborationRestCheckenvironmentrightsPost'
            );
        }
        if (strlen($serviceMethod) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$serviceMethod" when calling CollaborationServiceApi.usersCollaborationRestCheckenvironmentrightsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $serviceMethod)) {
            throw new \InvalidArgumentException("invalid value for \"serviceMethod\" when calling CollaborationServiceApi.usersCollaborationRestCheckenvironmentrightsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        


        $resourcePath = '/users/collaboration/rest/checkenvironmentrights';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($isAny !== null) {
            $formParams['isAny'] = ObjectSerializer::toFormValue($isAny);
        }
        // form params
        if ($serviceMethod !== null) {
            $formParams['serviceMethod'] = ObjectSerializer::toFormValue($serviceMethod);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestDeletememberPost
     *
     * @param  int $id id (required)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeletememberPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function usersCollaborationRestDeletememberPost($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestDeletememberPost'][0])
    {
        list($response) = $this->usersCollaborationRestDeletememberPostWithHttpInfo($id, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestDeletememberPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeletememberPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestDeletememberPostWithHttpInfo($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestDeletememberPost'][0])
    {
        $request = $this->usersCollaborationRestDeletememberPostRequest($id, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestDeletememberPostAsync
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeletememberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestDeletememberPostAsync($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestDeletememberPost'][0])
    {
        return $this->usersCollaborationRestDeletememberPostAsyncWithHttpInfo($id, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestDeletememberPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeletememberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestDeletememberPostAsyncWithHttpInfo($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestDeletememberPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->usersCollaborationRestDeletememberPostRequest($id, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestDeletememberPost'
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeletememberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestDeletememberPostRequest($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestDeletememberPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersCollaborationRestDeletememberPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestDeletememberPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestDeletememberPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestDeletememberPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestDeletememberPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/deletemember';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestDeletepolicyPost
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeletepolicyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function usersCollaborationRestDeletepolicyPost($id, string $contentType = self::contentTypes['usersCollaborationRestDeletepolicyPost'][0])
    {
        list($response) = $this->usersCollaborationRestDeletepolicyPostWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestDeletepolicyPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeletepolicyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestDeletepolicyPostWithHttpInfo($id, string $contentType = self::contentTypes['usersCollaborationRestDeletepolicyPost'][0])
    {
        $request = $this->usersCollaborationRestDeletepolicyPostRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestDeletepolicyPostAsync
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeletepolicyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestDeletepolicyPostAsync($id, string $contentType = self::contentTypes['usersCollaborationRestDeletepolicyPost'][0])
    {
        return $this->usersCollaborationRestDeletepolicyPostAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestDeletepolicyPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeletepolicyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestDeletepolicyPostAsyncWithHttpInfo($id, string $contentType = self::contentTypes['usersCollaborationRestDeletepolicyPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->usersCollaborationRestDeletepolicyPostRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestDeletepolicyPost'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeletepolicyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestDeletepolicyPostRequest($id, string $contentType = self::contentTypes['usersCollaborationRestDeletepolicyPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersCollaborationRestDeletepolicyPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestDeletepolicyPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestDeletepolicyPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/deletepolicy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestDeleteresourcesPost
     *
     * @param  object[] $ids ids (required)
     * @param  int $collaborationId collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeleteresourcesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function usersCollaborationRestDeleteresourcesPost($ids, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestDeleteresourcesPost'][0])
    {
        list($response) = $this->usersCollaborationRestDeleteresourcesPostWithHttpInfo($ids, $collaborationId, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestDeleteresourcesPostWithHttpInfo
     *
     * @param  object[] $ids (required)
     * @param  int $collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeleteresourcesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestDeleteresourcesPostWithHttpInfo($ids, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestDeleteresourcesPost'][0])
    {
        $request = $this->usersCollaborationRestDeleteresourcesPostRequest($ids, $collaborationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestDeleteresourcesPostAsync
     *
     * @param  object[] $ids (required)
     * @param  int $collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeleteresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestDeleteresourcesPostAsync($ids, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestDeleteresourcesPost'][0])
    {
        return $this->usersCollaborationRestDeleteresourcesPostAsyncWithHttpInfo($ids, $collaborationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestDeleteresourcesPostAsyncWithHttpInfo
     *
     * @param  object[] $ids (required)
     * @param  int $collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeleteresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestDeleteresourcesPostAsyncWithHttpInfo($ids, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestDeleteresourcesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->usersCollaborationRestDeleteresourcesPostRequest($ids, $collaborationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestDeleteresourcesPost'
     *
     * @param  object[] $ids (required)
     * @param  int $collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeleteresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestDeleteresourcesPostRequest($ids, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestDeleteresourcesPost'][0])
    {

        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling usersCollaborationRestDeleteresourcesPost'
            );
        }
        if (count($ids) > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ids" when calling CollaborationServiceApi.usersCollaborationRestDeleteresourcesPost, number of items must be less than or equal to 2147483647.');
        }
        
        // verify the required parameter 'collaborationId' is set
        if ($collaborationId === null || (is_array($collaborationId) && count($collaborationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collaborationId when calling usersCollaborationRestDeleteresourcesPost'
            );
        }
        if ($collaborationId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$collaborationId" when calling CollaborationServiceApi.usersCollaborationRestDeleteresourcesPost, must be smaller than or equal to 2147483647.');
        }
        if ($collaborationId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$collaborationId" when calling CollaborationServiceApi.usersCollaborationRestDeleteresourcesPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/deleteresources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($ids !== null) {
            $formParams['ids'] = ObjectSerializer::toFormValue($ids);
        }
        // form params
        if ($collaborationId !== null) {
            $formParams['collaborationId'] = ObjectSerializer::toFormValue($collaborationId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestDeleterolePost
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeleterolePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function usersCollaborationRestDeleterolePost($id, string $contentType = self::contentTypes['usersCollaborationRestDeleterolePost'][0])
    {
        list($response) = $this->usersCollaborationRestDeleterolePostWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestDeleterolePostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeleterolePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestDeleterolePostWithHttpInfo($id, string $contentType = self::contentTypes['usersCollaborationRestDeleterolePost'][0])
    {
        $request = $this->usersCollaborationRestDeleterolePostRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestDeleterolePostAsync
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeleterolePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestDeleterolePostAsync($id, string $contentType = self::contentTypes['usersCollaborationRestDeleterolePost'][0])
    {
        return $this->usersCollaborationRestDeleterolePostAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestDeleterolePostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeleterolePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestDeleterolePostAsyncWithHttpInfo($id, string $contentType = self::contentTypes['usersCollaborationRestDeleterolePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->usersCollaborationRestDeleterolePostRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestDeleterolePost'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestDeleterolePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestDeleterolePostRequest($id, string $contentType = self::contentTypes['usersCollaborationRestDeleterolePost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersCollaborationRestDeleterolePost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestDeleterolePost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestDeleterolePost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/deleterole';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestEditcollaborationPost
     *
     * @param  int $id id (required)
     * @param  string $displayName displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditcollaborationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse
     */
    public function usersCollaborationRestEditcollaborationPost($id, $displayName = null, string $contentType = self::contentTypes['usersCollaborationRestEditcollaborationPost'][0])
    {
        list($response) = $this->usersCollaborationRestEditcollaborationPostWithHttpInfo($id, $displayName, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestEditcollaborationPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditcollaborationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestEditcollaborationPostWithHttpInfo($id, $displayName = null, string $contentType = self::contentTypes['usersCollaborationRestEditcollaborationPost'][0])
    {
        $request = $this->usersCollaborationRestEditcollaborationPostRequest($id, $displayName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestEditcollaborationPostAsync
     *
     * @param  int $id (required)
     * @param  string $displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditcollaborationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestEditcollaborationPostAsync($id, $displayName = null, string $contentType = self::contentTypes['usersCollaborationRestEditcollaborationPost'][0])
    {
        return $this->usersCollaborationRestEditcollaborationPostAsyncWithHttpInfo($id, $displayName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestEditcollaborationPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditcollaborationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestEditcollaborationPostAsyncWithHttpInfo($id, $displayName = null, string $contentType = self::contentTypes['usersCollaborationRestEditcollaborationPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse';
        $request = $this->usersCollaborationRestEditcollaborationPostRequest($id, $displayName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestEditcollaborationPost'
     *
     * @param  int $id (required)
     * @param  string $displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditcollaborationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestEditcollaborationPostRequest($id, $displayName = null, string $contentType = self::contentTypes['usersCollaborationRestEditcollaborationPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersCollaborationRestEditcollaborationPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestEditcollaborationPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestEditcollaborationPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($displayName !== null && strlen($displayName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$displayName" when calling CollaborationServiceApi.usersCollaborationRestEditcollaborationPost, must be smaller than or equal to 2147483647.');
        }
        if ($displayName !== null && !preg_match("/(.*){0,2147483647}/", $displayName)) {
            throw new \InvalidArgumentException("invalid value for \"displayName\" when calling CollaborationServiceApi.usersCollaborationRestEditcollaborationPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/collaboration/rest/editcollaboration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($displayName !== null) {
            $formParams['displayName'] = ObjectSerializer::toFormValue($displayName);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestEditmemberPost
     *
     * @param  int $id id (required)
     * @param  string $displayName displayName (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditmemberPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse
     */
    public function usersCollaborationRestEditmemberPost($id, $displayName = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestEditmemberPost'][0])
    {
        list($response) = $this->usersCollaborationRestEditmemberPostWithHttpInfo($id, $displayName, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestEditmemberPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $displayName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditmemberPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestEditmemberPostWithHttpInfo($id, $displayName = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestEditmemberPost'][0])
    {
        $request = $this->usersCollaborationRestEditmemberPostRequest($id, $displayName, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestEditmemberPostAsync
     *
     * @param  int $id (required)
     * @param  string $displayName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditmemberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestEditmemberPostAsync($id, $displayName = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestEditmemberPost'][0])
    {
        return $this->usersCollaborationRestEditmemberPostAsyncWithHttpInfo($id, $displayName, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestEditmemberPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $displayName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditmemberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestEditmemberPostAsyncWithHttpInfo($id, $displayName = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestEditmemberPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse';
        $request = $this->usersCollaborationRestEditmemberPostRequest($id, $displayName, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestEditmemberPost'
     *
     * @param  int $id (required)
     * @param  string $displayName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditmemberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestEditmemberPostRequest($id, $displayName = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestEditmemberPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersCollaborationRestEditmemberPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestEditmemberPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestEditmemberPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($displayName !== null && strlen($displayName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$displayName" when calling CollaborationServiceApi.usersCollaborationRestEditmemberPost, must be smaller than or equal to 2147483647.');
        }
        if ($displayName !== null && !preg_match("/(.*){0,2147483647}/", $displayName)) {
            throw new \InvalidArgumentException("invalid value for \"displayName\" when calling CollaborationServiceApi.usersCollaborationRestEditmemberPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestEditmemberPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestEditmemberPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/editmember';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($displayName !== null) {
            $formParams['displayName'] = ObjectSerializer::toFormValue($displayName);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestEditpolicyPost
     *
     * @param  string $methods methods (required)
     * @param  int $id id (required)
     * @param  string $name name (optional)
     * @param  string $description description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditpolicyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse
     */
    public function usersCollaborationRestEditpolicyPost($methods, $id, $name = null, $description = null, string $contentType = self::contentTypes['usersCollaborationRestEditpolicyPost'][0])
    {
        list($response) = $this->usersCollaborationRestEditpolicyPostWithHttpInfo($methods, $id, $name, $description, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestEditpolicyPostWithHttpInfo
     *
     * @param  string $methods (required)
     * @param  int $id (required)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditpolicyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestEditpolicyPostWithHttpInfo($methods, $id, $name = null, $description = null, string $contentType = self::contentTypes['usersCollaborationRestEditpolicyPost'][0])
    {
        $request = $this->usersCollaborationRestEditpolicyPostRequest($methods, $id, $name, $description, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestEditpolicyPostAsync
     *
     * @param  string $methods (required)
     * @param  int $id (required)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditpolicyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestEditpolicyPostAsync($methods, $id, $name = null, $description = null, string $contentType = self::contentTypes['usersCollaborationRestEditpolicyPost'][0])
    {
        return $this->usersCollaborationRestEditpolicyPostAsyncWithHttpInfo($methods, $id, $name, $description, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestEditpolicyPostAsyncWithHttpInfo
     *
     * @param  string $methods (required)
     * @param  int $id (required)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditpolicyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestEditpolicyPostAsyncWithHttpInfo($methods, $id, $name = null, $description = null, string $contentType = self::contentTypes['usersCollaborationRestEditpolicyPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePolicyResponse';
        $request = $this->usersCollaborationRestEditpolicyPostRequest($methods, $id, $name, $description, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestEditpolicyPost'
     *
     * @param  string $methods (required)
     * @param  int $id (required)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditpolicyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestEditpolicyPostRequest($methods, $id, $name = null, $description = null, string $contentType = self::contentTypes['usersCollaborationRestEditpolicyPost'][0])
    {

        // verify the required parameter 'methods' is set
        if ($methods === null || (is_array($methods) && count($methods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $methods when calling usersCollaborationRestEditpolicyPost'
            );
        }
        if (strlen($methods) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$methods" when calling CollaborationServiceApi.usersCollaborationRestEditpolicyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $methods)) {
            throw new \InvalidArgumentException("invalid value for \"methods\" when calling CollaborationServiceApi.usersCollaborationRestEditpolicyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersCollaborationRestEditpolicyPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestEditpolicyPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestEditpolicyPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($name !== null && strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling CollaborationServiceApi.usersCollaborationRestEditpolicyPost, must be smaller than or equal to 2147483647.');
        }
        if ($name !== null && !preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling CollaborationServiceApi.usersCollaborationRestEditpolicyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($description !== null && strlen($description) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$description" when calling CollaborationServiceApi.usersCollaborationRestEditpolicyPost, must be smaller than or equal to 2147483647.');
        }
        if ($description !== null && !preg_match("/(.*){0,2147483647}/", $description)) {
            throw new \InvalidArgumentException("invalid value for \"description\" when calling CollaborationServiceApi.usersCollaborationRestEditpolicyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/collaboration/rest/editpolicy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($methods !== null) {
            $formParams['methods'] = ObjectSerializer::toFormValue($methods);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestEditrolePost
     *
     * @param  string $policies policies (required)
     * @param  int $id id (required)
     * @param  bool $receiveNotification receiveNotification (optional)
     * @param  string $name name (optional)
     * @param  string $description description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditrolePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse
     */
    public function usersCollaborationRestEditrolePost($policies, $id, $receiveNotification = null, $name = null, $description = null, string $contentType = self::contentTypes['usersCollaborationRestEditrolePost'][0])
    {
        list($response) = $this->usersCollaborationRestEditrolePostWithHttpInfo($policies, $id, $receiveNotification, $name, $description, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestEditrolePostWithHttpInfo
     *
     * @param  string $policies (required)
     * @param  int $id (required)
     * @param  bool $receiveNotification (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditrolePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestEditrolePostWithHttpInfo($policies, $id, $receiveNotification = null, $name = null, $description = null, string $contentType = self::contentTypes['usersCollaborationRestEditrolePost'][0])
    {
        $request = $this->usersCollaborationRestEditrolePostRequest($policies, $id, $receiveNotification, $name, $description, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestEditrolePostAsync
     *
     * @param  string $policies (required)
     * @param  int $id (required)
     * @param  bool $receiveNotification (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditrolePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestEditrolePostAsync($policies, $id, $receiveNotification = null, $name = null, $description = null, string $contentType = self::contentTypes['usersCollaborationRestEditrolePost'][0])
    {
        return $this->usersCollaborationRestEditrolePostAsyncWithHttpInfo($policies, $id, $receiveNotification, $name, $description, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestEditrolePostAsyncWithHttpInfo
     *
     * @param  string $policies (required)
     * @param  int $id (required)
     * @param  bool $receiveNotification (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditrolePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestEditrolePostAsyncWithHttpInfo($policies, $id, $receiveNotification = null, $name = null, $description = null, string $contentType = self::contentTypes['usersCollaborationRestEditrolePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRoleResponse';
        $request = $this->usersCollaborationRestEditrolePostRequest($policies, $id, $receiveNotification, $name, $description, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestEditrolePost'
     *
     * @param  string $policies (required)
     * @param  int $id (required)
     * @param  bool $receiveNotification (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestEditrolePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestEditrolePostRequest($policies, $id, $receiveNotification = null, $name = null, $description = null, string $contentType = self::contentTypes['usersCollaborationRestEditrolePost'][0])
    {

        // verify the required parameter 'policies' is set
        if ($policies === null || (is_array($policies) && count($policies) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $policies when calling usersCollaborationRestEditrolePost'
            );
        }
        if (strlen($policies) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$policies" when calling CollaborationServiceApi.usersCollaborationRestEditrolePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $policies)) {
            throw new \InvalidArgumentException("invalid value for \"policies\" when calling CollaborationServiceApi.usersCollaborationRestEditrolePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersCollaborationRestEditrolePost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestEditrolePost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestEditrolePost, must be bigger than or equal to -2147483648.');
        }
        

        if ($name !== null && strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling CollaborationServiceApi.usersCollaborationRestEditrolePost, must be smaller than or equal to 2147483647.');
        }
        if ($name !== null && !preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling CollaborationServiceApi.usersCollaborationRestEditrolePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($description !== null && strlen($description) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$description" when calling CollaborationServiceApi.usersCollaborationRestEditrolePost, must be smaller than or equal to 2147483647.');
        }
        if ($description !== null && !preg_match("/(.*){0,2147483647}/", $description)) {
            throw new \InvalidArgumentException("invalid value for \"description\" when calling CollaborationServiceApi.usersCollaborationRestEditrolePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/collaboration/rest/editrole';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($receiveNotification !== null) {
            $formParams['receiveNotification'] = ObjectSerializer::toFormValue($receiveNotification);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($policies !== null) {
            $formParams['policies'] = ObjectSerializer::toFormValue($policies);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestGetcollaborationresourcemethodsPost
     *
     * @param  string $resourceId resourceId (required)
     * @param  string $resourceType resourceType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationresourcemethodsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseStringArrayResponse
     */
    public function usersCollaborationRestGetcollaborationresourcemethodsPost($resourceId, $resourceType, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationresourcemethodsPost'][0])
    {
        list($response) = $this->usersCollaborationRestGetcollaborationresourcemethodsPostWithHttpInfo($resourceId, $resourceType, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestGetcollaborationresourcemethodsPostWithHttpInfo
     *
     * @param  string $resourceId (required)
     * @param  string $resourceType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationresourcemethodsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseStringArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestGetcollaborationresourcemethodsPostWithHttpInfo($resourceId, $resourceType, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationresourcemethodsPost'][0])
    {
        $request = $this->usersCollaborationRestGetcollaborationresourcemethodsPostRequest($resourceId, $resourceType, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseStringArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseStringArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseStringArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseStringArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseStringArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestGetcollaborationresourcemethodsPostAsync
     *
     * @param  string $resourceId (required)
     * @param  string $resourceType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationresourcemethodsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetcollaborationresourcemethodsPostAsync($resourceId, $resourceType, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationresourcemethodsPost'][0])
    {
        return $this->usersCollaborationRestGetcollaborationresourcemethodsPostAsyncWithHttpInfo($resourceId, $resourceType, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestGetcollaborationresourcemethodsPostAsyncWithHttpInfo
     *
     * @param  string $resourceId (required)
     * @param  string $resourceType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationresourcemethodsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetcollaborationresourcemethodsPostAsyncWithHttpInfo($resourceId, $resourceType, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationresourcemethodsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseStringArrayResponse';
        $request = $this->usersCollaborationRestGetcollaborationresourcemethodsPostRequest($resourceId, $resourceType, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestGetcollaborationresourcemethodsPost'
     *
     * @param  string $resourceId (required)
     * @param  string $resourceType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationresourcemethodsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestGetcollaborationresourcemethodsPostRequest($resourceId, $resourceType, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationresourcemethodsPost'][0])
    {

        // verify the required parameter 'resourceId' is set
        if ($resourceId === null || (is_array($resourceId) && count($resourceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resourceId when calling usersCollaborationRestGetcollaborationresourcemethodsPost'
            );
        }
        if (strlen($resourceId) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$resourceId" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationresourcemethodsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $resourceId)) {
            throw new \InvalidArgumentException("invalid value for \"resourceId\" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationresourcemethodsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'resourceType' is set
        if ($resourceType === null || (is_array($resourceType) && count($resourceType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resourceType when calling usersCollaborationRestGetcollaborationresourcemethodsPost'
            );
        }
        if (strlen($resourceType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$resourceType" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationresourcemethodsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $resourceType)) {
            throw new \InvalidArgumentException("invalid value for \"resourceType\" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationresourcemethodsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/collaboration/rest/getcollaborationresourcemethods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($resourceId !== null) {
            $formParams['resourceId'] = ObjectSerializer::toFormValue($resourceId);
        }
        // form params
        if ($resourceType !== null) {
            $formParams['resourceType'] = ObjectSerializer::toFormValue($resourceType);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestGetcollaborationresourcesPost
     *
     * @param  string $type type (optional)
     * @param  int $collaborationId collaborationId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationresourcesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses
     */
    public function usersCollaborationRestGetcollaborationresourcesPost($type = null, $collaborationId = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationresourcesPost'][0])
    {
        list($response) = $this->usersCollaborationRestGetcollaborationresourcesPostWithHttpInfo($type, $collaborationId, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestGetcollaborationresourcesPostWithHttpInfo
     *
     * @param  string $type (optional)
     * @param  int $collaborationId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationresourcesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestGetcollaborationresourcesPostWithHttpInfo($type = null, $collaborationId = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationresourcesPost'][0])
    {
        $request = $this->usersCollaborationRestGetcollaborationresourcesPostRequest($type, $collaborationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestGetcollaborationresourcesPostAsync
     *
     * @param  string $type (optional)
     * @param  int $collaborationId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetcollaborationresourcesPostAsync($type = null, $collaborationId = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationresourcesPost'][0])
    {
        return $this->usersCollaborationRestGetcollaborationresourcesPostAsyncWithHttpInfo($type, $collaborationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestGetcollaborationresourcesPostAsyncWithHttpInfo
     *
     * @param  string $type (optional)
     * @param  int $collaborationId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetcollaborationresourcesPostAsyncWithHttpInfo($type = null, $collaborationId = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationresourcesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses';
        $request = $this->usersCollaborationRestGetcollaborationresourcesPostRequest($type, $collaborationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestGetcollaborationresourcesPost'
     *
     * @param  string $type (optional)
     * @param  int $collaborationId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestGetcollaborationresourcesPostRequest($type = null, $collaborationId = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationresourcesPost'][0])
    {

        if ($type !== null && strlen($type) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$type" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationresourcesPost, must be smaller than or equal to 2147483647.');
        }
        if ($type !== null && !preg_match("/(.*){0,2147483647}/", $type)) {
            throw new \InvalidArgumentException("invalid value for \"type\" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationresourcesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($collaborationId !== null && $collaborationId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$collaborationId" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationresourcesPost, must be smaller than or equal to 2147483647.');
        }
        if ($collaborationId !== null && $collaborationId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$collaborationId" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationresourcesPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/getcollaborationresources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($collaborationId !== null) {
            $formParams['collaborationId'] = ObjectSerializer::toFormValue($collaborationId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestGetcollaborationrolemethodsPost
     *
     * @param  int $roleId roleId (optional)
     * @param  int $collaborationId collaborationId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationrolemethodsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerListResponse
     */
    public function usersCollaborationRestGetcollaborationrolemethodsPost($roleId = null, $collaborationId = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationrolemethodsPost'][0])
    {
        list($response) = $this->usersCollaborationRestGetcollaborationrolemethodsPostWithHttpInfo($roleId, $collaborationId, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestGetcollaborationrolemethodsPostWithHttpInfo
     *
     * @param  int $roleId (optional)
     * @param  int $collaborationId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationrolemethodsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestGetcollaborationrolemethodsPostWithHttpInfo($roleId = null, $collaborationId = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationrolemethodsPost'][0])
    {
        $request = $this->usersCollaborationRestGetcollaborationrolemethodsPostRequest($roleId, $collaborationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestGetcollaborationrolemethodsPostAsync
     *
     * @param  int $roleId (optional)
     * @param  int $collaborationId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationrolemethodsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetcollaborationrolemethodsPostAsync($roleId = null, $collaborationId = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationrolemethodsPost'][0])
    {
        return $this->usersCollaborationRestGetcollaborationrolemethodsPostAsyncWithHttpInfo($roleId, $collaborationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestGetcollaborationrolemethodsPostAsyncWithHttpInfo
     *
     * @param  int $roleId (optional)
     * @param  int $collaborationId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationrolemethodsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetcollaborationrolemethodsPostAsyncWithHttpInfo($roleId = null, $collaborationId = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationrolemethodsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerListResponse';
        $request = $this->usersCollaborationRestGetcollaborationrolemethodsPostRequest($roleId, $collaborationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestGetcollaborationrolemethodsPost'
     *
     * @param  int $roleId (optional)
     * @param  int $collaborationId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationrolemethodsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestGetcollaborationrolemethodsPostRequest($roleId = null, $collaborationId = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationrolemethodsPost'][0])
    {

        if ($roleId !== null && $roleId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$roleId" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationrolemethodsPost, must be smaller than or equal to 2147483647.');
        }
        if ($roleId !== null && $roleId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$roleId" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationrolemethodsPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($collaborationId !== null && $collaborationId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$collaborationId" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationrolemethodsPost, must be smaller than or equal to 2147483647.');
        }
        if ($collaborationId !== null && $collaborationId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$collaborationId" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationrolemethodsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/getcollaborationrolemethods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($roleId !== null) {
            $formParams['roleId'] = ObjectSerializer::toFormValue($roleId);
        }
        // form params
        if ($collaborationId !== null) {
            $formParams['collaborationId'] = ObjectSerializer::toFormValue($collaborationId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestGetcollaborationsPost
     *
     * @param  int $id id (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse
     */
    public function usersCollaborationRestGetcollaborationsPost($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationsPost'][0])
    {
        list($response) = $this->usersCollaborationRestGetcollaborationsPostWithHttpInfo($id, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestGetcollaborationsPostWithHttpInfo
     *
     * @param  int $id (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestGetcollaborationsPostWithHttpInfo($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationsPost'][0])
    {
        $request = $this->usersCollaborationRestGetcollaborationsPostRequest($id, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestGetcollaborationsPostAsync
     *
     * @param  int $id (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetcollaborationsPostAsync($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationsPost'][0])
    {
        return $this->usersCollaborationRestGetcollaborationsPostAsyncWithHttpInfo($id, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestGetcollaborationsPostAsyncWithHttpInfo
     *
     * @param  int $id (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetcollaborationsPostAsyncWithHttpInfo($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse';
        $request = $this->usersCollaborationRestGetcollaborationsPostRequest($id, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestGetcollaborationsPost'
     *
     * @param  int $id (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetcollaborationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestGetcollaborationsPostRequest($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetcollaborationsPost'][0])
    {

        if ($id !== null && $id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationsPost, must be smaller than or equal to 2147483647.');
        }
        if ($id !== null && $id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationsPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationsPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestGetcollaborationsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/getcollaborations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestGetmemberresourcesPost
     *
     * @param  int $memberId memberId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetmemberresourcesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses
     */
    public function usersCollaborationRestGetmemberresourcesPost($memberId = null, string $contentType = self::contentTypes['usersCollaborationRestGetmemberresourcesPost'][0])
    {
        list($response) = $this->usersCollaborationRestGetmemberresourcesPostWithHttpInfo($memberId, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestGetmemberresourcesPostWithHttpInfo
     *
     * @param  int $memberId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetmemberresourcesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestGetmemberresourcesPostWithHttpInfo($memberId = null, string $contentType = self::contentTypes['usersCollaborationRestGetmemberresourcesPost'][0])
    {
        $request = $this->usersCollaborationRestGetmemberresourcesPostRequest($memberId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestGetmemberresourcesPostAsync
     *
     * @param  int $memberId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetmemberresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetmemberresourcesPostAsync($memberId = null, string $contentType = self::contentTypes['usersCollaborationRestGetmemberresourcesPost'][0])
    {
        return $this->usersCollaborationRestGetmemberresourcesPostAsyncWithHttpInfo($memberId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestGetmemberresourcesPostAsyncWithHttpInfo
     *
     * @param  int $memberId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetmemberresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetmemberresourcesPostAsyncWithHttpInfo($memberId = null, string $contentType = self::contentTypes['usersCollaborationRestGetmemberresourcesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses';
        $request = $this->usersCollaborationRestGetmemberresourcesPostRequest($memberId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestGetmemberresourcesPost'
     *
     * @param  int $memberId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetmemberresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestGetmemberresourcesPostRequest($memberId = null, string $contentType = self::contentTypes['usersCollaborationRestGetmemberresourcesPost'][0])
    {

        if ($memberId !== null && $memberId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$memberId" when calling CollaborationServiceApi.usersCollaborationRestGetmemberresourcesPost, must be smaller than or equal to 2147483647.');
        }
        if ($memberId !== null && $memberId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$memberId" when calling CollaborationServiceApi.usersCollaborationRestGetmemberresourcesPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/getmemberresources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($memberId !== null) {
            $formParams['memberId'] = ObjectSerializer::toFormValue($memberId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestGetmembersPost
     *
     * @param  int $id id (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetmembersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse
     */
    public function usersCollaborationRestGetmembersPost($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetmembersPost'][0])
    {
        list($response) = $this->usersCollaborationRestGetmembersPostWithHttpInfo($id, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestGetmembersPostWithHttpInfo
     *
     * @param  int $id (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetmembersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestGetmembersPostWithHttpInfo($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetmembersPost'][0])
    {
        $request = $this->usersCollaborationRestGetmembersPostRequest($id, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestGetmembersPostAsync
     *
     * @param  int $id (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetmembersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetmembersPostAsync($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetmembersPost'][0])
    {
        return $this->usersCollaborationRestGetmembersPostAsyncWithHttpInfo($id, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestGetmembersPostAsyncWithHttpInfo
     *
     * @param  int $id (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetmembersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetmembersPostAsyncWithHttpInfo($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetmembersPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationsResponse';
        $request = $this->usersCollaborationRestGetmembersPostRequest($id, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestGetmembersPost'
     *
     * @param  int $id (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetmembersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestGetmembersPostRequest($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetmembersPost'][0])
    {

        if ($id !== null && $id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestGetmembersPost, must be smaller than or equal to 2147483647.');
        }
        if ($id !== null && $id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestGetmembersPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestGetmembersPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestGetmembersPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/getmembers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestGetpoliciesPost
     *
     * @param  int $id id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetpoliciesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponsePoliciesResponse
     */
    public function usersCollaborationRestGetpoliciesPost($id = null, string $contentType = self::contentTypes['usersCollaborationRestGetpoliciesPost'][0])
    {
        list($response) = $this->usersCollaborationRestGetpoliciesPostWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestGetpoliciesPostWithHttpInfo
     *
     * @param  int $id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetpoliciesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponsePoliciesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestGetpoliciesPostWithHttpInfo($id = null, string $contentType = self::contentTypes['usersCollaborationRestGetpoliciesPost'][0])
    {
        $request = $this->usersCollaborationRestGetpoliciesPostRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePoliciesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePoliciesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePoliciesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePoliciesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePoliciesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestGetpoliciesPostAsync
     *
     * @param  int $id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetpoliciesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetpoliciesPostAsync($id = null, string $contentType = self::contentTypes['usersCollaborationRestGetpoliciesPost'][0])
    {
        return $this->usersCollaborationRestGetpoliciesPostAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestGetpoliciesPostAsyncWithHttpInfo
     *
     * @param  int $id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetpoliciesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetpoliciesPostAsyncWithHttpInfo($id = null, string $contentType = self::contentTypes['usersCollaborationRestGetpoliciesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponsePoliciesResponse';
        $request = $this->usersCollaborationRestGetpoliciesPostRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestGetpoliciesPost'
     *
     * @param  int $id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetpoliciesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestGetpoliciesPostRequest($id = null, string $contentType = self::contentTypes['usersCollaborationRestGetpoliciesPost'][0])
    {

        if ($id !== null && $id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestGetpoliciesPost, must be smaller than or equal to 2147483647.');
        }
        if ($id !== null && $id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestGetpoliciesPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/getpolicies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestGetpolicymethodsPost
     *
     * @param  int $policyId policyId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetpolicymethodsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse
     */
    public function usersCollaborationRestGetpolicymethodsPost($policyId = null, string $contentType = self::contentTypes['usersCollaborationRestGetpolicymethodsPost'][0])
    {
        list($response) = $this->usersCollaborationRestGetpolicymethodsPostWithHttpInfo($policyId, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestGetpolicymethodsPostWithHttpInfo
     *
     * @param  int $policyId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetpolicymethodsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestGetpolicymethodsPostWithHttpInfo($policyId = null, string $contentType = self::contentTypes['usersCollaborationRestGetpolicymethodsPost'][0])
    {
        $request = $this->usersCollaborationRestGetpolicymethodsPostRequest($policyId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestGetpolicymethodsPostAsync
     *
     * @param  int $policyId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetpolicymethodsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetpolicymethodsPostAsync($policyId = null, string $contentType = self::contentTypes['usersCollaborationRestGetpolicymethodsPost'][0])
    {
        return $this->usersCollaborationRestGetpolicymethodsPostAsyncWithHttpInfo($policyId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestGetpolicymethodsPostAsyncWithHttpInfo
     *
     * @param  int $policyId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetpolicymethodsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetpolicymethodsPostAsyncWithHttpInfo($policyId = null, string $contentType = self::contentTypes['usersCollaborationRestGetpolicymethodsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse';
        $request = $this->usersCollaborationRestGetpolicymethodsPostRequest($policyId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestGetpolicymethodsPost'
     *
     * @param  int $policyId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetpolicymethodsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestGetpolicymethodsPostRequest($policyId = null, string $contentType = self::contentTypes['usersCollaborationRestGetpolicymethodsPost'][0])
    {

        if ($policyId !== null && $policyId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$policyId" when calling CollaborationServiceApi.usersCollaborationRestGetpolicymethodsPost, must be smaller than or equal to 2147483647.');
        }
        if ($policyId !== null && $policyId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$policyId" when calling CollaborationServiceApi.usersCollaborationRestGetpolicymethodsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/getpolicymethods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($policyId !== null) {
            $formParams['policyId'] = ObjectSerializer::toFormValue($policyId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestGetresourcerolesPost
     *
     * @param  string $resourceId resourceId (required)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $resourceType resourceType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetresourcerolesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses
     */
    public function usersCollaborationRestGetresourcerolesPost($resourceId, $ownerUid = null, $resourceType = null, string $contentType = self::contentTypes['usersCollaborationRestGetresourcerolesPost'][0])
    {
        list($response) = $this->usersCollaborationRestGetresourcerolesPostWithHttpInfo($resourceId, $ownerUid, $resourceType, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestGetresourcerolesPostWithHttpInfo
     *
     * @param  string $resourceId (required)
     * @param  int $ownerUid (optional)
     * @param  string $resourceType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetresourcerolesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestGetresourcerolesPostWithHttpInfo($resourceId, $ownerUid = null, $resourceType = null, string $contentType = self::contentTypes['usersCollaborationRestGetresourcerolesPost'][0])
    {
        $request = $this->usersCollaborationRestGetresourcerolesPostRequest($resourceId, $ownerUid, $resourceType, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestGetresourcerolesPostAsync
     *
     * @param  string $resourceId (required)
     * @param  int $ownerUid (optional)
     * @param  string $resourceType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetresourcerolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetresourcerolesPostAsync($resourceId, $ownerUid = null, $resourceType = null, string $contentType = self::contentTypes['usersCollaborationRestGetresourcerolesPost'][0])
    {
        return $this->usersCollaborationRestGetresourcerolesPostAsyncWithHttpInfo($resourceId, $ownerUid, $resourceType, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestGetresourcerolesPostAsyncWithHttpInfo
     *
     * @param  string $resourceId (required)
     * @param  int $ownerUid (optional)
     * @param  string $resourceType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetresourcerolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetresourcerolesPostAsyncWithHttpInfo($resourceId, $ownerUid = null, $resourceType = null, string $contentType = self::contentTypes['usersCollaborationRestGetresourcerolesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses';
        $request = $this->usersCollaborationRestGetresourcerolesPostRequest($resourceId, $ownerUid, $resourceType, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestGetresourcerolesPost'
     *
     * @param  string $resourceId (required)
     * @param  int $ownerUid (optional)
     * @param  string $resourceType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetresourcerolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestGetresourcerolesPostRequest($resourceId, $ownerUid = null, $resourceType = null, string $contentType = self::contentTypes['usersCollaborationRestGetresourcerolesPost'][0])
    {

        // verify the required parameter 'resourceId' is set
        if ($resourceId === null || (is_array($resourceId) && count($resourceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resourceId when calling usersCollaborationRestGetresourcerolesPost'
            );
        }
        if (strlen($resourceId) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$resourceId" when calling CollaborationServiceApi.usersCollaborationRestGetresourcerolesPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $resourceId)) {
            throw new \InvalidArgumentException("invalid value for \"resourceId\" when calling CollaborationServiceApi.usersCollaborationRestGetresourcerolesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestGetresourcerolesPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestGetresourcerolesPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($resourceType !== null && strlen($resourceType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$resourceType" when calling CollaborationServiceApi.usersCollaborationRestGetresourcerolesPost, must be smaller than or equal to 2147483647.');
        }
        if ($resourceType !== null && !preg_match("/(.*){0,2147483647}/", $resourceType)) {
            throw new \InvalidArgumentException("invalid value for \"resourceType\" when calling CollaborationServiceApi.usersCollaborationRestGetresourcerolesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/collaboration/rest/getresourceroles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($resourceId !== null) {
            $formParams['resourceId'] = ObjectSerializer::toFormValue($resourceId);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }
        // form params
        if ($resourceType !== null) {
            $formParams['resourceType'] = ObjectSerializer::toFormValue($resourceType);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestGetrolesPost
     *
     * @param  int $id id (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetrolesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRolesResponse
     */
    public function usersCollaborationRestGetrolesPost($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetrolesPost'][0])
    {
        list($response) = $this->usersCollaborationRestGetrolesPostWithHttpInfo($id, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestGetrolesPostWithHttpInfo
     *
     * @param  int $id (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetrolesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRolesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestGetrolesPostWithHttpInfo($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetrolesPost'][0])
    {
        $request = $this->usersCollaborationRestGetrolesPostRequest($id, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRolesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRolesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRolesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRolesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRolesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestGetrolesPostAsync
     *
     * @param  int $id (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetrolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetrolesPostAsync($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetrolesPost'][0])
    {
        return $this->usersCollaborationRestGetrolesPostAsyncWithHttpInfo($id, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestGetrolesPostAsyncWithHttpInfo
     *
     * @param  int $id (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetrolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestGetrolesPostAsyncWithHttpInfo($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetrolesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationRolesResponse';
        $request = $this->usersCollaborationRestGetrolesPostRequest($id, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestGetrolesPost'
     *
     * @param  int $id (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestGetrolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestGetrolesPostRequest($id = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestGetrolesPost'][0])
    {

        if ($id !== null && $id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestGetrolesPost, must be smaller than or equal to 2147483647.');
        }
        if ($id !== null && $id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestGetrolesPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestGetrolesPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestGetrolesPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/getroles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestInvitememberPost
     *
     * @param  string $email email (required)
     * @param  string $displayName displayName (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestInvitememberPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse
     */
    public function usersCollaborationRestInvitememberPost($email, $displayName = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestInvitememberPost'][0])
    {
        list($response) = $this->usersCollaborationRestInvitememberPostWithHttpInfo($email, $displayName, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestInvitememberPostWithHttpInfo
     *
     * @param  string $email (required)
     * @param  string $displayName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestInvitememberPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestInvitememberPostWithHttpInfo($email, $displayName = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestInvitememberPost'][0])
    {
        $request = $this->usersCollaborationRestInvitememberPostRequest($email, $displayName, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestInvitememberPostAsync
     *
     * @param  string $email (required)
     * @param  string $displayName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestInvitememberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestInvitememberPostAsync($email, $displayName = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestInvitememberPost'][0])
    {
        return $this->usersCollaborationRestInvitememberPostAsyncWithHttpInfo($email, $displayName, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestInvitememberPostAsyncWithHttpInfo
     *
     * @param  string $email (required)
     * @param  string $displayName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestInvitememberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestInvitememberPostAsyncWithHttpInfo($email, $displayName = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestInvitememberPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResponse';
        $request = $this->usersCollaborationRestInvitememberPostRequest($email, $displayName, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestInvitememberPost'
     *
     * @param  string $email (required)
     * @param  string $displayName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestInvitememberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestInvitememberPostRequest($email, $displayName = null, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestInvitememberPost'][0])
    {

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling usersCollaborationRestInvitememberPost'
            );
        }
        if (strlen($email) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$email" when calling CollaborationServiceApi.usersCollaborationRestInvitememberPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $email)) {
            throw new \InvalidArgumentException("invalid value for \"email\" when calling CollaborationServiceApi.usersCollaborationRestInvitememberPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($displayName !== null && strlen($displayName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$displayName" when calling CollaborationServiceApi.usersCollaborationRestInvitememberPost, must be smaller than or equal to 2147483647.');
        }
        if ($displayName !== null && !preg_match("/(.*){0,2147483647}/", $displayName)) {
            throw new \InvalidArgumentException("invalid value for \"displayName\" when calling CollaborationServiceApi.usersCollaborationRestInvitememberPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestInvitememberPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestInvitememberPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/invitemember';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($displayName !== null) {
            $formParams['displayName'] = ObjectSerializer::toFormValue($displayName);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestLeavecollaborationPost
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestLeavecollaborationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function usersCollaborationRestLeavecollaborationPost($id, string $contentType = self::contentTypes['usersCollaborationRestLeavecollaborationPost'][0])
    {
        list($response) = $this->usersCollaborationRestLeavecollaborationPostWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestLeavecollaborationPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestLeavecollaborationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestLeavecollaborationPostWithHttpInfo($id, string $contentType = self::contentTypes['usersCollaborationRestLeavecollaborationPost'][0])
    {
        $request = $this->usersCollaborationRestLeavecollaborationPostRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestLeavecollaborationPostAsync
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestLeavecollaborationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestLeavecollaborationPostAsync($id, string $contentType = self::contentTypes['usersCollaborationRestLeavecollaborationPost'][0])
    {
        return $this->usersCollaborationRestLeavecollaborationPostAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestLeavecollaborationPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestLeavecollaborationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestLeavecollaborationPostAsyncWithHttpInfo($id, string $contentType = self::contentTypes['usersCollaborationRestLeavecollaborationPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->usersCollaborationRestLeavecollaborationPostRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestLeavecollaborationPost'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestLeavecollaborationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestLeavecollaborationPostRequest($id, string $contentType = self::contentTypes['usersCollaborationRestLeavecollaborationPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersCollaborationRestLeavecollaborationPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestLeavecollaborationPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestLeavecollaborationPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/leavecollaboration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestRejectcollaborationPost
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestRejectcollaborationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function usersCollaborationRestRejectcollaborationPost($id, string $contentType = self::contentTypes['usersCollaborationRestRejectcollaborationPost'][0])
    {
        list($response) = $this->usersCollaborationRestRejectcollaborationPostWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestRejectcollaborationPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestRejectcollaborationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestRejectcollaborationPostWithHttpInfo($id, string $contentType = self::contentTypes['usersCollaborationRestRejectcollaborationPost'][0])
    {
        $request = $this->usersCollaborationRestRejectcollaborationPostRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestRejectcollaborationPostAsync
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestRejectcollaborationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestRejectcollaborationPostAsync($id, string $contentType = self::contentTypes['usersCollaborationRestRejectcollaborationPost'][0])
    {
        return $this->usersCollaborationRestRejectcollaborationPostAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestRejectcollaborationPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestRejectcollaborationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestRejectcollaborationPostAsyncWithHttpInfo($id, string $contentType = self::contentTypes['usersCollaborationRestRejectcollaborationPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->usersCollaborationRestRejectcollaborationPostRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestRejectcollaborationPost'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestRejectcollaborationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestRejectcollaborationPostRequest($id, string $contentType = self::contentTypes['usersCollaborationRestRejectcollaborationPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersCollaborationRestRejectcollaborationPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestRejectcollaborationPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestRejectcollaborationPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/rejectcollaboration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestResendmemberinvitationPost
     *
     * @param  int $id id (required)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestResendmemberinvitationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function usersCollaborationRestResendmemberinvitationPost($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestResendmemberinvitationPost'][0])
    {
        list($response) = $this->usersCollaborationRestResendmemberinvitationPostWithHttpInfo($id, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestResendmemberinvitationPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestResendmemberinvitationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestResendmemberinvitationPostWithHttpInfo($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestResendmemberinvitationPost'][0])
    {
        $request = $this->usersCollaborationRestResendmemberinvitationPostRequest($id, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestResendmemberinvitationPostAsync
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestResendmemberinvitationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestResendmemberinvitationPostAsync($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestResendmemberinvitationPost'][0])
    {
        return $this->usersCollaborationRestResendmemberinvitationPostAsyncWithHttpInfo($id, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestResendmemberinvitationPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestResendmemberinvitationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestResendmemberinvitationPostAsyncWithHttpInfo($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestResendmemberinvitationPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->usersCollaborationRestResendmemberinvitationPostRequest($id, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestResendmemberinvitationPost'
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestResendmemberinvitationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestResendmemberinvitationPostRequest($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestResendmemberinvitationPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersCollaborationRestResendmemberinvitationPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestResendmemberinvitationPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestResendmemberinvitationPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestResendmemberinvitationPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestResendmemberinvitationPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/resendmemberinvitation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestSetresourcePost
     *
     * @param  string $resourceId resourceId (required)
     * @param  string $roleIds roleIds (required)
     * @param  int $collaborationId collaborationId (required)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $resourceType resourceType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSetresourcePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponse
     */
    public function usersCollaborationRestSetresourcePost($resourceId, $roleIds, $collaborationId, $ownerUid = null, $resourceType = null, string $contentType = self::contentTypes['usersCollaborationRestSetresourcePost'][0])
    {
        list($response) = $this->usersCollaborationRestSetresourcePostWithHttpInfo($resourceId, $roleIds, $collaborationId, $ownerUid, $resourceType, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestSetresourcePostWithHttpInfo
     *
     * @param  string $resourceId (required)
     * @param  string $roleIds (required)
     * @param  int $collaborationId (required)
     * @param  int $ownerUid (optional)
     * @param  string $resourceType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSetresourcePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestSetresourcePostWithHttpInfo($resourceId, $roleIds, $collaborationId, $ownerUid = null, $resourceType = null, string $contentType = self::contentTypes['usersCollaborationRestSetresourcePost'][0])
    {
        $request = $this->usersCollaborationRestSetresourcePostRequest($resourceId, $roleIds, $collaborationId, $ownerUid, $resourceType, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestSetresourcePostAsync
     *
     * @param  string $resourceId (required)
     * @param  string $roleIds (required)
     * @param  int $collaborationId (required)
     * @param  int $ownerUid (optional)
     * @param  string $resourceType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSetresourcePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestSetresourcePostAsync($resourceId, $roleIds, $collaborationId, $ownerUid = null, $resourceType = null, string $contentType = self::contentTypes['usersCollaborationRestSetresourcePost'][0])
    {
        return $this->usersCollaborationRestSetresourcePostAsyncWithHttpInfo($resourceId, $roleIds, $collaborationId, $ownerUid, $resourceType, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestSetresourcePostAsyncWithHttpInfo
     *
     * @param  string $resourceId (required)
     * @param  string $roleIds (required)
     * @param  int $collaborationId (required)
     * @param  int $ownerUid (optional)
     * @param  string $resourceType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSetresourcePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestSetresourcePostAsyncWithHttpInfo($resourceId, $roleIds, $collaborationId, $ownerUid = null, $resourceType = null, string $contentType = self::contentTypes['usersCollaborationRestSetresourcePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponse';
        $request = $this->usersCollaborationRestSetresourcePostRequest($resourceId, $roleIds, $collaborationId, $ownerUid, $resourceType, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestSetresourcePost'
     *
     * @param  string $resourceId (required)
     * @param  string $roleIds (required)
     * @param  int $collaborationId (required)
     * @param  int $ownerUid (optional)
     * @param  string $resourceType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSetresourcePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestSetresourcePostRequest($resourceId, $roleIds, $collaborationId, $ownerUid = null, $resourceType = null, string $contentType = self::contentTypes['usersCollaborationRestSetresourcePost'][0])
    {

        // verify the required parameter 'resourceId' is set
        if ($resourceId === null || (is_array($resourceId) && count($resourceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resourceId when calling usersCollaborationRestSetresourcePost'
            );
        }
        if (strlen($resourceId) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$resourceId" when calling CollaborationServiceApi.usersCollaborationRestSetresourcePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $resourceId)) {
            throw new \InvalidArgumentException("invalid value for \"resourceId\" when calling CollaborationServiceApi.usersCollaborationRestSetresourcePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'roleIds' is set
        if ($roleIds === null || (is_array($roleIds) && count($roleIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $roleIds when calling usersCollaborationRestSetresourcePost'
            );
        }
        if (strlen($roleIds) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$roleIds" when calling CollaborationServiceApi.usersCollaborationRestSetresourcePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $roleIds)) {
            throw new \InvalidArgumentException("invalid value for \"roleIds\" when calling CollaborationServiceApi.usersCollaborationRestSetresourcePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'collaborationId' is set
        if ($collaborationId === null || (is_array($collaborationId) && count($collaborationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collaborationId when calling usersCollaborationRestSetresourcePost'
            );
        }
        if ($collaborationId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$collaborationId" when calling CollaborationServiceApi.usersCollaborationRestSetresourcePost, must be smaller than or equal to 2147483647.');
        }
        if ($collaborationId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$collaborationId" when calling CollaborationServiceApi.usersCollaborationRestSetresourcePost, must be bigger than or equal to -2147483648.');
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestSetresourcePost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestSetresourcePost, must be bigger than or equal to -2147483648.');
        }
        
        if ($resourceType !== null && strlen($resourceType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$resourceType" when calling CollaborationServiceApi.usersCollaborationRestSetresourcePost, must be smaller than or equal to 2147483647.');
        }
        if ($resourceType !== null && !preg_match("/(.*){0,2147483647}/", $resourceType)) {
            throw new \InvalidArgumentException("invalid value for \"resourceType\" when calling CollaborationServiceApi.usersCollaborationRestSetresourcePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/collaboration/rest/setresource';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($resourceId !== null) {
            $formParams['resourceId'] = ObjectSerializer::toFormValue($resourceId);
        }
        // form params
        if ($roleIds !== null) {
            $formParams['roleIds'] = ObjectSerializer::toFormValue($roleIds);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }
        // form params
        if ($collaborationId !== null) {
            $formParams['collaborationId'] = ObjectSerializer::toFormValue($collaborationId);
        }
        // form params
        if ($resourceType !== null) {
            $formParams['resourceType'] = ObjectSerializer::toFormValue($resourceType);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestSetresourcesPost
     *
     * @param  string $resources resources (required)
     * @param  int $collaborationId collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSetresourcesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses
     */
    public function usersCollaborationRestSetresourcesPost($resources, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestSetresourcesPost'][0])
    {
        list($response) = $this->usersCollaborationRestSetresourcesPostWithHttpInfo($resources, $collaborationId, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestSetresourcesPostWithHttpInfo
     *
     * @param  string $resources (required)
     * @param  int $collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSetresourcesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestSetresourcesPostWithHttpInfo($resources, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestSetresourcesPost'][0])
    {
        $request = $this->usersCollaborationRestSetresourcesPostRequest($resources, $collaborationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestSetresourcesPostAsync
     *
     * @param  string $resources (required)
     * @param  int $collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSetresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestSetresourcesPostAsync($resources, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestSetresourcesPost'][0])
    {
        return $this->usersCollaborationRestSetresourcesPostAsyncWithHttpInfo($resources, $collaborationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestSetresourcesPostAsyncWithHttpInfo
     *
     * @param  string $resources (required)
     * @param  int $collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSetresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestSetresourcesPostAsyncWithHttpInfo($resources, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestSetresourcesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseCollaborationResourceResponses';
        $request = $this->usersCollaborationRestSetresourcesPostRequest($resources, $collaborationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestSetresourcesPost'
     *
     * @param  string $resources (required)
     * @param  int $collaborationId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSetresourcesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestSetresourcesPostRequest($resources, $collaborationId, string $contentType = self::contentTypes['usersCollaborationRestSetresourcesPost'][0])
    {

        // verify the required parameter 'resources' is set
        if ($resources === null || (is_array($resources) && count($resources) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resources when calling usersCollaborationRestSetresourcesPost'
            );
        }
        if (strlen($resources) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$resources" when calling CollaborationServiceApi.usersCollaborationRestSetresourcesPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $resources)) {
            throw new \InvalidArgumentException("invalid value for \"resources\" when calling CollaborationServiceApi.usersCollaborationRestSetresourcesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'collaborationId' is set
        if ($collaborationId === null || (is_array($collaborationId) && count($collaborationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collaborationId when calling usersCollaborationRestSetresourcesPost'
            );
        }
        if ($collaborationId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$collaborationId" when calling CollaborationServiceApi.usersCollaborationRestSetresourcesPost, must be smaller than or equal to 2147483647.');
        }
        if ($collaborationId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$collaborationId" when calling CollaborationServiceApi.usersCollaborationRestSetresourcesPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/setresources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($resources !== null) {
            $formParams['resources'] = ObjectSerializer::toFormValue($resources);
        }
        // form params
        if ($collaborationId !== null) {
            $formParams['collaborationId'] = ObjectSerializer::toFormValue($collaborationId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersCollaborationRestSuspendmemberPost
     *
     * @param  int $id id (required)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSuspendmemberPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function usersCollaborationRestSuspendmemberPost($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestSuspendmemberPost'][0])
    {
        list($response) = $this->usersCollaborationRestSuspendmemberPostWithHttpInfo($id, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation usersCollaborationRestSuspendmemberPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSuspendmemberPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCollaborationRestSuspendmemberPostWithHttpInfo($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestSuspendmemberPost'][0])
    {
        $request = $this->usersCollaborationRestSuspendmemberPostRequest($id, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersCollaborationRestSuspendmemberPostAsync
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSuspendmemberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestSuspendmemberPostAsync($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestSuspendmemberPost'][0])
    {
        return $this->usersCollaborationRestSuspendmemberPostAsyncWithHttpInfo($id, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersCollaborationRestSuspendmemberPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSuspendmemberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersCollaborationRestSuspendmemberPostAsyncWithHttpInfo($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestSuspendmemberPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->usersCollaborationRestSuspendmemberPostRequest($id, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersCollaborationRestSuspendmemberPost'
     *
     * @param  int $id (required)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersCollaborationRestSuspendmemberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersCollaborationRestSuspendmemberPostRequest($id, $ownerUid = null, string $contentType = self::contentTypes['usersCollaborationRestSuspendmemberPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersCollaborationRestSuspendmemberPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestSuspendmemberPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling CollaborationServiceApi.usersCollaborationRestSuspendmemberPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestSuspendmemberPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling CollaborationServiceApi.usersCollaborationRestSuspendmemberPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/users/collaboration/rest/suspendmember';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
