<?php
/**
 * AccountServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AccountServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'billingAccountRestGetaccountPost' => [
            'application/x-www-form-urlencoded',
        ],
        'billingAccountRestGetextendedaccountbillinghistorybyperiodPost' => [
            'application/x-www-form-urlencoded',
        ],
        'billingAccountRestGetquotasPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersAccountRestGetuserinfoPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersAccountRestRecoverpasswordPost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation billingAccountRestGetaccountPost
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetaccountPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerBillingResponseAccountResponse
     */
    public function billingAccountRestGetaccountPost(string $contentType = self::contentTypes['billingAccountRestGetaccountPost'][0])
    {
        list($response) = $this->billingAccountRestGetaccountPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation billingAccountRestGetaccountPostWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetaccountPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerBillingResponseAccountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingAccountRestGetaccountPostWithHttpInfo(string $contentType = self::contentTypes['billingAccountRestGetaccountPost'][0])
    {
        $request = $this->billingAccountRestGetaccountPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerBillingResponseAccountResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerBillingResponseAccountResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerBillingResponseAccountResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerBillingResponseAccountResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerBillingResponseAccountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation billingAccountRestGetaccountPostAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetaccountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingAccountRestGetaccountPostAsync(string $contentType = self::contentTypes['billingAccountRestGetaccountPost'][0])
    {
        return $this->billingAccountRestGetaccountPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingAccountRestGetaccountPostAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetaccountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingAccountRestGetaccountPostAsyncWithHttpInfo(string $contentType = self::contentTypes['billingAccountRestGetaccountPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerBillingResponseAccountResponse';
        $request = $this->billingAccountRestGetaccountPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingAccountRestGetaccountPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetaccountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingAccountRestGetaccountPostRequest(string $contentType = self::contentTypes['billingAccountRestGetaccountPost'][0])
    {


        $resourcePath = '/billing/account/rest/getaccount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingAccountRestGetextendedaccountbillinghistorybyperiodPost
     *
     * @param  string $endtime endtime (required)
     * @param  string $starttime starttime (required)
     * @param  string $targetAppid targetAppid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetextendedaccountbillinghistorybyperiodPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function billingAccountRestGetextendedaccountbillinghistorybyperiodPost($endtime, $starttime, $targetAppid = null, string $contentType = self::contentTypes['billingAccountRestGetextendedaccountbillinghistorybyperiodPost'][0])
    {
        list($response) = $this->billingAccountRestGetextendedaccountbillinghistorybyperiodPostWithHttpInfo($endtime, $starttime, $targetAppid, $contentType);
        return $response;
    }

    /**
     * Operation billingAccountRestGetextendedaccountbillinghistorybyperiodPostWithHttpInfo
     *
     * @param  string $endtime (required)
     * @param  string $starttime (required)
     * @param  string $targetAppid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetextendedaccountbillinghistorybyperiodPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingAccountRestGetextendedaccountbillinghistorybyperiodPostWithHttpInfo($endtime, $starttime, $targetAppid = null, string $contentType = self::contentTypes['billingAccountRestGetextendedaccountbillinghistorybyperiodPost'][0])
    {
        $request = $this->billingAccountRestGetextendedaccountbillinghistorybyperiodPostRequest($endtime, $starttime, $targetAppid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation billingAccountRestGetextendedaccountbillinghistorybyperiodPostAsync
     *
     * @param  string $endtime (required)
     * @param  string $starttime (required)
     * @param  string $targetAppid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetextendedaccountbillinghistorybyperiodPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingAccountRestGetextendedaccountbillinghistorybyperiodPostAsync($endtime, $starttime, $targetAppid = null, string $contentType = self::contentTypes['billingAccountRestGetextendedaccountbillinghistorybyperiodPost'][0])
    {
        return $this->billingAccountRestGetextendedaccountbillinghistorybyperiodPostAsyncWithHttpInfo($endtime, $starttime, $targetAppid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingAccountRestGetextendedaccountbillinghistorybyperiodPostAsyncWithHttpInfo
     *
     * @param  string $endtime (required)
     * @param  string $starttime (required)
     * @param  string $targetAppid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetextendedaccountbillinghistorybyperiodPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingAccountRestGetextendedaccountbillinghistorybyperiodPostAsyncWithHttpInfo($endtime, $starttime, $targetAppid = null, string $contentType = self::contentTypes['billingAccountRestGetextendedaccountbillinghistorybyperiodPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->billingAccountRestGetextendedaccountbillinghistorybyperiodPostRequest($endtime, $starttime, $targetAppid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingAccountRestGetextendedaccountbillinghistorybyperiodPost'
     *
     * @param  string $endtime (required)
     * @param  string $starttime (required)
     * @param  string $targetAppid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetextendedaccountbillinghistorybyperiodPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingAccountRestGetextendedaccountbillinghistorybyperiodPostRequest($endtime, $starttime, $targetAppid = null, string $contentType = self::contentTypes['billingAccountRestGetextendedaccountbillinghistorybyperiodPost'][0])
    {

        // verify the required parameter 'endtime' is set
        if ($endtime === null || (is_array($endtime) && count($endtime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endtime when calling billingAccountRestGetextendedaccountbillinghistorybyperiodPost'
            );
        }
        if (strlen($endtime) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$endtime" when calling AccountServiceApi.billingAccountRestGetextendedaccountbillinghistorybyperiodPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $endtime)) {
            throw new \InvalidArgumentException("invalid value for \"endtime\" when calling AccountServiceApi.billingAccountRestGetextendedaccountbillinghistorybyperiodPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'starttime' is set
        if ($starttime === null || (is_array($starttime) && count($starttime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $starttime when calling billingAccountRestGetextendedaccountbillinghistorybyperiodPost'
            );
        }
        if (strlen($starttime) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$starttime" when calling AccountServiceApi.billingAccountRestGetextendedaccountbillinghistorybyperiodPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $starttime)) {
            throw new \InvalidArgumentException("invalid value for \"starttime\" when calling AccountServiceApi.billingAccountRestGetextendedaccountbillinghistorybyperiodPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($targetAppid !== null && strlen($targetAppid) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$targetAppid" when calling AccountServiceApi.billingAccountRestGetextendedaccountbillinghistorybyperiodPost, must be smaller than or equal to 2147483647.');
        }
        if ($targetAppid !== null && !preg_match("/(.*){0,2147483647}/", $targetAppid)) {
            throw new \InvalidArgumentException("invalid value for \"targetAppid\" when calling AccountServiceApi.billingAccountRestGetextendedaccountbillinghistorybyperiodPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/billing/account/rest/getextendedaccountbillinghistorybyperiod';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($endtime !== null) {
            $formParams['endtime'] = ObjectSerializer::toFormValue($endtime);
        }
        // form params
        if ($starttime !== null) {
            $formParams['starttime'] = ObjectSerializer::toFormValue($starttime);
        }
        // form params
        if ($targetAppid !== null) {
            $formParams['targetAppid'] = ObjectSerializer::toFormValue($targetAppid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation billingAccountRestGetquotasPost
     *
     * @param  string $quotasnames quotasnames (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetquotasPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerBillingResponseArrayResponse
     */
    public function billingAccountRestGetquotasPost($quotasnames = null, string $contentType = self::contentTypes['billingAccountRestGetquotasPost'][0])
    {
        list($response) = $this->billingAccountRestGetquotasPostWithHttpInfo($quotasnames, $contentType);
        return $response;
    }

    /**
     * Operation billingAccountRestGetquotasPostWithHttpInfo
     *
     * @param  string $quotasnames (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetquotasPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerBillingResponseArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingAccountRestGetquotasPostWithHttpInfo($quotasnames = null, string $contentType = self::contentTypes['billingAccountRestGetquotasPost'][0])
    {
        $request = $this->billingAccountRestGetquotasPostRequest($quotasnames, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerBillingResponseArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerBillingResponseArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerBillingResponseArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerBillingResponseArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerBillingResponseArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation billingAccountRestGetquotasPostAsync
     *
     * @param  string $quotasnames (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetquotasPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingAccountRestGetquotasPostAsync($quotasnames = null, string $contentType = self::contentTypes['billingAccountRestGetquotasPost'][0])
    {
        return $this->billingAccountRestGetquotasPostAsyncWithHttpInfo($quotasnames, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation billingAccountRestGetquotasPostAsyncWithHttpInfo
     *
     * @param  string $quotasnames (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetquotasPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function billingAccountRestGetquotasPostAsyncWithHttpInfo($quotasnames = null, string $contentType = self::contentTypes['billingAccountRestGetquotasPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerBillingResponseArrayResponse';
        $request = $this->billingAccountRestGetquotasPostRequest($quotasnames, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'billingAccountRestGetquotasPost'
     *
     * @param  string $quotasnames (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['billingAccountRestGetquotasPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function billingAccountRestGetquotasPostRequest($quotasnames = null, string $contentType = self::contentTypes['billingAccountRestGetquotasPost'][0])
    {

        if ($quotasnames !== null && strlen($quotasnames) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$quotasnames" when calling AccountServiceApi.billingAccountRestGetquotasPost, must be smaller than or equal to 2147483647.');
        }
        if ($quotasnames !== null && !preg_match("/(.*){0,2147483647}/", $quotasnames)) {
            throw new \InvalidArgumentException("invalid value for \"quotasnames\" when calling AccountServiceApi.billingAccountRestGetquotasPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/billing/account/rest/getquotas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($quotasnames !== null) {
            $formParams['quotasnames'] = ObjectSerializer::toFormValue($quotasnames);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersAccountRestGetuserinfoPost
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAccountRestGetuserinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse
     */
    public function usersAccountRestGetuserinfoPost(string $contentType = self::contentTypes['usersAccountRestGetuserinfoPost'][0])
    {
        list($response) = $this->usersAccountRestGetuserinfoPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation usersAccountRestGetuserinfoPostWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAccountRestGetuserinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersAccountRestGetuserinfoPostWithHttpInfo(string $contentType = self::contentTypes['usersAccountRestGetuserinfoPost'][0])
    {
        $request = $this->usersAccountRestGetuserinfoPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAccountRestGetuserinfoPostAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAccountRestGetuserinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAccountRestGetuserinfoPostAsync(string $contentType = self::contentTypes['usersAccountRestGetuserinfoPost'][0])
    {
        return $this->usersAccountRestGetuserinfoPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAccountRestGetuserinfoPostAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAccountRestGetuserinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAccountRestGetuserinfoPostAsyncWithHttpInfo(string $contentType = self::contentTypes['usersAccountRestGetuserinfoPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse';
        $request = $this->usersAccountRestGetuserinfoPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersAccountRestGetuserinfoPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAccountRestGetuserinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersAccountRestGetuserinfoPostRequest(string $contentType = self::contentTypes['usersAccountRestGetuserinfoPost'][0])
    {


        $resourcePath = '/users/account/rest/getuserinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersAccountRestRecoverpasswordPost
     *
     * @param  string $email email (required)
     * @param  string $lang lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAccountRestRecoverpasswordPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function usersAccountRestRecoverpasswordPost($email, $lang = null, string $contentType = self::contentTypes['usersAccountRestRecoverpasswordPost'][0])
    {
        list($response) = $this->usersAccountRestRecoverpasswordPostWithHttpInfo($email, $lang, $contentType);
        return $response;
    }

    /**
     * Operation usersAccountRestRecoverpasswordPostWithHttpInfo
     *
     * @param  string $email (required)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAccountRestRecoverpasswordPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersAccountRestRecoverpasswordPostWithHttpInfo($email, $lang = null, string $contentType = self::contentTypes['usersAccountRestRecoverpasswordPost'][0])
    {
        $request = $this->usersAccountRestRecoverpasswordPostRequest($email, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAccountRestRecoverpasswordPostAsync
     *
     * @param  string $email (required)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAccountRestRecoverpasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAccountRestRecoverpasswordPostAsync($email, $lang = null, string $contentType = self::contentTypes['usersAccountRestRecoverpasswordPost'][0])
    {
        return $this->usersAccountRestRecoverpasswordPostAsyncWithHttpInfo($email, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAccountRestRecoverpasswordPostAsyncWithHttpInfo
     *
     * @param  string $email (required)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAccountRestRecoverpasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAccountRestRecoverpasswordPostAsyncWithHttpInfo($email, $lang = null, string $contentType = self::contentTypes['usersAccountRestRecoverpasswordPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->usersAccountRestRecoverpasswordPostRequest($email, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersAccountRestRecoverpasswordPost'
     *
     * @param  string $email (required)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAccountRestRecoverpasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersAccountRestRecoverpasswordPostRequest($email, $lang = null, string $contentType = self::contentTypes['usersAccountRestRecoverpasswordPost'][0])
    {

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling usersAccountRestRecoverpasswordPost'
            );
        }
        if (strlen($email) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$email" when calling AccountServiceApi.usersAccountRestRecoverpasswordPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $email)) {
            throw new \InvalidArgumentException("invalid value for \"email\" when calling AccountServiceApi.usersAccountRestRecoverpasswordPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($lang !== null && strlen($lang) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$lang" when calling AccountServiceApi.usersAccountRestRecoverpasswordPost, must be smaller than or equal to 2147483647.');
        }
        if ($lang !== null && !preg_match("/(.*){0,2147483647}/", $lang)) {
            throw new \InvalidArgumentException("invalid value for \"lang\" when calling AccountServiceApi.usersAccountRestRecoverpasswordPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/account/rest/recoverpassword';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($lang !== null) {
            $formParams['lang'] = ObjectSerializer::toFormValue($lang);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
