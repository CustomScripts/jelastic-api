<?php
/**
 * ControlServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ControlServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ControlServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'environmentControlRestAddcontainerenvvarsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestAddcontainervolumePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestAddcontainervolumebygroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestAddcontainervolumesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestAddendpointPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestAddenvpropertyPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestAddportredirectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestApplyenvpropertyPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestApplynodegroupdataPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestAttachenvgroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestChangetopologyPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestCheckmigrationpossibilityPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestClearlogPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestCloneenvPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestCreateenvironmentPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestDeleteenvPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestDeployappPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestDetachenvgroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestEditendpointPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestEditnodegroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestEditregistrycredentialsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestExeccmdbygroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestExeccmdbyidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetallsumstatbyuidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetbasicenvsinfoPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetcontainerentrypointPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetcontainerenvvarsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetcontainerenvvarsbygroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetcontainermanifestPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetcontainernodetagsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetcontainerruncmdPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetcontainerrunconfigPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetcontainertagsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetcontainervolumesbygroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetcontainervolumesbyidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetendpointsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetenvinfoPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetenvpropertyPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetenvsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetlogsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetlogslistPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetnodegroupsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetnodetagsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetregionsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetregionsinnerPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetregistryinfoPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetsoftwarepackagesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetsshaccessinfoPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetstatsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGetsumstatPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGettemplatemanifestPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestGettemplatesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestMigratePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestReadlogPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRedeploycontainerbyidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRedeploycontainersPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRedeploycontainersbygroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRemoveappPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRemovecontainerenvvarsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRemovecontainervolumePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRemovecontainervolumebygroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRemovecontainervolumesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRemoveendpointPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRemoveenvpropertyPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRemovelogPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRenameappPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestResetcontainerpasswordbyidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestResetcontainerspasswordbygroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestResetnodepasswordPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestResetnodepasswordbyidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestResetnodepasswordbytypePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestResetservicepasswordPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRestartcontainerbyidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRestartnodebyidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRestartnodesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRestartservicesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestRestoredumpPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestSetcloudletscountbyidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestSetcontainerentrypointPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestSetcontainerenvvarsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestSetcontainerenvvarsbygroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestSetcontainerruncmdPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestSetenvdisplaynamePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestSetenvgroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestSetnodedisplaynamePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestSetnodegroupdisplaynamePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestSetslbaccessenabledPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestSkipmessagePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestSleepenvPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestStartenvPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentControlRestStopenvPost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation environmentControlRestAddcontainerenvvarsPost
     *
     * @param  string $envName envName (required)
     * @param  string $vars vars (required)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestAddcontainerenvvarsPost($envName, $vars, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestAddcontainerenvvarsPost'][0])
    {
        list($response) = $this->environmentControlRestAddcontainerenvvarsPostWithHttpInfo($envName, $vars, $nodeGroup, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestAddcontainerenvvarsPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $vars (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestAddcontainerenvvarsPostWithHttpInfo($envName, $vars, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestAddcontainerenvvarsPost'][0])
    {
        $request = $this->environmentControlRestAddcontainerenvvarsPostRequest($envName, $vars, $nodeGroup, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestAddcontainerenvvarsPostAsync
     *
     * @param  string $envName (required)
     * @param  string $vars (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAddcontainerenvvarsPostAsync($envName, $vars, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestAddcontainerenvvarsPost'][0])
    {
        return $this->environmentControlRestAddcontainerenvvarsPostAsyncWithHttpInfo($envName, $vars, $nodeGroup, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestAddcontainerenvvarsPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $vars (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAddcontainerenvvarsPostAsyncWithHttpInfo($envName, $vars, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestAddcontainerenvvarsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestAddcontainerenvvarsPostRequest($envName, $vars, $nodeGroup, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestAddcontainerenvvarsPost'
     *
     * @param  string $envName (required)
     * @param  string $vars (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestAddcontainerenvvarsPostRequest($envName, $vars, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestAddcontainerenvvarsPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestAddcontainerenvvarsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestAddcontainerenvvarsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestAddcontainerenvvarsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'vars' is set
        if ($vars === null || (is_array($vars) && count($vars) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vars when calling environmentControlRestAddcontainerenvvarsPost'
            );
        }
        if (strlen($vars) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$vars" when calling ControlServiceApi.environmentControlRestAddcontainerenvvarsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $vars)) {
            throw new \InvalidArgumentException("invalid value for \"vars\" when calling ControlServiceApi.environmentControlRestAddcontainerenvvarsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestAddcontainerenvvarsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestAddcontainerenvvarsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestAddcontainerenvvarsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestAddcontainerenvvarsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/addcontainerenvvars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($vars !== null) {
            $formParams['vars'] = ObjectSerializer::toFormValue($vars);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestAddcontainervolumePost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse
     */
    public function environmentControlRestAddcontainervolumePost($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumePost'][0])
    {
        list($response) = $this->environmentControlRestAddcontainervolumePostWithHttpInfo($path, $envName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestAddcontainervolumePostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestAddcontainervolumePostWithHttpInfo($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumePost'][0])
    {
        $request = $this->environmentControlRestAddcontainervolumePostRequest($path, $envName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestAddcontainervolumePostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAddcontainervolumePostAsync($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumePost'][0])
    {
        return $this->environmentControlRestAddcontainervolumePostAsyncWithHttpInfo($path, $envName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestAddcontainervolumePostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAddcontainervolumePostAsyncWithHttpInfo($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse';
        $request = $this->environmentControlRestAddcontainervolumePostRequest($path, $envName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestAddcontainervolumePost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestAddcontainervolumePostRequest($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumePost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentControlRestAddcontainervolumePost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling ControlServiceApi.environmentControlRestAddcontainervolumePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling ControlServiceApi.environmentControlRestAddcontainervolumePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestAddcontainervolumePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestAddcontainervolumePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestAddcontainervolumePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestAddcontainervolumePost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestAddcontainervolumePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestAddcontainervolumePost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/addcontainervolume';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestAddcontainervolumebygroupPost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumebygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse
     */
    public function environmentControlRestAddcontainervolumebygroupPost($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumebygroupPost'][0])
    {
        list($response) = $this->environmentControlRestAddcontainervolumebygroupPostWithHttpInfo($path, $envName, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestAddcontainervolumebygroupPostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumebygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestAddcontainervolumebygroupPostWithHttpInfo($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumebygroupPost'][0])
    {
        $request = $this->environmentControlRestAddcontainervolumebygroupPostRequest($path, $envName, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestAddcontainervolumebygroupPostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumebygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAddcontainervolumebygroupPostAsync($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumebygroupPost'][0])
    {
        return $this->environmentControlRestAddcontainervolumebygroupPostAsyncWithHttpInfo($path, $envName, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestAddcontainervolumebygroupPostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumebygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAddcontainervolumebygroupPostAsyncWithHttpInfo($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumebygroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse';
        $request = $this->environmentControlRestAddcontainervolumebygroupPostRequest($path, $envName, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestAddcontainervolumebygroupPost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumebygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestAddcontainervolumebygroupPostRequest($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumebygroupPost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentControlRestAddcontainervolumebygroupPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling ControlServiceApi.environmentControlRestAddcontainervolumebygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling ControlServiceApi.environmentControlRestAddcontainervolumebygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestAddcontainervolumebygroupPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestAddcontainervolumebygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestAddcontainervolumebygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentControlRestAddcontainervolumebygroupPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestAddcontainervolumebygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestAddcontainervolumebygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/addcontainervolumebygroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestAddcontainervolumesPost
     *
     * @param  string $envName envName (required)
     * @param  string $volumes volumes (required)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses
     */
    public function environmentControlRestAddcontainervolumesPost($envName, $volumes, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumesPost'][0])
    {
        list($response) = $this->environmentControlRestAddcontainervolumesPostWithHttpInfo($envName, $volumes, $nodeGroup, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestAddcontainervolumesPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $volumes (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestAddcontainervolumesPostWithHttpInfo($envName, $volumes, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumesPost'][0])
    {
        $request = $this->environmentControlRestAddcontainervolumesPostRequest($envName, $volumes, $nodeGroup, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestAddcontainervolumesPostAsync
     *
     * @param  string $envName (required)
     * @param  string $volumes (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAddcontainervolumesPostAsync($envName, $volumes, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumesPost'][0])
    {
        return $this->environmentControlRestAddcontainervolumesPostAsyncWithHttpInfo($envName, $volumes, $nodeGroup, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestAddcontainervolumesPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $volumes (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAddcontainervolumesPostAsyncWithHttpInfo($envName, $volumes, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
        $request = $this->environmentControlRestAddcontainervolumesPostRequest($envName, $volumes, $nodeGroup, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestAddcontainervolumesPost'
     *
     * @param  string $envName (required)
     * @param  string $volumes (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddcontainervolumesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestAddcontainervolumesPostRequest($envName, $volumes, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestAddcontainervolumesPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestAddcontainervolumesPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestAddcontainervolumesPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestAddcontainervolumesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'volumes' is set
        if ($volumes === null || (is_array($volumes) && count($volumes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $volumes when calling environmentControlRestAddcontainervolumesPost'
            );
        }
        if (strlen($volumes) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$volumes" when calling ControlServiceApi.environmentControlRestAddcontainervolumesPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $volumes)) {
            throw new \InvalidArgumentException("invalid value for \"volumes\" when calling ControlServiceApi.environmentControlRestAddcontainervolumesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestAddcontainervolumesPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestAddcontainervolumesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestAddcontainervolumesPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestAddcontainervolumesPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/addcontainervolumes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($volumes !== null) {
            $formParams['volumes'] = ObjectSerializer::toFormValue($volumes);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestAddendpointPost
     *
     * @param  string $protocol protocol (required)
     * @param  string $envName envName (required)
     * @param  int $privatePort privatePort (required)
     * @param  string $name name (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddendpointPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentControlRestAddendpointPost($protocol, $envName, $privatePort, $name, $nodeId, string $contentType = self::contentTypes['environmentControlRestAddendpointPost'][0])
    {
        list($response) = $this->environmentControlRestAddendpointPostWithHttpInfo($protocol, $envName, $privatePort, $name, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestAddendpointPostWithHttpInfo
     *
     * @param  string $protocol (required)
     * @param  string $envName (required)
     * @param  int $privatePort (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddendpointPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestAddendpointPostWithHttpInfo($protocol, $envName, $privatePort, $name, $nodeId, string $contentType = self::contentTypes['environmentControlRestAddendpointPost'][0])
    {
        $request = $this->environmentControlRestAddendpointPostRequest($protocol, $envName, $privatePort, $name, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestAddendpointPostAsync
     *
     * @param  string $protocol (required)
     * @param  string $envName (required)
     * @param  int $privatePort (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddendpointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAddendpointPostAsync($protocol, $envName, $privatePort, $name, $nodeId, string $contentType = self::contentTypes['environmentControlRestAddendpointPost'][0])
    {
        return $this->environmentControlRestAddendpointPostAsyncWithHttpInfo($protocol, $envName, $privatePort, $name, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestAddendpointPostAsyncWithHttpInfo
     *
     * @param  string $protocol (required)
     * @param  string $envName (required)
     * @param  int $privatePort (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddendpointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAddendpointPostAsyncWithHttpInfo($protocol, $envName, $privatePort, $name, $nodeId, string $contentType = self::contentTypes['environmentControlRestAddendpointPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentControlRestAddendpointPostRequest($protocol, $envName, $privatePort, $name, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestAddendpointPost'
     *
     * @param  string $protocol (required)
     * @param  string $envName (required)
     * @param  int $privatePort (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddendpointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestAddendpointPostRequest($protocol, $envName, $privatePort, $name, $nodeId, string $contentType = self::contentTypes['environmentControlRestAddendpointPost'][0])
    {

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling environmentControlRestAddendpointPost'
            );
        }
        if (strlen($protocol) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling ControlServiceApi.environmentControlRestAddendpointPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $protocol)) {
            throw new \InvalidArgumentException("invalid value for \"protocol\" when calling ControlServiceApi.environmentControlRestAddendpointPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestAddendpointPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestAddendpointPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestAddendpointPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'privatePort' is set
        if ($privatePort === null || (is_array($privatePort) && count($privatePort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $privatePort when calling environmentControlRestAddendpointPost'
            );
        }
        if ($privatePort > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$privatePort" when calling ControlServiceApi.environmentControlRestAddendpointPost, must be smaller than or equal to 2147483647.');
        }
        if ($privatePort < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$privatePort" when calling ControlServiceApi.environmentControlRestAddendpointPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling environmentControlRestAddendpointPost'
            );
        }
        if (strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling ControlServiceApi.environmentControlRestAddendpointPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling ControlServiceApi.environmentControlRestAddendpointPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestAddendpointPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestAddendpointPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestAddendpointPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/addendpoint';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($protocol !== null) {
            $formParams['protocol'] = ObjectSerializer::toFormValue($protocol);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($privatePort !== null) {
            $formParams['privatePort'] = ObjectSerializer::toFormValue($privatePort);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestAddenvpropertyPost
     *
     * @param  string $envName envName (required)
     * @param  string $properties properties (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestAddenvpropertyPost($envName, $properties, string $contentType = self::contentTypes['environmentControlRestAddenvpropertyPost'][0])
    {
        list($response) = $this->environmentControlRestAddenvpropertyPostWithHttpInfo($envName, $properties, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestAddenvpropertyPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $properties (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestAddenvpropertyPostWithHttpInfo($envName, $properties, string $contentType = self::contentTypes['environmentControlRestAddenvpropertyPost'][0])
    {
        $request = $this->environmentControlRestAddenvpropertyPostRequest($envName, $properties, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestAddenvpropertyPostAsync
     *
     * @param  string $envName (required)
     * @param  string $properties (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAddenvpropertyPostAsync($envName, $properties, string $contentType = self::contentTypes['environmentControlRestAddenvpropertyPost'][0])
    {
        return $this->environmentControlRestAddenvpropertyPostAsyncWithHttpInfo($envName, $properties, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestAddenvpropertyPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $properties (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAddenvpropertyPostAsyncWithHttpInfo($envName, $properties, string $contentType = self::contentTypes['environmentControlRestAddenvpropertyPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestAddenvpropertyPostRequest($envName, $properties, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestAddenvpropertyPost'
     *
     * @param  string $envName (required)
     * @param  string $properties (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestAddenvpropertyPostRequest($envName, $properties, string $contentType = self::contentTypes['environmentControlRestAddenvpropertyPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestAddenvpropertyPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestAddenvpropertyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestAddenvpropertyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'properties' is set
        if ($properties === null || (is_array($properties) && count($properties) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $properties when calling environmentControlRestAddenvpropertyPost'
            );
        }
        if (strlen($properties) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$properties" when calling ControlServiceApi.environmentControlRestAddenvpropertyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $properties)) {
            throw new \InvalidArgumentException("invalid value for \"properties\" when calling ControlServiceApi.environmentControlRestAddenvpropertyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/addenvproperty';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($properties !== null) {
            $formParams['properties'] = ObjectSerializer::toFormValue($properties);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestAddportredirectPost
     *
     * @param  string $protocol protocol (required)
     * @param  int $dstPort dstPort (required)
     * @param  string $envName envName (required)
     * @param  int $srcPort srcPort (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $comment comment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddportredirectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestAddportredirectPost($protocol, $dstPort, $envName, $srcPort, $nodeId, $comment = null, string $contentType = self::contentTypes['environmentControlRestAddportredirectPost'][0])
    {
        list($response) = $this->environmentControlRestAddportredirectPostWithHttpInfo($protocol, $dstPort, $envName, $srcPort, $nodeId, $comment, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestAddportredirectPostWithHttpInfo
     *
     * @param  string $protocol (required)
     * @param  int $dstPort (required)
     * @param  string $envName (required)
     * @param  int $srcPort (required)
     * @param  int $nodeId (required)
     * @param  string $comment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddportredirectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestAddportredirectPostWithHttpInfo($protocol, $dstPort, $envName, $srcPort, $nodeId, $comment = null, string $contentType = self::contentTypes['environmentControlRestAddportredirectPost'][0])
    {
        $request = $this->environmentControlRestAddportredirectPostRequest($protocol, $dstPort, $envName, $srcPort, $nodeId, $comment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestAddportredirectPostAsync
     *
     * @param  string $protocol (required)
     * @param  int $dstPort (required)
     * @param  string $envName (required)
     * @param  int $srcPort (required)
     * @param  int $nodeId (required)
     * @param  string $comment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddportredirectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAddportredirectPostAsync($protocol, $dstPort, $envName, $srcPort, $nodeId, $comment = null, string $contentType = self::contentTypes['environmentControlRestAddportredirectPost'][0])
    {
        return $this->environmentControlRestAddportredirectPostAsyncWithHttpInfo($protocol, $dstPort, $envName, $srcPort, $nodeId, $comment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestAddportredirectPostAsyncWithHttpInfo
     *
     * @param  string $protocol (required)
     * @param  int $dstPort (required)
     * @param  string $envName (required)
     * @param  int $srcPort (required)
     * @param  int $nodeId (required)
     * @param  string $comment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddportredirectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAddportredirectPostAsyncWithHttpInfo($protocol, $dstPort, $envName, $srcPort, $nodeId, $comment = null, string $contentType = self::contentTypes['environmentControlRestAddportredirectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestAddportredirectPostRequest($protocol, $dstPort, $envName, $srcPort, $nodeId, $comment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestAddportredirectPost'
     *
     * @param  string $protocol (required)
     * @param  int $dstPort (required)
     * @param  string $envName (required)
     * @param  int $srcPort (required)
     * @param  int $nodeId (required)
     * @param  string $comment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAddportredirectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestAddportredirectPostRequest($protocol, $dstPort, $envName, $srcPort, $nodeId, $comment = null, string $contentType = self::contentTypes['environmentControlRestAddportredirectPost'][0])
    {

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling environmentControlRestAddportredirectPost'
            );
        }
        if (strlen($protocol) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling ControlServiceApi.environmentControlRestAddportredirectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $protocol)) {
            throw new \InvalidArgumentException("invalid value for \"protocol\" when calling ControlServiceApi.environmentControlRestAddportredirectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'dstPort' is set
        if ($dstPort === null || (is_array($dstPort) && count($dstPort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dstPort when calling environmentControlRestAddportredirectPost'
            );
        }
        if ($dstPort > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$dstPort" when calling ControlServiceApi.environmentControlRestAddportredirectPost, must be smaller than or equal to 2147483647.');
        }
        if ($dstPort < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$dstPort" when calling ControlServiceApi.environmentControlRestAddportredirectPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestAddportredirectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestAddportredirectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestAddportredirectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'srcPort' is set
        if ($srcPort === null || (is_array($srcPort) && count($srcPort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $srcPort when calling environmentControlRestAddportredirectPost'
            );
        }
        if ($srcPort > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$srcPort" when calling ControlServiceApi.environmentControlRestAddportredirectPost, must be smaller than or equal to 2147483647.');
        }
        if ($srcPort < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$srcPort" when calling ControlServiceApi.environmentControlRestAddportredirectPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestAddportredirectPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestAddportredirectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestAddportredirectPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($comment !== null && strlen($comment) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$comment" when calling ControlServiceApi.environmentControlRestAddportredirectPost, must be smaller than or equal to 2147483647.');
        }
        if ($comment !== null && !preg_match("/(.*){0,2147483647}/", $comment)) {
            throw new \InvalidArgumentException("invalid value for \"comment\" when calling ControlServiceApi.environmentControlRestAddportredirectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/addportredirect';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($protocol !== null) {
            $formParams['protocol'] = ObjectSerializer::toFormValue($protocol);
        }
        // form params
        if ($dstPort !== null) {
            $formParams['dstPort'] = ObjectSerializer::toFormValue($dstPort);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($comment !== null) {
            $formParams['comment'] = ObjectSerializer::toFormValue($comment);
        }
        // form params
        if ($srcPort !== null) {
            $formParams['srcPort'] = ObjectSerializer::toFormValue($srcPort);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestApplyenvpropertyPost
     *
     * @param  string $envName envName (required)
     * @param  string $properties properties (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestApplyenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestApplyenvpropertyPost($envName, $properties, string $contentType = self::contentTypes['environmentControlRestApplyenvpropertyPost'][0])
    {
        list($response) = $this->environmentControlRestApplyenvpropertyPostWithHttpInfo($envName, $properties, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestApplyenvpropertyPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $properties (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestApplyenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestApplyenvpropertyPostWithHttpInfo($envName, $properties, string $contentType = self::contentTypes['environmentControlRestApplyenvpropertyPost'][0])
    {
        $request = $this->environmentControlRestApplyenvpropertyPostRequest($envName, $properties, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestApplyenvpropertyPostAsync
     *
     * @param  string $envName (required)
     * @param  string $properties (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestApplyenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestApplyenvpropertyPostAsync($envName, $properties, string $contentType = self::contentTypes['environmentControlRestApplyenvpropertyPost'][0])
    {
        return $this->environmentControlRestApplyenvpropertyPostAsyncWithHttpInfo($envName, $properties, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestApplyenvpropertyPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $properties (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestApplyenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestApplyenvpropertyPostAsyncWithHttpInfo($envName, $properties, string $contentType = self::contentTypes['environmentControlRestApplyenvpropertyPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestApplyenvpropertyPostRequest($envName, $properties, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestApplyenvpropertyPost'
     *
     * @param  string $envName (required)
     * @param  string $properties (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestApplyenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestApplyenvpropertyPostRequest($envName, $properties, string $contentType = self::contentTypes['environmentControlRestApplyenvpropertyPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestApplyenvpropertyPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestApplyenvpropertyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestApplyenvpropertyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'properties' is set
        if ($properties === null || (is_array($properties) && count($properties) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $properties when calling environmentControlRestApplyenvpropertyPost'
            );
        }
        if (strlen($properties) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$properties" when calling ControlServiceApi.environmentControlRestApplyenvpropertyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $properties)) {
            throw new \InvalidArgumentException("invalid value for \"properties\" when calling ControlServiceApi.environmentControlRestApplyenvpropertyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/applyenvproperty';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($properties !== null) {
            $formParams['properties'] = ObjectSerializer::toFormValue($properties);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestApplynodegroupdataPost
     *
     * @param  string $data data (required)
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestApplynodegroupdataPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestApplynodegroupdataPost($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestApplynodegroupdataPost'][0])
    {
        list($response) = $this->environmentControlRestApplynodegroupdataPostWithHttpInfo($data, $envName, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestApplynodegroupdataPostWithHttpInfo
     *
     * @param  string $data (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestApplynodegroupdataPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestApplynodegroupdataPostWithHttpInfo($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestApplynodegroupdataPost'][0])
    {
        $request = $this->environmentControlRestApplynodegroupdataPostRequest($data, $envName, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestApplynodegroupdataPostAsync
     *
     * @param  string $data (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestApplynodegroupdataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestApplynodegroupdataPostAsync($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestApplynodegroupdataPost'][0])
    {
        return $this->environmentControlRestApplynodegroupdataPostAsyncWithHttpInfo($data, $envName, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestApplynodegroupdataPostAsyncWithHttpInfo
     *
     * @param  string $data (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestApplynodegroupdataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestApplynodegroupdataPostAsyncWithHttpInfo($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestApplynodegroupdataPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestApplynodegroupdataPostRequest($data, $envName, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestApplynodegroupdataPost'
     *
     * @param  string $data (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestApplynodegroupdataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestApplynodegroupdataPostRequest($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestApplynodegroupdataPost'][0])
    {

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling environmentControlRestApplynodegroupdataPost'
            );
        }
        if (strlen($data) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$data" when calling ControlServiceApi.environmentControlRestApplynodegroupdataPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $data)) {
            throw new \InvalidArgumentException("invalid value for \"data\" when calling ControlServiceApi.environmentControlRestApplynodegroupdataPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestApplynodegroupdataPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestApplynodegroupdataPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestApplynodegroupdataPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentControlRestApplynodegroupdataPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestApplynodegroupdataPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestApplynodegroupdataPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/applynodegroupdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($data !== null) {
            $formParams['data'] = ObjectSerializer::toFormValue($data);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestAttachenvgroupPost
     *
     * @param  string $envName envName (required)
     * @param  string $envGroup envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAttachenvgroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestAttachenvgroupPost($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestAttachenvgroupPost'][0])
    {
        list($response) = $this->environmentControlRestAttachenvgroupPostWithHttpInfo($envName, $envGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestAttachenvgroupPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAttachenvgroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestAttachenvgroupPostWithHttpInfo($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestAttachenvgroupPost'][0])
    {
        $request = $this->environmentControlRestAttachenvgroupPostRequest($envName, $envGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestAttachenvgroupPostAsync
     *
     * @param  string $envName (required)
     * @param  string $envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAttachenvgroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAttachenvgroupPostAsync($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestAttachenvgroupPost'][0])
    {
        return $this->environmentControlRestAttachenvgroupPostAsyncWithHttpInfo($envName, $envGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestAttachenvgroupPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAttachenvgroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestAttachenvgroupPostAsyncWithHttpInfo($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestAttachenvgroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestAttachenvgroupPostRequest($envName, $envGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestAttachenvgroupPost'
     *
     * @param  string $envName (required)
     * @param  string $envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestAttachenvgroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestAttachenvgroupPostRequest($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestAttachenvgroupPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestAttachenvgroupPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestAttachenvgroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestAttachenvgroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envGroup' is set
        if ($envGroup === null || (is_array($envGroup) && count($envGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envGroup when calling environmentControlRestAttachenvgroupPost'
            );
        }
        if (strlen($envGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envGroup" when calling ControlServiceApi.environmentControlRestAttachenvgroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envGroup)) {
            throw new \InvalidArgumentException("invalid value for \"envGroup\" when calling ControlServiceApi.environmentControlRestAttachenvgroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/attachenvgroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($envGroup !== null) {
            $formParams['envGroup'] = ObjectSerializer::toFormValue($envGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestChangetopologyPost
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodes $nodes nodes (required)
     * @param  string $envName envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestEnv $env env (required)
     * @param  string $actionkey actionkey (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestChangetopologyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse
     */
    public function environmentControlRestChangetopologyPost($nodes, $envName, $env, $actionkey = null, string $contentType = self::contentTypes['environmentControlRestChangetopologyPost'][0])
    {
        list($response) = $this->environmentControlRestChangetopologyPostWithHttpInfo($nodes, $envName, $env, $actionkey, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestChangetopologyPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodes $nodes (required)
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestEnv $env (required)
     * @param  string $actionkey (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestChangetopologyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestChangetopologyPostWithHttpInfo($nodes, $envName, $env, $actionkey = null, string $contentType = self::contentTypes['environmentControlRestChangetopologyPost'][0])
    {
        $request = $this->environmentControlRestChangetopologyPostRequest($nodes, $envName, $env, $actionkey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestChangetopologyPostAsync
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodes $nodes (required)
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestEnv $env (required)
     * @param  string $actionkey (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestChangetopologyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestChangetopologyPostAsync($nodes, $envName, $env, $actionkey = null, string $contentType = self::contentTypes['environmentControlRestChangetopologyPost'][0])
    {
        return $this->environmentControlRestChangetopologyPostAsyncWithHttpInfo($nodes, $envName, $env, $actionkey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestChangetopologyPostAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodes $nodes (required)
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestEnv $env (required)
     * @param  string $actionkey (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestChangetopologyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestChangetopologyPostAsyncWithHttpInfo($nodes, $envName, $env, $actionkey = null, string $contentType = self::contentTypes['environmentControlRestChangetopologyPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse';
        $request = $this->environmentControlRestChangetopologyPostRequest($nodes, $envName, $env, $actionkey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestChangetopologyPost'
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodes $nodes (required)
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestEnv $env (required)
     * @param  string $actionkey (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestChangetopologyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestChangetopologyPostRequest($nodes, $envName, $env, $actionkey = null, string $contentType = self::contentTypes['environmentControlRestChangetopologyPost'][0])
    {

        // verify the required parameter 'nodes' is set
        if ($nodes === null || (is_array($nodes) && count($nodes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodes when calling environmentControlRestChangetopologyPost'
            );
        }

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestChangetopologyPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestChangetopologyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestChangetopologyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'env' is set
        if ($env === null || (is_array($env) && count($env) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env when calling environmentControlRestChangetopologyPost'
            );
        }

        if ($actionkey !== null && strlen($actionkey) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$actionkey" when calling ControlServiceApi.environmentControlRestChangetopologyPost, must be smaller than or equal to 2147483647.');
        }
        if ($actionkey !== null && !preg_match("/(.*){0,2147483647}/", $actionkey)) {
            throw new \InvalidArgumentException("invalid value for \"actionkey\" when calling ControlServiceApi.environmentControlRestChangetopologyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/changetopology';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($nodes !== null) {
            $formParams['nodes'] = ObjectSerializer::toFormValue($nodes);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($actionkey !== null) {
            $formParams['actionkey'] = ObjectSerializer::toFormValue($actionkey);
        }
        // form params
        if ($env !== null) {
            $formParams['env'] = ObjectSerializer::toFormValue($env);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestCheckmigrationpossibilityPost
     *
     * @param  string $envName envName (required)
     * @param  string $hardwareNodeGroup hardwareNodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCheckmigrationpossibilityPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestCheckmigrationpossibilityPost($envName, $hardwareNodeGroup = null, string $contentType = self::contentTypes['environmentControlRestCheckmigrationpossibilityPost'][0])
    {
        list($response) = $this->environmentControlRestCheckmigrationpossibilityPostWithHttpInfo($envName, $hardwareNodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestCheckmigrationpossibilityPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $hardwareNodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCheckmigrationpossibilityPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestCheckmigrationpossibilityPostWithHttpInfo($envName, $hardwareNodeGroup = null, string $contentType = self::contentTypes['environmentControlRestCheckmigrationpossibilityPost'][0])
    {
        $request = $this->environmentControlRestCheckmigrationpossibilityPostRequest($envName, $hardwareNodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestCheckmigrationpossibilityPostAsync
     *
     * @param  string $envName (required)
     * @param  string $hardwareNodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCheckmigrationpossibilityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestCheckmigrationpossibilityPostAsync($envName, $hardwareNodeGroup = null, string $contentType = self::contentTypes['environmentControlRestCheckmigrationpossibilityPost'][0])
    {
        return $this->environmentControlRestCheckmigrationpossibilityPostAsyncWithHttpInfo($envName, $hardwareNodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestCheckmigrationpossibilityPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $hardwareNodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCheckmigrationpossibilityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestCheckmigrationpossibilityPostAsyncWithHttpInfo($envName, $hardwareNodeGroup = null, string $contentType = self::contentTypes['environmentControlRestCheckmigrationpossibilityPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestCheckmigrationpossibilityPostRequest($envName, $hardwareNodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestCheckmigrationpossibilityPost'
     *
     * @param  string $envName (required)
     * @param  string $hardwareNodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCheckmigrationpossibilityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestCheckmigrationpossibilityPostRequest($envName, $hardwareNodeGroup = null, string $contentType = self::contentTypes['environmentControlRestCheckmigrationpossibilityPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestCheckmigrationpossibilityPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestCheckmigrationpossibilityPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestCheckmigrationpossibilityPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($hardwareNodeGroup !== null && strlen($hardwareNodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$hardwareNodeGroup" when calling ControlServiceApi.environmentControlRestCheckmigrationpossibilityPost, must be smaller than or equal to 2147483647.');
        }
        if ($hardwareNodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $hardwareNodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"hardwareNodeGroup\" when calling ControlServiceApi.environmentControlRestCheckmigrationpossibilityPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/checkmigrationpossibility';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($hardwareNodeGroup !== null) {
            $formParams['hardwareNodeGroup'] = ObjectSerializer::toFormValue($hardwareNodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestClearlogPost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestClearlogPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestClearlogPost($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestClearlogPost'][0])
    {
        list($response) = $this->environmentControlRestClearlogPostWithHttpInfo($path, $envName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestClearlogPostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestClearlogPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestClearlogPostWithHttpInfo($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestClearlogPost'][0])
    {
        $request = $this->environmentControlRestClearlogPostRequest($path, $envName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestClearlogPostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestClearlogPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestClearlogPostAsync($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestClearlogPost'][0])
    {
        return $this->environmentControlRestClearlogPostAsyncWithHttpInfo($path, $envName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestClearlogPostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestClearlogPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestClearlogPostAsyncWithHttpInfo($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestClearlogPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestClearlogPostRequest($path, $envName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestClearlogPost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestClearlogPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestClearlogPostRequest($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestClearlogPost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentControlRestClearlogPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling ControlServiceApi.environmentControlRestClearlogPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling ControlServiceApi.environmentControlRestClearlogPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestClearlogPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestClearlogPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestClearlogPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestClearlogPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestClearlogPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestClearlogPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/clearlog';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestCloneenvPost
     *
     * @param  string $srcEnvName srcEnvName (required)
     * @param  string $dstEnvName dstEnvName (required)
     * @param  bool $useExternalMounts useExternalMounts (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCloneenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse
     */
    public function environmentControlRestCloneenvPost($srcEnvName, $dstEnvName, $useExternalMounts = null, string $contentType = self::contentTypes['environmentControlRestCloneenvPost'][0])
    {
        list($response) = $this->environmentControlRestCloneenvPostWithHttpInfo($srcEnvName, $dstEnvName, $useExternalMounts, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestCloneenvPostWithHttpInfo
     *
     * @param  string $srcEnvName (required)
     * @param  string $dstEnvName (required)
     * @param  bool $useExternalMounts (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCloneenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestCloneenvPostWithHttpInfo($srcEnvName, $dstEnvName, $useExternalMounts = null, string $contentType = self::contentTypes['environmentControlRestCloneenvPost'][0])
    {
        $request = $this->environmentControlRestCloneenvPostRequest($srcEnvName, $dstEnvName, $useExternalMounts, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestCloneenvPostAsync
     *
     * @param  string $srcEnvName (required)
     * @param  string $dstEnvName (required)
     * @param  bool $useExternalMounts (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCloneenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestCloneenvPostAsync($srcEnvName, $dstEnvName, $useExternalMounts = null, string $contentType = self::contentTypes['environmentControlRestCloneenvPost'][0])
    {
        return $this->environmentControlRestCloneenvPostAsyncWithHttpInfo($srcEnvName, $dstEnvName, $useExternalMounts, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestCloneenvPostAsyncWithHttpInfo
     *
     * @param  string $srcEnvName (required)
     * @param  string $dstEnvName (required)
     * @param  bool $useExternalMounts (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCloneenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestCloneenvPostAsyncWithHttpInfo($srcEnvName, $dstEnvName, $useExternalMounts = null, string $contentType = self::contentTypes['environmentControlRestCloneenvPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse';
        $request = $this->environmentControlRestCloneenvPostRequest($srcEnvName, $dstEnvName, $useExternalMounts, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestCloneenvPost'
     *
     * @param  string $srcEnvName (required)
     * @param  string $dstEnvName (required)
     * @param  bool $useExternalMounts (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCloneenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestCloneenvPostRequest($srcEnvName, $dstEnvName, $useExternalMounts = null, string $contentType = self::contentTypes['environmentControlRestCloneenvPost'][0])
    {

        // verify the required parameter 'srcEnvName' is set
        if ($srcEnvName === null || (is_array($srcEnvName) && count($srcEnvName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $srcEnvName when calling environmentControlRestCloneenvPost'
            );
        }
        if (strlen($srcEnvName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$srcEnvName" when calling ControlServiceApi.environmentControlRestCloneenvPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $srcEnvName)) {
            throw new \InvalidArgumentException("invalid value for \"srcEnvName\" when calling ControlServiceApi.environmentControlRestCloneenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'dstEnvName' is set
        if ($dstEnvName === null || (is_array($dstEnvName) && count($dstEnvName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dstEnvName when calling environmentControlRestCloneenvPost'
            );
        }
        if (strlen($dstEnvName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$dstEnvName" when calling ControlServiceApi.environmentControlRestCloneenvPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $dstEnvName)) {
            throw new \InvalidArgumentException("invalid value for \"dstEnvName\" when calling ControlServiceApi.environmentControlRestCloneenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        


        $resourcePath = '/environment/control/rest/cloneenv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($useExternalMounts !== null) {
            $formParams['useExternalMounts'] = ObjectSerializer::toFormValue($useExternalMounts);
        }
        // form params
        if ($srcEnvName !== null) {
            $formParams['srcEnvName'] = ObjectSerializer::toFormValue($srcEnvName);
        }
        // form params
        if ($dstEnvName !== null) {
            $formParams['dstEnvName'] = ObjectSerializer::toFormValue($dstEnvName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestCreateenvironmentPost
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodes $nodes nodes (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestEnv $env env (required)
     * @param  string $envGroups envGroups (optional)
     * @param  string $actionkey actionkey (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCreateenvironmentPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse
     */
    public function environmentControlRestCreateenvironmentPost($nodes, $env, $envGroups = null, $actionkey = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestCreateenvironmentPost'][0])
    {
        list($response) = $this->environmentControlRestCreateenvironmentPostWithHttpInfo($nodes, $env, $envGroups, $actionkey, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestCreateenvironmentPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodes $nodes (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestEnv $env (required)
     * @param  string $envGroups (optional)
     * @param  string $actionkey (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCreateenvironmentPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestCreateenvironmentPostWithHttpInfo($nodes, $env, $envGroups = null, $actionkey = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestCreateenvironmentPost'][0])
    {
        $request = $this->environmentControlRestCreateenvironmentPostRequest($nodes, $env, $envGroups, $actionkey, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestCreateenvironmentPostAsync
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodes $nodes (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestEnv $env (required)
     * @param  string $envGroups (optional)
     * @param  string $actionkey (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCreateenvironmentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestCreateenvironmentPostAsync($nodes, $env, $envGroups = null, $actionkey = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestCreateenvironmentPost'][0])
    {
        return $this->environmentControlRestCreateenvironmentPostAsyncWithHttpInfo($nodes, $env, $envGroups, $actionkey, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestCreateenvironmentPostAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodes $nodes (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestEnv $env (required)
     * @param  string $envGroups (optional)
     * @param  string $actionkey (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCreateenvironmentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestCreateenvironmentPostAsyncWithHttpInfo($nodes, $env, $envGroups = null, $actionkey = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestCreateenvironmentPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiDevelopmentResponseScriptEvalResponse';
        $request = $this->environmentControlRestCreateenvironmentPostRequest($nodes, $env, $envGroups, $actionkey, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestCreateenvironmentPost'
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestNodes $nodes (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestCreateenvironmentPostRequestEnv $env (required)
     * @param  string $envGroups (optional)
     * @param  string $actionkey (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestCreateenvironmentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestCreateenvironmentPostRequest($nodes, $env, $envGroups = null, $actionkey = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestCreateenvironmentPost'][0])
    {

        // verify the required parameter 'nodes' is set
        if ($nodes === null || (is_array($nodes) && count($nodes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodes when calling environmentControlRestCreateenvironmentPost'
            );
        }

        // verify the required parameter 'env' is set
        if ($env === null || (is_array($env) && count($env) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env when calling environmentControlRestCreateenvironmentPost'
            );
        }

        if ($envGroups !== null && strlen($envGroups) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envGroups" when calling ControlServiceApi.environmentControlRestCreateenvironmentPost, must be smaller than or equal to 2147483647.');
        }
        if ($envGroups !== null && !preg_match("/(.*){0,2147483647}/", $envGroups)) {
            throw new \InvalidArgumentException("invalid value for \"envGroups\" when calling ControlServiceApi.environmentControlRestCreateenvironmentPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($actionkey !== null && strlen($actionkey) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$actionkey" when calling ControlServiceApi.environmentControlRestCreateenvironmentPost, must be smaller than or equal to 2147483647.');
        }
        if ($actionkey !== null && !preg_match("/(.*){0,2147483647}/", $actionkey)) {
            throw new \InvalidArgumentException("invalid value for \"actionkey\" when calling ControlServiceApi.environmentControlRestCreateenvironmentPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling ControlServiceApi.environmentControlRestCreateenvironmentPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling ControlServiceApi.environmentControlRestCreateenvironmentPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/createenvironment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envGroups !== null) {
            $formParams['envGroups'] = ObjectSerializer::toFormValue($envGroups);
        }
        // form params
        if ($nodes !== null) {
            $formParams['nodes'] = ObjectSerializer::toFormValue($nodes);
        }
        // form params
        if ($actionkey !== null) {
            $formParams['actionkey'] = ObjectSerializer::toFormValue($actionkey);
        }
        // form params
        if ($env !== null) {
            $formParams['env'] = ObjectSerializer::toFormValue($env);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestDeleteenvPost
     *
     * @param  string $envName envName (required)
     * @param  string $password password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDeleteenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestDeleteenvPost($envName, $password = null, string $contentType = self::contentTypes['environmentControlRestDeleteenvPost'][0])
    {
        list($response) = $this->environmentControlRestDeleteenvPostWithHttpInfo($envName, $password, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestDeleteenvPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDeleteenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestDeleteenvPostWithHttpInfo($envName, $password = null, string $contentType = self::contentTypes['environmentControlRestDeleteenvPost'][0])
    {
        $request = $this->environmentControlRestDeleteenvPostRequest($envName, $password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestDeleteenvPostAsync
     *
     * @param  string $envName (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDeleteenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestDeleteenvPostAsync($envName, $password = null, string $contentType = self::contentTypes['environmentControlRestDeleteenvPost'][0])
    {
        return $this->environmentControlRestDeleteenvPostAsyncWithHttpInfo($envName, $password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestDeleteenvPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDeleteenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestDeleteenvPostAsyncWithHttpInfo($envName, $password = null, string $contentType = self::contentTypes['environmentControlRestDeleteenvPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestDeleteenvPostRequest($envName, $password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestDeleteenvPost'
     *
     * @param  string $envName (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDeleteenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestDeleteenvPostRequest($envName, $password = null, string $contentType = self::contentTypes['environmentControlRestDeleteenvPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestDeleteenvPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestDeleteenvPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestDeleteenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling ControlServiceApi.environmentControlRestDeleteenvPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling ControlServiceApi.environmentControlRestDeleteenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/deleteenv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestDeployappPost
     *
     * @param  string $fileName fileName (required)
     * @param  string $envName envName (required)
     * @param  string $fileUrl fileUrl (required)
     * @param  int $delay delay (optional)
     * @param  string $context context (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $hooks hooks (optional)
     * @param  bool $isSequential isSequential (optional)
     * @param  bool $atomicDeploy atomicDeploy (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDeployappPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses
     */
    public function environmentControlRestDeployappPost($fileName, $envName, $fileUrl, $delay = null, $context = null, $nodeGroup = null, $hooks = null, $isSequential = null, $atomicDeploy = null, string $contentType = self::contentTypes['environmentControlRestDeployappPost'][0])
    {
        list($response) = $this->environmentControlRestDeployappPostWithHttpInfo($fileName, $envName, $fileUrl, $delay, $context, $nodeGroup, $hooks, $isSequential, $atomicDeploy, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestDeployappPostWithHttpInfo
     *
     * @param  string $fileName (required)
     * @param  string $envName (required)
     * @param  string $fileUrl (required)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $hooks (optional)
     * @param  bool $isSequential (optional)
     * @param  bool $atomicDeploy (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDeployappPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestDeployappPostWithHttpInfo($fileName, $envName, $fileUrl, $delay = null, $context = null, $nodeGroup = null, $hooks = null, $isSequential = null, $atomicDeploy = null, string $contentType = self::contentTypes['environmentControlRestDeployappPost'][0])
    {
        $request = $this->environmentControlRestDeployappPostRequest($fileName, $envName, $fileUrl, $delay, $context, $nodeGroup, $hooks, $isSequential, $atomicDeploy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestDeployappPostAsync
     *
     * @param  string $fileName (required)
     * @param  string $envName (required)
     * @param  string $fileUrl (required)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $hooks (optional)
     * @param  bool $isSequential (optional)
     * @param  bool $atomicDeploy (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDeployappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestDeployappPostAsync($fileName, $envName, $fileUrl, $delay = null, $context = null, $nodeGroup = null, $hooks = null, $isSequential = null, $atomicDeploy = null, string $contentType = self::contentTypes['environmentControlRestDeployappPost'][0])
    {
        return $this->environmentControlRestDeployappPostAsyncWithHttpInfo($fileName, $envName, $fileUrl, $delay, $context, $nodeGroup, $hooks, $isSequential, $atomicDeploy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestDeployappPostAsyncWithHttpInfo
     *
     * @param  string $fileName (required)
     * @param  string $envName (required)
     * @param  string $fileUrl (required)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $hooks (optional)
     * @param  bool $isSequential (optional)
     * @param  bool $atomicDeploy (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDeployappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestDeployappPostAsyncWithHttpInfo($fileName, $envName, $fileUrl, $delay = null, $context = null, $nodeGroup = null, $hooks = null, $isSequential = null, $atomicDeploy = null, string $contentType = self::contentTypes['environmentControlRestDeployappPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
        $request = $this->environmentControlRestDeployappPostRequest($fileName, $envName, $fileUrl, $delay, $context, $nodeGroup, $hooks, $isSequential, $atomicDeploy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestDeployappPost'
     *
     * @param  string $fileName (required)
     * @param  string $envName (required)
     * @param  string $fileUrl (required)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $hooks (optional)
     * @param  bool $isSequential (optional)
     * @param  bool $atomicDeploy (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDeployappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestDeployappPostRequest($fileName, $envName, $fileUrl, $delay = null, $context = null, $nodeGroup = null, $hooks = null, $isSequential = null, $atomicDeploy = null, string $contentType = self::contentTypes['environmentControlRestDeployappPost'][0])
    {

        // verify the required parameter 'fileName' is set
        if ($fileName === null || (is_array($fileName) && count($fileName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileName when calling environmentControlRestDeployappPost'
            );
        }
        if (strlen($fileName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$fileName" when calling ControlServiceApi.environmentControlRestDeployappPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $fileName)) {
            throw new \InvalidArgumentException("invalid value for \"fileName\" when calling ControlServiceApi.environmentControlRestDeployappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestDeployappPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestDeployappPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestDeployappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'fileUrl' is set
        if ($fileUrl === null || (is_array($fileUrl) && count($fileUrl) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileUrl when calling environmentControlRestDeployappPost'
            );
        }
        if (strlen($fileUrl) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$fileUrl" when calling ControlServiceApi.environmentControlRestDeployappPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $fileUrl)) {
            throw new \InvalidArgumentException("invalid value for \"fileUrl\" when calling ControlServiceApi.environmentControlRestDeployappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling ControlServiceApi.environmentControlRestDeployappPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling ControlServiceApi.environmentControlRestDeployappPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($context !== null && strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling ControlServiceApi.environmentControlRestDeployappPost, must be smaller than or equal to 2147483647.');
        }
        if ($context !== null && !preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling ControlServiceApi.environmentControlRestDeployappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestDeployappPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestDeployappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($hooks !== null && strlen($hooks) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$hooks" when calling ControlServiceApi.environmentControlRestDeployappPost, must be smaller than or equal to 2147483647.');
        }
        if ($hooks !== null && !preg_match("/(.*){0,2147483647}/", $hooks)) {
            throw new \InvalidArgumentException("invalid value for \"hooks\" when calling ControlServiceApi.environmentControlRestDeployappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        



        $resourcePath = '/environment/control/rest/deployapp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($fileName !== null) {
            $formParams['fileName'] = ObjectSerializer::toFormValue($fileName);
        }
        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($fileUrl !== null) {
            $formParams['fileUrl'] = ObjectSerializer::toFormValue($fileUrl);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($hooks !== null) {
            $formParams['hooks'] = ObjectSerializer::toFormValue($hooks);
        }
        // form params
        if ($isSequential !== null) {
            $formParams['isSequential'] = ObjectSerializer::toFormValue($isSequential);
        }
        // form params
        if ($atomicDeploy !== null) {
            $formParams['atomicDeploy'] = ObjectSerializer::toFormValue($atomicDeploy);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestDetachenvgroupPost
     *
     * @param  string $envName envName (required)
     * @param  string $envGroup envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDetachenvgroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestDetachenvgroupPost($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestDetachenvgroupPost'][0])
    {
        list($response) = $this->environmentControlRestDetachenvgroupPostWithHttpInfo($envName, $envGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestDetachenvgroupPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDetachenvgroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestDetachenvgroupPostWithHttpInfo($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestDetachenvgroupPost'][0])
    {
        $request = $this->environmentControlRestDetachenvgroupPostRequest($envName, $envGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestDetachenvgroupPostAsync
     *
     * @param  string $envName (required)
     * @param  string $envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDetachenvgroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestDetachenvgroupPostAsync($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestDetachenvgroupPost'][0])
    {
        return $this->environmentControlRestDetachenvgroupPostAsyncWithHttpInfo($envName, $envGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestDetachenvgroupPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDetachenvgroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestDetachenvgroupPostAsyncWithHttpInfo($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestDetachenvgroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestDetachenvgroupPostRequest($envName, $envGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestDetachenvgroupPost'
     *
     * @param  string $envName (required)
     * @param  string $envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestDetachenvgroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestDetachenvgroupPostRequest($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestDetachenvgroupPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestDetachenvgroupPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestDetachenvgroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestDetachenvgroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envGroup' is set
        if ($envGroup === null || (is_array($envGroup) && count($envGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envGroup when calling environmentControlRestDetachenvgroupPost'
            );
        }
        if (strlen($envGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envGroup" when calling ControlServiceApi.environmentControlRestDetachenvgroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envGroup)) {
            throw new \InvalidArgumentException("invalid value for \"envGroup\" when calling ControlServiceApi.environmentControlRestDetachenvgroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/detachenvgroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($envGroup !== null) {
            $formParams['envGroup'] = ObjectSerializer::toFormValue($envGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestEditendpointPost
     *
     * @param  string $protocol protocol (required)
     * @param  string $envName envName (required)
     * @param  int $privatePort privatePort (required)
     * @param  string $name name (required)
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditendpointPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentControlRestEditendpointPost($protocol, $envName, $privatePort, $name, $id, string $contentType = self::contentTypes['environmentControlRestEditendpointPost'][0])
    {
        list($response) = $this->environmentControlRestEditendpointPostWithHttpInfo($protocol, $envName, $privatePort, $name, $id, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestEditendpointPostWithHttpInfo
     *
     * @param  string $protocol (required)
     * @param  string $envName (required)
     * @param  int $privatePort (required)
     * @param  string $name (required)
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditendpointPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestEditendpointPostWithHttpInfo($protocol, $envName, $privatePort, $name, $id, string $contentType = self::contentTypes['environmentControlRestEditendpointPost'][0])
    {
        $request = $this->environmentControlRestEditendpointPostRequest($protocol, $envName, $privatePort, $name, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestEditendpointPostAsync
     *
     * @param  string $protocol (required)
     * @param  string $envName (required)
     * @param  int $privatePort (required)
     * @param  string $name (required)
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditendpointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestEditendpointPostAsync($protocol, $envName, $privatePort, $name, $id, string $contentType = self::contentTypes['environmentControlRestEditendpointPost'][0])
    {
        return $this->environmentControlRestEditendpointPostAsyncWithHttpInfo($protocol, $envName, $privatePort, $name, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestEditendpointPostAsyncWithHttpInfo
     *
     * @param  string $protocol (required)
     * @param  string $envName (required)
     * @param  int $privatePort (required)
     * @param  string $name (required)
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditendpointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestEditendpointPostAsyncWithHttpInfo($protocol, $envName, $privatePort, $name, $id, string $contentType = self::contentTypes['environmentControlRestEditendpointPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentControlRestEditendpointPostRequest($protocol, $envName, $privatePort, $name, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestEditendpointPost'
     *
     * @param  string $protocol (required)
     * @param  string $envName (required)
     * @param  int $privatePort (required)
     * @param  string $name (required)
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditendpointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestEditendpointPostRequest($protocol, $envName, $privatePort, $name, $id, string $contentType = self::contentTypes['environmentControlRestEditendpointPost'][0])
    {

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling environmentControlRestEditendpointPost'
            );
        }
        if (strlen($protocol) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling ControlServiceApi.environmentControlRestEditendpointPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $protocol)) {
            throw new \InvalidArgumentException("invalid value for \"protocol\" when calling ControlServiceApi.environmentControlRestEditendpointPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestEditendpointPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestEditendpointPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestEditendpointPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'privatePort' is set
        if ($privatePort === null || (is_array($privatePort) && count($privatePort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $privatePort when calling environmentControlRestEditendpointPost'
            );
        }
        if ($privatePort > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$privatePort" when calling ControlServiceApi.environmentControlRestEditendpointPost, must be smaller than or equal to 2147483647.');
        }
        if ($privatePort < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$privatePort" when calling ControlServiceApi.environmentControlRestEditendpointPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling environmentControlRestEditendpointPost'
            );
        }
        if (strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling ControlServiceApi.environmentControlRestEditendpointPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling ControlServiceApi.environmentControlRestEditendpointPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling environmentControlRestEditendpointPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ControlServiceApi.environmentControlRestEditendpointPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ControlServiceApi.environmentControlRestEditendpointPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/editendpoint';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($protocol !== null) {
            $formParams['protocol'] = ObjectSerializer::toFormValue($protocol);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($privatePort !== null) {
            $formParams['privatePort'] = ObjectSerializer::toFormValue($privatePort);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestEditnodegroupPost
     *
     * @param  string $envName envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestEditnodegroupPostRequestNodeGroup $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditnodegroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestEditnodegroupPost($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestEditnodegroupPost'][0])
    {
        list($response) = $this->environmentControlRestEditnodegroupPostWithHttpInfo($envName, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestEditnodegroupPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestEditnodegroupPostRequestNodeGroup $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditnodegroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestEditnodegroupPostWithHttpInfo($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestEditnodegroupPost'][0])
    {
        $request = $this->environmentControlRestEditnodegroupPostRequest($envName, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestEditnodegroupPostAsync
     *
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestEditnodegroupPostRequestNodeGroup $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditnodegroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestEditnodegroupPostAsync($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestEditnodegroupPost'][0])
    {
        return $this->environmentControlRestEditnodegroupPostAsyncWithHttpInfo($envName, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestEditnodegroupPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestEditnodegroupPostRequestNodeGroup $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditnodegroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestEditnodegroupPostAsyncWithHttpInfo($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestEditnodegroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestEditnodegroupPostRequest($envName, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestEditnodegroupPost'
     *
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestEditnodegroupPostRequestNodeGroup $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditnodegroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestEditnodegroupPostRequest($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestEditnodegroupPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestEditnodegroupPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestEditnodegroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestEditnodegroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentControlRestEditnodegroupPost'
            );
        }


        $resourcePath = '/environment/control/rest/editnodegroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestEditregistrycredentialsPost
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestEditregistrycredentialsPostRequestFilter $filter filter (required)
     * @param  string $password password (optional)
     * @param  string $user user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditregistrycredentialsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsCountResponse
     */
    public function environmentControlRestEditregistrycredentialsPost($filter, $password = null, $user = null, string $contentType = self::contentTypes['environmentControlRestEditregistrycredentialsPost'][0])
    {
        list($response) = $this->environmentControlRestEditregistrycredentialsPostWithHttpInfo($filter, $password, $user, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestEditregistrycredentialsPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestEditregistrycredentialsPostRequestFilter $filter (required)
     * @param  string $password (optional)
     * @param  string $user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditregistrycredentialsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsCountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestEditregistrycredentialsPostWithHttpInfo($filter, $password = null, $user = null, string $contentType = self::contentTypes['environmentControlRestEditregistrycredentialsPost'][0])
    {
        $request = $this->environmentControlRestEditregistrycredentialsPostRequest($filter, $password, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsCountResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsCountResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsCountResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsCountResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsCountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestEditregistrycredentialsPostAsync
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestEditregistrycredentialsPostRequestFilter $filter (required)
     * @param  string $password (optional)
     * @param  string $user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditregistrycredentialsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestEditregistrycredentialsPostAsync($filter, $password = null, $user = null, string $contentType = self::contentTypes['environmentControlRestEditregistrycredentialsPost'][0])
    {
        return $this->environmentControlRestEditregistrycredentialsPostAsyncWithHttpInfo($filter, $password, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestEditregistrycredentialsPostAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestEditregistrycredentialsPostRequestFilter $filter (required)
     * @param  string $password (optional)
     * @param  string $user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditregistrycredentialsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestEditregistrycredentialsPostAsyncWithHttpInfo($filter, $password = null, $user = null, string $contentType = self::contentTypes['environmentControlRestEditregistrycredentialsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsCountResponse';
        $request = $this->environmentControlRestEditregistrycredentialsPostRequest($filter, $password, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestEditregistrycredentialsPost'
     *
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestEditregistrycredentialsPostRequestFilter $filter (required)
     * @param  string $password (optional)
     * @param  string $user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestEditregistrycredentialsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestEditregistrycredentialsPostRequest($filter, $password = null, $user = null, string $contentType = self::contentTypes['environmentControlRestEditregistrycredentialsPost'][0])
    {

        // verify the required parameter 'filter' is set
        if ($filter === null || (is_array($filter) && count($filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter when calling environmentControlRestEditregistrycredentialsPost'
            );
        }

        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling ControlServiceApi.environmentControlRestEditregistrycredentialsPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling ControlServiceApi.environmentControlRestEditregistrycredentialsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($user !== null && strlen($user) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$user" when calling ControlServiceApi.environmentControlRestEditregistrycredentialsPost, must be smaller than or equal to 2147483647.');
        }
        if ($user !== null && !preg_match("/(.*){0,2147483647}/", $user)) {
            throw new \InvalidArgumentException("invalid value for \"user\" when calling ControlServiceApi.environmentControlRestEditregistrycredentialsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/editregistrycredentials';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($filter !== null) {
            $formParams['filter'] = ObjectSerializer::toFormValue($filter);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($user !== null) {
            $formParams['user'] = ObjectSerializer::toFormValue($user);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestExeccmdbygroupPost
     *
     * @param  string $envName envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestExeccmdbyidPostRequestCommandList $commandList commandList (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  bool $sayYes sayYes (optional)
     * @param  bool $async async (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestExeccmdbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse
     */
    public function environmentControlRestExeccmdbygroupPost($envName, $commandList, $nodeGroup, $sayYes = null, $async = null, string $contentType = self::contentTypes['environmentControlRestExeccmdbygroupPost'][0])
    {
        list($response) = $this->environmentControlRestExeccmdbygroupPostWithHttpInfo($envName, $commandList, $nodeGroup, $sayYes, $async, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestExeccmdbygroupPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestExeccmdbyidPostRequestCommandList $commandList (required)
     * @param  string $nodeGroup (required)
     * @param  bool $sayYes (optional)
     * @param  bool $async (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestExeccmdbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestExeccmdbygroupPostWithHttpInfo($envName, $commandList, $nodeGroup, $sayYes = null, $async = null, string $contentType = self::contentTypes['environmentControlRestExeccmdbygroupPost'][0])
    {
        $request = $this->environmentControlRestExeccmdbygroupPostRequest($envName, $commandList, $nodeGroup, $sayYes, $async, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestExeccmdbygroupPostAsync
     *
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestExeccmdbyidPostRequestCommandList $commandList (required)
     * @param  string $nodeGroup (required)
     * @param  bool $sayYes (optional)
     * @param  bool $async (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestExeccmdbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestExeccmdbygroupPostAsync($envName, $commandList, $nodeGroup, $sayYes = null, $async = null, string $contentType = self::contentTypes['environmentControlRestExeccmdbygroupPost'][0])
    {
        return $this->environmentControlRestExeccmdbygroupPostAsyncWithHttpInfo($envName, $commandList, $nodeGroup, $sayYes, $async, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestExeccmdbygroupPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestExeccmdbyidPostRequestCommandList $commandList (required)
     * @param  string $nodeGroup (required)
     * @param  bool $sayYes (optional)
     * @param  bool $async (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestExeccmdbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestExeccmdbygroupPostAsyncWithHttpInfo($envName, $commandList, $nodeGroup, $sayYes = null, $async = null, string $contentType = self::contentTypes['environmentControlRestExeccmdbygroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse';
        $request = $this->environmentControlRestExeccmdbygroupPostRequest($envName, $commandList, $nodeGroup, $sayYes, $async, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestExeccmdbygroupPost'
     *
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestExeccmdbyidPostRequestCommandList $commandList (required)
     * @param  string $nodeGroup (required)
     * @param  bool $sayYes (optional)
     * @param  bool $async (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestExeccmdbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestExeccmdbygroupPostRequest($envName, $commandList, $nodeGroup, $sayYes = null, $async = null, string $contentType = self::contentTypes['environmentControlRestExeccmdbygroupPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestExeccmdbygroupPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestExeccmdbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestExeccmdbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'commandList' is set
        if ($commandList === null || (is_array($commandList) && count($commandList) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commandList when calling environmentControlRestExeccmdbygroupPost'
            );
        }

        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentControlRestExeccmdbygroupPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestExeccmdbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestExeccmdbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        



        $resourcePath = '/environment/control/rest/execcmdbygroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($sayYes !== null) {
            $formParams['sayYes'] = ObjectSerializer::toFormValue($sayYes);
        }
        // form params
        if ($async !== null) {
            $formParams['async'] = ObjectSerializer::toFormValue($async);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($commandList !== null) {
            $formParams['commandList'] = ObjectSerializer::toFormValue($commandList);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestExeccmdbyidPost
     *
     * @param  string $envName envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestExeccmdbyidPostRequestCommandList $commandList commandList (required)
     * @param  int $nodeId nodeId (required)
     * @param  bool $sayYes sayYes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestExeccmdbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse
     */
    public function environmentControlRestExeccmdbyidPost($envName, $commandList, $nodeId, $sayYes = null, string $contentType = self::contentTypes['environmentControlRestExeccmdbyidPost'][0])
    {
        list($response) = $this->environmentControlRestExeccmdbyidPostWithHttpInfo($envName, $commandList, $nodeId, $sayYes, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestExeccmdbyidPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestExeccmdbyidPostRequestCommandList $commandList (required)
     * @param  int $nodeId (required)
     * @param  bool $sayYes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestExeccmdbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestExeccmdbyidPostWithHttpInfo($envName, $commandList, $nodeId, $sayYes = null, string $contentType = self::contentTypes['environmentControlRestExeccmdbyidPost'][0])
    {
        $request = $this->environmentControlRestExeccmdbyidPostRequest($envName, $commandList, $nodeId, $sayYes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestExeccmdbyidPostAsync
     *
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestExeccmdbyidPostRequestCommandList $commandList (required)
     * @param  int $nodeId (required)
     * @param  bool $sayYes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestExeccmdbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestExeccmdbyidPostAsync($envName, $commandList, $nodeId, $sayYes = null, string $contentType = self::contentTypes['environmentControlRestExeccmdbyidPost'][0])
    {
        return $this->environmentControlRestExeccmdbyidPostAsyncWithHttpInfo($envName, $commandList, $nodeId, $sayYes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestExeccmdbyidPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestExeccmdbyidPostRequestCommandList $commandList (required)
     * @param  int $nodeId (required)
     * @param  bool $sayYes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestExeccmdbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestExeccmdbyidPostAsyncWithHttpInfo($envName, $commandList, $nodeId, $sayYes = null, string $contentType = self::contentTypes['environmentControlRestExeccmdbyidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseExecResponse';
        $request = $this->environmentControlRestExeccmdbyidPostRequest($envName, $commandList, $nodeId, $sayYes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestExeccmdbyidPost'
     *
     * @param  string $envName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentControlRestExeccmdbyidPostRequestCommandList $commandList (required)
     * @param  int $nodeId (required)
     * @param  bool $sayYes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestExeccmdbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestExeccmdbyidPostRequest($envName, $commandList, $nodeId, $sayYes = null, string $contentType = self::contentTypes['environmentControlRestExeccmdbyidPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestExeccmdbyidPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestExeccmdbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestExeccmdbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'commandList' is set
        if ($commandList === null || (is_array($commandList) && count($commandList) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commandList when calling environmentControlRestExeccmdbyidPost'
            );
        }

        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestExeccmdbyidPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestExeccmdbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestExeccmdbyidPost, must be bigger than or equal to -2147483648.');
        }
        


        $resourcePath = '/environment/control/rest/execcmdbyid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($sayYes !== null) {
            $formParams['sayYes'] = ObjectSerializer::toFormValue($sayYes);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($commandList !== null) {
            $formParams['commandList'] = ObjectSerializer::toFormValue($commandList);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetallsumstatbyuidPost
     *
     * @param  int $duration duration (optional)
     * @param  string $envName envName (optional)
     * @param  string $endtime endtime (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetallsumstatbyuidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentsStatisticResponse
     */
    public function environmentControlRestGetallsumstatbyuidPost($duration = null, $envName = null, $endtime = null, string $contentType = self::contentTypes['environmentControlRestGetallsumstatbyuidPost'][0])
    {
        list($response) = $this->environmentControlRestGetallsumstatbyuidPostWithHttpInfo($duration, $envName, $endtime, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetallsumstatbyuidPostWithHttpInfo
     *
     * @param  int $duration (optional)
     * @param  string $envName (optional)
     * @param  string $endtime (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetallsumstatbyuidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentsStatisticResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetallsumstatbyuidPostWithHttpInfo($duration = null, $envName = null, $endtime = null, string $contentType = self::contentTypes['environmentControlRestGetallsumstatbyuidPost'][0])
    {
        $request = $this->environmentControlRestGetallsumstatbyuidPostRequest($duration, $envName, $endtime, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentsStatisticResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentsStatisticResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentsStatisticResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentsStatisticResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentsStatisticResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetallsumstatbyuidPostAsync
     *
     * @param  int $duration (optional)
     * @param  string $envName (optional)
     * @param  string $endtime (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetallsumstatbyuidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetallsumstatbyuidPostAsync($duration = null, $envName = null, $endtime = null, string $contentType = self::contentTypes['environmentControlRestGetallsumstatbyuidPost'][0])
    {
        return $this->environmentControlRestGetallsumstatbyuidPostAsyncWithHttpInfo($duration, $envName, $endtime, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetallsumstatbyuidPostAsyncWithHttpInfo
     *
     * @param  int $duration (optional)
     * @param  string $envName (optional)
     * @param  string $endtime (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetallsumstatbyuidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetallsumstatbyuidPostAsyncWithHttpInfo($duration = null, $envName = null, $endtime = null, string $contentType = self::contentTypes['environmentControlRestGetallsumstatbyuidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentsStatisticResponse';
        $request = $this->environmentControlRestGetallsumstatbyuidPostRequest($duration, $envName, $endtime, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetallsumstatbyuidPost'
     *
     * @param  int $duration (optional)
     * @param  string $envName (optional)
     * @param  string $endtime (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetallsumstatbyuidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetallsumstatbyuidPostRequest($duration = null, $envName = null, $endtime = null, string $contentType = self::contentTypes['environmentControlRestGetallsumstatbyuidPost'][0])
    {

        if ($duration !== null && $duration > 9223372036854775807) {
            throw new \InvalidArgumentException('invalid value for "$duration" when calling ControlServiceApi.environmentControlRestGetallsumstatbyuidPost, must be smaller than or equal to 9223372036854775807.');
        }
        if ($duration !== null && $duration < -9223372036854775808) {
            throw new \InvalidArgumentException('invalid value for "$duration" when calling ControlServiceApi.environmentControlRestGetallsumstatbyuidPost, must be bigger than or equal to -9223372036854775808.');
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetallsumstatbyuidPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetallsumstatbyuidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($endtime !== null && strlen($endtime) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$endtime" when calling ControlServiceApi.environmentControlRestGetallsumstatbyuidPost, must be smaller than or equal to 2147483647.');
        }
        if ($endtime !== null && !preg_match("/(.*){0,2147483647}/", $endtime)) {
            throw new \InvalidArgumentException("invalid value for \"endtime\" when calling ControlServiceApi.environmentControlRestGetallsumstatbyuidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/getallsumstatbyuid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($duration !== null) {
            $formParams['duration'] = ObjectSerializer::toFormValue($duration);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($endtime !== null) {
            $formParams['endtime'] = ObjectSerializer::toFormValue($endtime);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetbasicenvsinfoPost
     *
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetbasicenvsinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses
     */
    public function environmentControlRestGetbasicenvsinfoPost($ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGetbasicenvsinfoPost'][0])
    {
        list($response) = $this->environmentControlRestGetbasicenvsinfoPostWithHttpInfo($ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetbasicenvsinfoPostWithHttpInfo
     *
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetbasicenvsinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetbasicenvsinfoPostWithHttpInfo($ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGetbasicenvsinfoPost'][0])
    {
        $request = $this->environmentControlRestGetbasicenvsinfoPostRequest($ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetbasicenvsinfoPostAsync
     *
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetbasicenvsinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetbasicenvsinfoPostAsync($ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGetbasicenvsinfoPost'][0])
    {
        return $this->environmentControlRestGetbasicenvsinfoPostAsyncWithHttpInfo($ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetbasicenvsinfoPostAsyncWithHttpInfo
     *
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetbasicenvsinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetbasicenvsinfoPostAsyncWithHttpInfo($ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGetbasicenvsinfoPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses';
        $request = $this->environmentControlRestGetbasicenvsinfoPostRequest($ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetbasicenvsinfoPost'
     *
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetbasicenvsinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetbasicenvsinfoPostRequest($ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGetbasicenvsinfoPost'][0])
    {

        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling ControlServiceApi.environmentControlRestGetbasicenvsinfoPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling ControlServiceApi.environmentControlRestGetbasicenvsinfoPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/getbasicenvsinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetcontainerentrypointPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerentrypointPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentControlRestGetcontainerentrypointPost($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerentrypointPost'][0])
    {
        list($response) = $this->environmentControlRestGetcontainerentrypointPostWithHttpInfo($envName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetcontainerentrypointPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerentrypointPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetcontainerentrypointPostWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerentrypointPost'][0])
    {
        $request = $this->environmentControlRestGetcontainerentrypointPostRequest($envName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetcontainerentrypointPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerentrypointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainerentrypointPostAsync($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerentrypointPost'][0])
    {
        return $this->environmentControlRestGetcontainerentrypointPostAsyncWithHttpInfo($envName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetcontainerentrypointPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerentrypointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainerentrypointPostAsyncWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerentrypointPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentControlRestGetcontainerentrypointPostRequest($envName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetcontainerentrypointPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerentrypointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetcontainerentrypointPostRequest($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerentrypointPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetcontainerentrypointPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetcontainerentrypointPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetcontainerentrypointPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestGetcontainerentrypointPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetcontainerentrypointPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetcontainerentrypointPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/getcontainerentrypoint';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetcontainerenvvarsPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentControlRestGetcontainerenvvarsPost($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerenvvarsPost'][0])
    {
        list($response) = $this->environmentControlRestGetcontainerenvvarsPostWithHttpInfo($envName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetcontainerenvvarsPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetcontainerenvvarsPostWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerenvvarsPost'][0])
    {
        $request = $this->environmentControlRestGetcontainerenvvarsPostRequest($envName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetcontainerenvvarsPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainerenvvarsPostAsync($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerenvvarsPost'][0])
    {
        return $this->environmentControlRestGetcontainerenvvarsPostAsyncWithHttpInfo($envName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetcontainerenvvarsPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainerenvvarsPostAsyncWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerenvvarsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentControlRestGetcontainerenvvarsPostRequest($envName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetcontainerenvvarsPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetcontainerenvvarsPostRequest($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerenvvarsPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetcontainerenvvarsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetcontainerenvvarsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetcontainerenvvarsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestGetcontainerenvvarsPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetcontainerenvvarsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetcontainerenvvarsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/getcontainerenvvars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetcontainerenvvarsbygroupPost
     *
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerenvvarsbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentControlRestGetcontainerenvvarsbygroupPost($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetcontainerenvvarsbygroupPost'][0])
    {
        list($response) = $this->environmentControlRestGetcontainerenvvarsbygroupPostWithHttpInfo($envName, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetcontainerenvvarsbygroupPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerenvvarsbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetcontainerenvvarsbygroupPostWithHttpInfo($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetcontainerenvvarsbygroupPost'][0])
    {
        $request = $this->environmentControlRestGetcontainerenvvarsbygroupPostRequest($envName, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetcontainerenvvarsbygroupPostAsync
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerenvvarsbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainerenvvarsbygroupPostAsync($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetcontainerenvvarsbygroupPost'][0])
    {
        return $this->environmentControlRestGetcontainerenvvarsbygroupPostAsyncWithHttpInfo($envName, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetcontainerenvvarsbygroupPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerenvvarsbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainerenvvarsbygroupPostAsyncWithHttpInfo($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetcontainerenvvarsbygroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentControlRestGetcontainerenvvarsbygroupPostRequest($envName, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetcontainerenvvarsbygroupPost'
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerenvvarsbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetcontainerenvvarsbygroupPostRequest($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetcontainerenvvarsbygroupPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetcontainerenvvarsbygroupPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetcontainerenvvarsbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetcontainerenvvarsbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentControlRestGetcontainerenvvarsbygroupPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestGetcontainerenvvarsbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestGetcontainerenvvarsbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/getcontainerenvvarsbygroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetcontainermanifestPost
     *
     * @param  string $image image (required)
     * @param  string $registry registry (optional)
     * @param  string $password password (optional)
     * @param  bool $ignoreFormat ignoreFormat (optional)
     * @param  string $userName userName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainermanifestPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentControlRestGetcontainermanifestPost($image, $registry = null, $password = null, $ignoreFormat = null, $userName = null, string $contentType = self::contentTypes['environmentControlRestGetcontainermanifestPost'][0])
    {
        list($response) = $this->environmentControlRestGetcontainermanifestPostWithHttpInfo($image, $registry, $password, $ignoreFormat, $userName, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetcontainermanifestPostWithHttpInfo
     *
     * @param  string $image (required)
     * @param  string $registry (optional)
     * @param  string $password (optional)
     * @param  bool $ignoreFormat (optional)
     * @param  string $userName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainermanifestPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetcontainermanifestPostWithHttpInfo($image, $registry = null, $password = null, $ignoreFormat = null, $userName = null, string $contentType = self::contentTypes['environmentControlRestGetcontainermanifestPost'][0])
    {
        $request = $this->environmentControlRestGetcontainermanifestPostRequest($image, $registry, $password, $ignoreFormat, $userName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetcontainermanifestPostAsync
     *
     * @param  string $image (required)
     * @param  string $registry (optional)
     * @param  string $password (optional)
     * @param  bool $ignoreFormat (optional)
     * @param  string $userName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainermanifestPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainermanifestPostAsync($image, $registry = null, $password = null, $ignoreFormat = null, $userName = null, string $contentType = self::contentTypes['environmentControlRestGetcontainermanifestPost'][0])
    {
        return $this->environmentControlRestGetcontainermanifestPostAsyncWithHttpInfo($image, $registry, $password, $ignoreFormat, $userName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetcontainermanifestPostAsyncWithHttpInfo
     *
     * @param  string $image (required)
     * @param  string $registry (optional)
     * @param  string $password (optional)
     * @param  bool $ignoreFormat (optional)
     * @param  string $userName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainermanifestPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainermanifestPostAsyncWithHttpInfo($image, $registry = null, $password = null, $ignoreFormat = null, $userName = null, string $contentType = self::contentTypes['environmentControlRestGetcontainermanifestPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentControlRestGetcontainermanifestPostRequest($image, $registry, $password, $ignoreFormat, $userName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetcontainermanifestPost'
     *
     * @param  string $image (required)
     * @param  string $registry (optional)
     * @param  string $password (optional)
     * @param  bool $ignoreFormat (optional)
     * @param  string $userName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainermanifestPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetcontainermanifestPostRequest($image, $registry = null, $password = null, $ignoreFormat = null, $userName = null, string $contentType = self::contentTypes['environmentControlRestGetcontainermanifestPost'][0])
    {

        // verify the required parameter 'image' is set
        if ($image === null || (is_array($image) && count($image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image when calling environmentControlRestGetcontainermanifestPost'
            );
        }
        if (strlen($image) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$image" when calling ControlServiceApi.environmentControlRestGetcontainermanifestPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $image)) {
            throw new \InvalidArgumentException("invalid value for \"image\" when calling ControlServiceApi.environmentControlRestGetcontainermanifestPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($registry !== null && strlen($registry) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$registry" when calling ControlServiceApi.environmentControlRestGetcontainermanifestPost, must be smaller than or equal to 2147483647.');
        }
        if ($registry !== null && !preg_match("/(.*){0,2147483647}/", $registry)) {
            throw new \InvalidArgumentException("invalid value for \"registry\" when calling ControlServiceApi.environmentControlRestGetcontainermanifestPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling ControlServiceApi.environmentControlRestGetcontainermanifestPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling ControlServiceApi.environmentControlRestGetcontainermanifestPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($userName !== null && strlen($userName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$userName" when calling ControlServiceApi.environmentControlRestGetcontainermanifestPost, must be smaller than or equal to 2147483647.');
        }
        if ($userName !== null && !preg_match("/(.*){0,2147483647}/", $userName)) {
            throw new \InvalidArgumentException("invalid value for \"userName\" when calling ControlServiceApi.environmentControlRestGetcontainermanifestPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/getcontainermanifest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($image !== null) {
            $formParams['image'] = ObjectSerializer::toFormValue($image);
        }
        // form params
        if ($registry !== null) {
            $formParams['registry'] = ObjectSerializer::toFormValue($registry);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($ignoreFormat !== null) {
            $formParams['ignoreFormat'] = ObjectSerializer::toFormValue($ignoreFormat);
        }
        // form params
        if ($userName !== null) {
            $formParams['userName'] = ObjectSerializer::toFormValue($userName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetcontainernodetagsPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainernodetagsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentControlRestGetcontainernodetagsPost($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainernodetagsPost'][0])
    {
        list($response) = $this->environmentControlRestGetcontainernodetagsPostWithHttpInfo($envName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetcontainernodetagsPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainernodetagsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetcontainernodetagsPostWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainernodetagsPost'][0])
    {
        $request = $this->environmentControlRestGetcontainernodetagsPostRequest($envName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetcontainernodetagsPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainernodetagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainernodetagsPostAsync($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainernodetagsPost'][0])
    {
        return $this->environmentControlRestGetcontainernodetagsPostAsyncWithHttpInfo($envName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetcontainernodetagsPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainernodetagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainernodetagsPostAsyncWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainernodetagsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentControlRestGetcontainernodetagsPostRequest($envName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetcontainernodetagsPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainernodetagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetcontainernodetagsPostRequest($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainernodetagsPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetcontainernodetagsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetcontainernodetagsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetcontainernodetagsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestGetcontainernodetagsPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetcontainernodetagsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetcontainernodetagsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/getcontainernodetags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetcontainerruncmdPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerruncmdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentControlRestGetcontainerruncmdPost($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerruncmdPost'][0])
    {
        list($response) = $this->environmentControlRestGetcontainerruncmdPostWithHttpInfo($envName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetcontainerruncmdPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerruncmdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetcontainerruncmdPostWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerruncmdPost'][0])
    {
        $request = $this->environmentControlRestGetcontainerruncmdPostRequest($envName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetcontainerruncmdPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerruncmdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainerruncmdPostAsync($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerruncmdPost'][0])
    {
        return $this->environmentControlRestGetcontainerruncmdPostAsyncWithHttpInfo($envName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetcontainerruncmdPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerruncmdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainerruncmdPostAsyncWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerruncmdPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentControlRestGetcontainerruncmdPostRequest($envName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetcontainerruncmdPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerruncmdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetcontainerruncmdPostRequest($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerruncmdPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetcontainerruncmdPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetcontainerruncmdPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetcontainerruncmdPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestGetcontainerruncmdPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetcontainerruncmdPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetcontainerruncmdPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/getcontainerruncmd';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetcontainerrunconfigPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerrunconfigPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentControlRestGetcontainerrunconfigPost($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerrunconfigPost'][0])
    {
        list($response) = $this->environmentControlRestGetcontainerrunconfigPostWithHttpInfo($envName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetcontainerrunconfigPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerrunconfigPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetcontainerrunconfigPostWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerrunconfigPost'][0])
    {
        $request = $this->environmentControlRestGetcontainerrunconfigPostRequest($envName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetcontainerrunconfigPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerrunconfigPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainerrunconfigPostAsync($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerrunconfigPost'][0])
    {
        return $this->environmentControlRestGetcontainerrunconfigPostAsyncWithHttpInfo($envName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetcontainerrunconfigPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerrunconfigPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainerrunconfigPostAsyncWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerrunconfigPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentControlRestGetcontainerrunconfigPostRequest($envName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetcontainerrunconfigPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainerrunconfigPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetcontainerrunconfigPostRequest($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainerrunconfigPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetcontainerrunconfigPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetcontainerrunconfigPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetcontainerrunconfigPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestGetcontainerrunconfigPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetcontainerrunconfigPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetcontainerrunconfigPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/getcontainerrunconfig';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetcontainertagsPost
     *
     * @param  string $image image (required)
     * @param  string $registry registry (optional)
     * @param  string $password password (optional)
     * @param  string $userName userName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainertagsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentControlRestGetcontainertagsPost($image, $registry = null, $password = null, $userName = null, string $contentType = self::contentTypes['environmentControlRestGetcontainertagsPost'][0])
    {
        list($response) = $this->environmentControlRestGetcontainertagsPostWithHttpInfo($image, $registry, $password, $userName, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetcontainertagsPostWithHttpInfo
     *
     * @param  string $image (required)
     * @param  string $registry (optional)
     * @param  string $password (optional)
     * @param  string $userName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainertagsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetcontainertagsPostWithHttpInfo($image, $registry = null, $password = null, $userName = null, string $contentType = self::contentTypes['environmentControlRestGetcontainertagsPost'][0])
    {
        $request = $this->environmentControlRestGetcontainertagsPostRequest($image, $registry, $password, $userName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetcontainertagsPostAsync
     *
     * @param  string $image (required)
     * @param  string $registry (optional)
     * @param  string $password (optional)
     * @param  string $userName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainertagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainertagsPostAsync($image, $registry = null, $password = null, $userName = null, string $contentType = self::contentTypes['environmentControlRestGetcontainertagsPost'][0])
    {
        return $this->environmentControlRestGetcontainertagsPostAsyncWithHttpInfo($image, $registry, $password, $userName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetcontainertagsPostAsyncWithHttpInfo
     *
     * @param  string $image (required)
     * @param  string $registry (optional)
     * @param  string $password (optional)
     * @param  string $userName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainertagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainertagsPostAsyncWithHttpInfo($image, $registry = null, $password = null, $userName = null, string $contentType = self::contentTypes['environmentControlRestGetcontainertagsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentControlRestGetcontainertagsPostRequest($image, $registry, $password, $userName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetcontainertagsPost'
     *
     * @param  string $image (required)
     * @param  string $registry (optional)
     * @param  string $password (optional)
     * @param  string $userName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainertagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetcontainertagsPostRequest($image, $registry = null, $password = null, $userName = null, string $contentType = self::contentTypes['environmentControlRestGetcontainertagsPost'][0])
    {

        // verify the required parameter 'image' is set
        if ($image === null || (is_array($image) && count($image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image when calling environmentControlRestGetcontainertagsPost'
            );
        }
        if (strlen($image) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$image" when calling ControlServiceApi.environmentControlRestGetcontainertagsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $image)) {
            throw new \InvalidArgumentException("invalid value for \"image\" when calling ControlServiceApi.environmentControlRestGetcontainertagsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($registry !== null && strlen($registry) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$registry" when calling ControlServiceApi.environmentControlRestGetcontainertagsPost, must be smaller than or equal to 2147483647.');
        }
        if ($registry !== null && !preg_match("/(.*){0,2147483647}/", $registry)) {
            throw new \InvalidArgumentException("invalid value for \"registry\" when calling ControlServiceApi.environmentControlRestGetcontainertagsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling ControlServiceApi.environmentControlRestGetcontainertagsPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling ControlServiceApi.environmentControlRestGetcontainertagsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($userName !== null && strlen($userName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$userName" when calling ControlServiceApi.environmentControlRestGetcontainertagsPost, must be smaller than or equal to 2147483647.');
        }
        if ($userName !== null && !preg_match("/(.*){0,2147483647}/", $userName)) {
            throw new \InvalidArgumentException("invalid value for \"userName\" when calling ControlServiceApi.environmentControlRestGetcontainertagsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/getcontainertags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($image !== null) {
            $formParams['image'] = ObjectSerializer::toFormValue($image);
        }
        // form params
        if ($registry !== null) {
            $formParams['registry'] = ObjectSerializer::toFormValue($registry);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($userName !== null) {
            $formParams['userName'] = ObjectSerializer::toFormValue($userName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetcontainervolumesbygroupPost
     *
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainervolumesbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentControlRestGetcontainervolumesbygroupPost($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetcontainervolumesbygroupPost'][0])
    {
        list($response) = $this->environmentControlRestGetcontainervolumesbygroupPostWithHttpInfo($envName, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetcontainervolumesbygroupPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainervolumesbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetcontainervolumesbygroupPostWithHttpInfo($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetcontainervolumesbygroupPost'][0])
    {
        $request = $this->environmentControlRestGetcontainervolumesbygroupPostRequest($envName, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetcontainervolumesbygroupPostAsync
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainervolumesbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainervolumesbygroupPostAsync($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetcontainervolumesbygroupPost'][0])
    {
        return $this->environmentControlRestGetcontainervolumesbygroupPostAsyncWithHttpInfo($envName, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetcontainervolumesbygroupPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainervolumesbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainervolumesbygroupPostAsyncWithHttpInfo($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetcontainervolumesbygroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentControlRestGetcontainervolumesbygroupPostRequest($envName, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetcontainervolumesbygroupPost'
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainervolumesbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetcontainervolumesbygroupPostRequest($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetcontainervolumesbygroupPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetcontainervolumesbygroupPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetcontainervolumesbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetcontainervolumesbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentControlRestGetcontainervolumesbygroupPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestGetcontainervolumesbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestGetcontainervolumesbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/getcontainervolumesbygroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetcontainervolumesbyidPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainervolumesbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentControlRestGetcontainervolumesbyidPost($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainervolumesbyidPost'][0])
    {
        list($response) = $this->environmentControlRestGetcontainervolumesbyidPostWithHttpInfo($envName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetcontainervolumesbyidPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainervolumesbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetcontainervolumesbyidPostWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainervolumesbyidPost'][0])
    {
        $request = $this->environmentControlRestGetcontainervolumesbyidPostRequest($envName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetcontainervolumesbyidPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainervolumesbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainervolumesbyidPostAsync($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainervolumesbyidPost'][0])
    {
        return $this->environmentControlRestGetcontainervolumesbyidPostAsyncWithHttpInfo($envName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetcontainervolumesbyidPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainervolumesbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetcontainervolumesbyidPostAsyncWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainervolumesbyidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentControlRestGetcontainervolumesbyidPostRequest($envName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetcontainervolumesbyidPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetcontainervolumesbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetcontainervolumesbyidPostRequest($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetcontainervolumesbyidPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetcontainervolumesbyidPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetcontainervolumesbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetcontainervolumesbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestGetcontainervolumesbyidPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetcontainervolumesbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetcontainervolumesbyidPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/getcontainervolumesbyid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetendpointsPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetendpointsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentControlRestGetendpointsPost($envName, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestGetendpointsPost'][0])
    {
        list($response) = $this->environmentControlRestGetendpointsPostWithHttpInfo($envName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetendpointsPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetendpointsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetendpointsPostWithHttpInfo($envName, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestGetendpointsPost'][0])
    {
        $request = $this->environmentControlRestGetendpointsPostRequest($envName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetendpointsPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetendpointsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetendpointsPostAsync($envName, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestGetendpointsPost'][0])
    {
        return $this->environmentControlRestGetendpointsPostAsyncWithHttpInfo($envName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetendpointsPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetendpointsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetendpointsPostAsyncWithHttpInfo($envName, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestGetendpointsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentControlRestGetendpointsPostRequest($envName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetendpointsPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetendpointsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetendpointsPostRequest($envName, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestGetendpointsPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetendpointsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetendpointsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetendpointsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetendpointsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetendpointsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/getendpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetenvinfoPost
     *
     * @param  string $envName envName (required)
     * @param  bool $lazy lazy (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse
     */
    public function environmentControlRestGetenvinfoPost($envName, $lazy = null, string $contentType = self::contentTypes['environmentControlRestGetenvinfoPost'][0])
    {
        list($response) = $this->environmentControlRestGetenvinfoPostWithHttpInfo($envName, $lazy, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetenvinfoPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  bool $lazy (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetenvinfoPostWithHttpInfo($envName, $lazy = null, string $contentType = self::contentTypes['environmentControlRestGetenvinfoPost'][0])
    {
        $request = $this->environmentControlRestGetenvinfoPostRequest($envName, $lazy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetenvinfoPostAsync
     *
     * @param  string $envName (required)
     * @param  bool $lazy (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetenvinfoPostAsync($envName, $lazy = null, string $contentType = self::contentTypes['environmentControlRestGetenvinfoPost'][0])
    {
        return $this->environmentControlRestGetenvinfoPostAsyncWithHttpInfo($envName, $lazy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetenvinfoPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  bool $lazy (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetenvinfoPostAsyncWithHttpInfo($envName, $lazy = null, string $contentType = self::contentTypes['environmentControlRestGetenvinfoPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponse';
        $request = $this->environmentControlRestGetenvinfoPostRequest($envName, $lazy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetenvinfoPost'
     *
     * @param  string $envName (required)
     * @param  bool $lazy (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetenvinfoPostRequest($envName, $lazy = null, string $contentType = self::contentTypes['environmentControlRestGetenvinfoPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetenvinfoPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetenvinfoPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetenvinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        


        $resourcePath = '/environment/control/rest/getenvinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($lazy !== null) {
            $formParams['lazy'] = ObjectSerializer::toFormValue($lazy);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetenvpropertyPost
     *
     * @param  string $envName envName (required)
     * @param  string $propertyKeys propertyKeys (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestGetenvpropertyPost($envName, $propertyKeys = null, string $contentType = self::contentTypes['environmentControlRestGetenvpropertyPost'][0])
    {
        list($response) = $this->environmentControlRestGetenvpropertyPostWithHttpInfo($envName, $propertyKeys, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetenvpropertyPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $propertyKeys (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetenvpropertyPostWithHttpInfo($envName, $propertyKeys = null, string $contentType = self::contentTypes['environmentControlRestGetenvpropertyPost'][0])
    {
        $request = $this->environmentControlRestGetenvpropertyPostRequest($envName, $propertyKeys, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetenvpropertyPostAsync
     *
     * @param  string $envName (required)
     * @param  string $propertyKeys (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetenvpropertyPostAsync($envName, $propertyKeys = null, string $contentType = self::contentTypes['environmentControlRestGetenvpropertyPost'][0])
    {
        return $this->environmentControlRestGetenvpropertyPostAsyncWithHttpInfo($envName, $propertyKeys, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetenvpropertyPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $propertyKeys (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetenvpropertyPostAsyncWithHttpInfo($envName, $propertyKeys = null, string $contentType = self::contentTypes['environmentControlRestGetenvpropertyPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestGetenvpropertyPostRequest($envName, $propertyKeys, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetenvpropertyPost'
     *
     * @param  string $envName (required)
     * @param  string $propertyKeys (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetenvpropertyPostRequest($envName, $propertyKeys = null, string $contentType = self::contentTypes['environmentControlRestGetenvpropertyPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetenvpropertyPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetenvpropertyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetenvpropertyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($propertyKeys !== null && strlen($propertyKeys) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$propertyKeys" when calling ControlServiceApi.environmentControlRestGetenvpropertyPost, must be smaller than or equal to 2147483647.');
        }
        if ($propertyKeys !== null && !preg_match("/(.*){0,2147483647}/", $propertyKeys)) {
            throw new \InvalidArgumentException("invalid value for \"propertyKeys\" when calling ControlServiceApi.environmentControlRestGetenvpropertyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/getenvproperty';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($propertyKeys !== null) {
            $formParams['propertyKeys'] = ObjectSerializer::toFormValue($propertyKeys);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetenvsPost
     *
     * @param  bool $lazy lazy (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses
     */
    public function environmentControlRestGetenvsPost($lazy = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGetenvsPost'][0])
    {
        list($response) = $this->environmentControlRestGetenvsPostWithHttpInfo($lazy, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetenvsPostWithHttpInfo
     *
     * @param  bool $lazy (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetenvsPostWithHttpInfo($lazy = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGetenvsPost'][0])
    {
        $request = $this->environmentControlRestGetenvsPostRequest($lazy, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetenvsPostAsync
     *
     * @param  bool $lazy (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetenvsPostAsync($lazy = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGetenvsPost'][0])
    {
        return $this->environmentControlRestGetenvsPostAsyncWithHttpInfo($lazy, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetenvsPostAsyncWithHttpInfo
     *
     * @param  bool $lazy (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetenvsPostAsyncWithHttpInfo($lazy = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGetenvsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseEnvironmentInfoResponses';
        $request = $this->environmentControlRestGetenvsPostRequest($lazy, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetenvsPost'
     *
     * @param  bool $lazy (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetenvsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetenvsPostRequest($lazy = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGetenvsPost'][0])
    {


        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling ControlServiceApi.environmentControlRestGetenvsPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling ControlServiceApi.environmentControlRestGetenvsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/getenvs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($lazy !== null) {
            $formParams['lazy'] = ObjectSerializer::toFormValue($lazy);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetlogsPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $path path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetlogsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse
     */
    public function environmentControlRestGetlogsPost($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentControlRestGetlogsPost'][0])
    {
        list($response) = $this->environmentControlRestGetlogsPostWithHttpInfo($envName, $nodeId, $path, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetlogsPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetlogsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetlogsPostWithHttpInfo($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentControlRestGetlogsPost'][0])
    {
        $request = $this->environmentControlRestGetlogsPostRequest($envName, $nodeId, $path, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetlogsPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetlogsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetlogsPostAsync($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentControlRestGetlogsPost'][0])
    {
        return $this->environmentControlRestGetlogsPostAsyncWithHttpInfo($envName, $nodeId, $path, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetlogsPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetlogsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetlogsPostAsyncWithHttpInfo($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentControlRestGetlogsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse';
        $request = $this->environmentControlRestGetlogsPostRequest($envName, $nodeId, $path, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetlogsPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetlogsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetlogsPostRequest($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentControlRestGetlogsPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetlogsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetlogsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetlogsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestGetlogsPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetlogsPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($path !== null && strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling ControlServiceApi.environmentControlRestGetlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($path !== null && !preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling ControlServiceApi.environmentControlRestGetlogsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/getlogs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetlogslistPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $path path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetlogslistPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogsListResponse
     */
    public function environmentControlRestGetlogslistPost($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentControlRestGetlogslistPost'][0])
    {
        list($response) = $this->environmentControlRestGetlogslistPostWithHttpInfo($envName, $nodeId, $path, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetlogslistPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetlogslistPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogsListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetlogslistPostWithHttpInfo($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentControlRestGetlogslistPost'][0])
    {
        $request = $this->environmentControlRestGetlogslistPostRequest($envName, $nodeId, $path, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogsListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogsListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogsListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogsListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogsListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetlogslistPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetlogslistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetlogslistPostAsync($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentControlRestGetlogslistPost'][0])
    {
        return $this->environmentControlRestGetlogslistPostAsyncWithHttpInfo($envName, $nodeId, $path, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetlogslistPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetlogslistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetlogslistPostAsyncWithHttpInfo($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentControlRestGetlogslistPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogsListResponse';
        $request = $this->environmentControlRestGetlogslistPostRequest($envName, $nodeId, $path, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetlogslistPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetlogslistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetlogslistPostRequest($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentControlRestGetlogslistPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetlogslistPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetlogslistPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetlogslistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestGetlogslistPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetlogslistPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetlogslistPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($path !== null && strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling ControlServiceApi.environmentControlRestGetlogslistPost, must be smaller than or equal to 2147483647.');
        }
        if ($path !== null && !preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling ControlServiceApi.environmentControlRestGetlogslistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/getlogslist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetnodegroupsPost
     *
     * @param  string $envName envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetnodegroupsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentControlRestGetnodegroupsPost($envName, string $contentType = self::contentTypes['environmentControlRestGetnodegroupsPost'][0])
    {
        list($response) = $this->environmentControlRestGetnodegroupsPostWithHttpInfo($envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetnodegroupsPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetnodegroupsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetnodegroupsPostWithHttpInfo($envName, string $contentType = self::contentTypes['environmentControlRestGetnodegroupsPost'][0])
    {
        $request = $this->environmentControlRestGetnodegroupsPostRequest($envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetnodegroupsPostAsync
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetnodegroupsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetnodegroupsPostAsync($envName, string $contentType = self::contentTypes['environmentControlRestGetnodegroupsPost'][0])
    {
        return $this->environmentControlRestGetnodegroupsPostAsyncWithHttpInfo($envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetnodegroupsPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetnodegroupsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetnodegroupsPostAsyncWithHttpInfo($envName, string $contentType = self::contentTypes['environmentControlRestGetnodegroupsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentControlRestGetnodegroupsPostRequest($envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetnodegroupsPost'
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetnodegroupsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetnodegroupsPostRequest($envName, string $contentType = self::contentTypes['environmentControlRestGetnodegroupsPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetnodegroupsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetnodegroupsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetnodegroupsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/getnodegroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetnodetagsPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetnodetagsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTagsArrayResponse
     */
    public function environmentControlRestGetnodetagsPost($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetnodetagsPost'][0])
    {
        list($response) = $this->environmentControlRestGetnodetagsPostWithHttpInfo($envName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetnodetagsPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetnodetagsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTagsArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetnodetagsPostWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetnodetagsPost'][0])
    {
        $request = $this->environmentControlRestGetnodetagsPostRequest($envName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTagsArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTagsArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTagsArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTagsArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTagsArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetnodetagsPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetnodetagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetnodetagsPostAsync($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetnodetagsPost'][0])
    {
        return $this->environmentControlRestGetnodetagsPostAsyncWithHttpInfo($envName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetnodetagsPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetnodetagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetnodetagsPostAsyncWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetnodetagsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTagsArrayResponse';
        $request = $this->environmentControlRestGetnodetagsPostRequest($envName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetnodetagsPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetnodetagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetnodetagsPostRequest($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestGetnodetagsPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetnodetagsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetnodetagsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetnodetagsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestGetnodetagsPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetnodetagsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetnodetagsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/getnodetags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetregionsPost
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregionsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentControlRestGetregionsPost(string $contentType = self::contentTypes['environmentControlRestGetregionsPost'][0])
    {
        list($response) = $this->environmentControlRestGetregionsPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetregionsPostWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregionsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetregionsPostWithHttpInfo(string $contentType = self::contentTypes['environmentControlRestGetregionsPost'][0])
    {
        $request = $this->environmentControlRestGetregionsPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetregionsPostAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetregionsPostAsync(string $contentType = self::contentTypes['environmentControlRestGetregionsPost'][0])
    {
        return $this->environmentControlRestGetregionsPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetregionsPostAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetregionsPostAsyncWithHttpInfo(string $contentType = self::contentTypes['environmentControlRestGetregionsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentControlRestGetregionsPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetregionsPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetregionsPostRequest(string $contentType = self::contentTypes['environmentControlRestGetregionsPost'][0])
    {


        $resourcePath = '/environment/control/rest/getregions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetregionsinnerPost
     *
     * @param  string $groupName groupName (required)
     * @param  bool $isEnabled isEnabled (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregionsinnerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentControlRestGetregionsinnerPost($groupName, $isEnabled = null, string $contentType = self::contentTypes['environmentControlRestGetregionsinnerPost'][0])
    {
        list($response) = $this->environmentControlRestGetregionsinnerPostWithHttpInfo($groupName, $isEnabled, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetregionsinnerPostWithHttpInfo
     *
     * @param  string $groupName (required)
     * @param  bool $isEnabled (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregionsinnerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetregionsinnerPostWithHttpInfo($groupName, $isEnabled = null, string $contentType = self::contentTypes['environmentControlRestGetregionsinnerPost'][0])
    {
        $request = $this->environmentControlRestGetregionsinnerPostRequest($groupName, $isEnabled, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetregionsinnerPostAsync
     *
     * @param  string $groupName (required)
     * @param  bool $isEnabled (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregionsinnerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetregionsinnerPostAsync($groupName, $isEnabled = null, string $contentType = self::contentTypes['environmentControlRestGetregionsinnerPost'][0])
    {
        return $this->environmentControlRestGetregionsinnerPostAsyncWithHttpInfo($groupName, $isEnabled, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetregionsinnerPostAsyncWithHttpInfo
     *
     * @param  string $groupName (required)
     * @param  bool $isEnabled (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregionsinnerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetregionsinnerPostAsyncWithHttpInfo($groupName, $isEnabled = null, string $contentType = self::contentTypes['environmentControlRestGetregionsinnerPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentControlRestGetregionsinnerPostRequest($groupName, $isEnabled, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetregionsinnerPost'
     *
     * @param  string $groupName (required)
     * @param  bool $isEnabled (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregionsinnerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetregionsinnerPostRequest($groupName, $isEnabled = null, string $contentType = self::contentTypes['environmentControlRestGetregionsinnerPost'][0])
    {

        // verify the required parameter 'groupName' is set
        if ($groupName === null || (is_array($groupName) && count($groupName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupName when calling environmentControlRestGetregionsinnerPost'
            );
        }
        if (strlen($groupName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$groupName" when calling ControlServiceApi.environmentControlRestGetregionsinnerPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $groupName)) {
            throw new \InvalidArgumentException("invalid value for \"groupName\" when calling ControlServiceApi.environmentControlRestGetregionsinnerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        


        $resourcePath = '/environment/control/rest/getregionsinner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($groupName !== null) {
            $formParams['groupName'] = ObjectSerializer::toFormValue($groupName);
        }
        // form params
        if ($isEnabled !== null) {
            $formParams['isEnabled'] = ObjectSerializer::toFormValue($isEnabled);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetregistryinfoPost
     *
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregistryinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseRegistryInfoResponse
     */
    public function environmentControlRestGetregistryinfoPost($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetregistryinfoPost'][0])
    {
        list($response) = $this->environmentControlRestGetregistryinfoPostWithHttpInfo($envName, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetregistryinfoPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregistryinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseRegistryInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetregistryinfoPostWithHttpInfo($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetregistryinfoPost'][0])
    {
        $request = $this->environmentControlRestGetregistryinfoPostRequest($envName, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseRegistryInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseRegistryInfoResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseRegistryInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseRegistryInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseRegistryInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetregistryinfoPostAsync
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregistryinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetregistryinfoPostAsync($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetregistryinfoPost'][0])
    {
        return $this->environmentControlRestGetregistryinfoPostAsyncWithHttpInfo($envName, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetregistryinfoPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregistryinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetregistryinfoPostAsyncWithHttpInfo($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetregistryinfoPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseRegistryInfoResponse';
        $request = $this->environmentControlRestGetregistryinfoPostRequest($envName, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetregistryinfoPost'
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetregistryinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetregistryinfoPostRequest($envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestGetregistryinfoPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetregistryinfoPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetregistryinfoPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetregistryinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentControlRestGetregistryinfoPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestGetregistryinfoPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestGetregistryinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/getregistryinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetsoftwarepackagesPost
     *
     * @param  string $envName envName (required)
     * @param  string $nodeType nodeType (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsoftwarepackagesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentControlRestGetsoftwarepackagesPost($envName, $nodeType = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestGetsoftwarepackagesPost'][0])
    {
        list($response) = $this->environmentControlRestGetsoftwarepackagesPostWithHttpInfo($envName, $nodeType, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetsoftwarepackagesPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsoftwarepackagesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetsoftwarepackagesPostWithHttpInfo($envName, $nodeType = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestGetsoftwarepackagesPost'][0])
    {
        $request = $this->environmentControlRestGetsoftwarepackagesPostRequest($envName, $nodeType, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetsoftwarepackagesPostAsync
     *
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsoftwarepackagesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetsoftwarepackagesPostAsync($envName, $nodeType = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestGetsoftwarepackagesPost'][0])
    {
        return $this->environmentControlRestGetsoftwarepackagesPostAsyncWithHttpInfo($envName, $nodeType, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetsoftwarepackagesPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsoftwarepackagesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetsoftwarepackagesPostAsyncWithHttpInfo($envName, $nodeType = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestGetsoftwarepackagesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentControlRestGetsoftwarepackagesPostRequest($envName, $nodeType, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetsoftwarepackagesPost'
     *
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsoftwarepackagesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetsoftwarepackagesPostRequest($envName, $nodeType = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestGetsoftwarepackagesPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetsoftwarepackagesPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetsoftwarepackagesPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetsoftwarepackagesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeType !== null && strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling ControlServiceApi.environmentControlRestGetsoftwarepackagesPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeType !== null && !preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling ControlServiceApi.environmentControlRestGetsoftwarepackagesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestGetsoftwarepackagesPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestGetsoftwarepackagesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/getsoftwarepackages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetsshaccessinfoPost
     *
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsshaccessinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponse
     */
    public function environmentControlRestGetsshaccessinfoPost($nodeId, string $contentType = self::contentTypes['environmentControlRestGetsshaccessinfoPost'][0])
    {
        list($response) = $this->environmentControlRestGetsshaccessinfoPostWithHttpInfo($nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetsshaccessinfoPostWithHttpInfo
     *
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsshaccessinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetsshaccessinfoPostWithHttpInfo($nodeId, string $contentType = self::contentTypes['environmentControlRestGetsshaccessinfoPost'][0])
    {
        $request = $this->environmentControlRestGetsshaccessinfoPostRequest($nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetsshaccessinfoPostAsync
     *
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsshaccessinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetsshaccessinfoPostAsync($nodeId, string $contentType = self::contentTypes['environmentControlRestGetsshaccessinfoPost'][0])
    {
        return $this->environmentControlRestGetsshaccessinfoPostAsyncWithHttpInfo($nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetsshaccessinfoPostAsyncWithHttpInfo
     *
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsshaccessinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetsshaccessinfoPostAsyncWithHttpInfo($nodeId, string $contentType = self::contentTypes['environmentControlRestGetsshaccessinfoPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseSoftwareNodeResponse';
        $request = $this->environmentControlRestGetsshaccessinfoPostRequest($nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetsshaccessinfoPost'
     *
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsshaccessinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetsshaccessinfoPostRequest($nodeId, string $contentType = self::contentTypes['environmentControlRestGetsshaccessinfoPost'][0])
    {

        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestGetsshaccessinfoPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetsshaccessinfoPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestGetsshaccessinfoPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/getsshaccessinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetstatsPost
     *
     * @param  int $duration duration (required)
     * @param  string $envName envName (required)
     * @param  int $interval interval (required)
     * @param  string $nodetype nodetype (optional)
     * @param  string $endtime endtime (optional)
     * @param  int $nodeid nodeid (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetstatsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse
     */
    public function environmentControlRestGetstatsPost($duration, $envName, $interval, $nodetype = null, $endtime = null, $nodeid = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestGetstatsPost'][0])
    {
        list($response) = $this->environmentControlRestGetstatsPostWithHttpInfo($duration, $envName, $interval, $nodetype, $endtime, $nodeid, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetstatsPostWithHttpInfo
     *
     * @param  int $duration (required)
     * @param  string $envName (required)
     * @param  int $interval (required)
     * @param  string $nodetype (optional)
     * @param  string $endtime (optional)
     * @param  int $nodeid (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetstatsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetstatsPostWithHttpInfo($duration, $envName, $interval, $nodetype = null, $endtime = null, $nodeid = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestGetstatsPost'][0])
    {
        $request = $this->environmentControlRestGetstatsPostRequest($duration, $envName, $interval, $nodetype, $endtime, $nodeid, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetstatsPostAsync
     *
     * @param  int $duration (required)
     * @param  string $envName (required)
     * @param  int $interval (required)
     * @param  string $nodetype (optional)
     * @param  string $endtime (optional)
     * @param  int $nodeid (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetstatsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetstatsPostAsync($duration, $envName, $interval, $nodetype = null, $endtime = null, $nodeid = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestGetstatsPost'][0])
    {
        return $this->environmentControlRestGetstatsPostAsyncWithHttpInfo($duration, $envName, $interval, $nodetype, $endtime, $nodeid, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetstatsPostAsyncWithHttpInfo
     *
     * @param  int $duration (required)
     * @param  string $envName (required)
     * @param  int $interval (required)
     * @param  string $nodetype (optional)
     * @param  string $endtime (optional)
     * @param  int $nodeid (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetstatsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetstatsPostAsyncWithHttpInfo($duration, $envName, $interval, $nodetype = null, $endtime = null, $nodeid = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestGetstatsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse';
        $request = $this->environmentControlRestGetstatsPostRequest($duration, $envName, $interval, $nodetype, $endtime, $nodeid, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetstatsPost'
     *
     * @param  int $duration (required)
     * @param  string $envName (required)
     * @param  int $interval (required)
     * @param  string $nodetype (optional)
     * @param  string $endtime (optional)
     * @param  int $nodeid (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetstatsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetstatsPostRequest($duration, $envName, $interval, $nodetype = null, $endtime = null, $nodeid = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestGetstatsPost'][0])
    {

        // verify the required parameter 'duration' is set
        if ($duration === null || (is_array($duration) && count($duration) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $duration when calling environmentControlRestGetstatsPost'
            );
        }
        if ($duration > 9223372036854775807) {
            throw new \InvalidArgumentException('invalid value for "$duration" when calling ControlServiceApi.environmentControlRestGetstatsPost, must be smaller than or equal to 9223372036854775807.');
        }
        if ($duration < -9223372036854775808) {
            throw new \InvalidArgumentException('invalid value for "$duration" when calling ControlServiceApi.environmentControlRestGetstatsPost, must be bigger than or equal to -9223372036854775808.');
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetstatsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetstatsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetstatsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'interval' is set
        if ($interval === null || (is_array($interval) && count($interval) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interval when calling environmentControlRestGetstatsPost'
            );
        }
        if ($interval > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$interval" when calling ControlServiceApi.environmentControlRestGetstatsPost, must be smaller than or equal to 2147483647.');
        }
        if ($interval < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$interval" when calling ControlServiceApi.environmentControlRestGetstatsPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($nodetype !== null && strlen($nodetype) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodetype" when calling ControlServiceApi.environmentControlRestGetstatsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodetype !== null && !preg_match("/(.*){0,2147483647}/", $nodetype)) {
            throw new \InvalidArgumentException("invalid value for \"nodetype\" when calling ControlServiceApi.environmentControlRestGetstatsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($endtime !== null && strlen($endtime) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$endtime" when calling ControlServiceApi.environmentControlRestGetstatsPost, must be smaller than or equal to 2147483647.');
        }
        if ($endtime !== null && !preg_match("/(.*){0,2147483647}/", $endtime)) {
            throw new \InvalidArgumentException("invalid value for \"endtime\" when calling ControlServiceApi.environmentControlRestGetstatsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeid !== null && $nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling ControlServiceApi.environmentControlRestGetstatsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid !== null && $nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling ControlServiceApi.environmentControlRestGetstatsPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestGetstatsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestGetstatsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/getstats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($duration !== null) {
            $formParams['duration'] = ObjectSerializer::toFormValue($duration);
        }
        // form params
        if ($nodetype !== null) {
            $formParams['nodetype'] = ObjectSerializer::toFormValue($nodetype);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($endtime !== null) {
            $formParams['endtime'] = ObjectSerializer::toFormValue($endtime);
        }
        // form params
        if ($interval !== null) {
            $formParams['interval'] = ObjectSerializer::toFormValue($interval);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGetsumstatPost
     *
     * @param  int $duration duration (required)
     * @param  string $envName envName (required)
     * @param  string $endtime endtime (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsumstatPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse
     */
    public function environmentControlRestGetsumstatPost($duration, $envName, $endtime = null, string $contentType = self::contentTypes['environmentControlRestGetsumstatPost'][0])
    {
        list($response) = $this->environmentControlRestGetsumstatPostWithHttpInfo($duration, $envName, $endtime, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGetsumstatPostWithHttpInfo
     *
     * @param  int $duration (required)
     * @param  string $envName (required)
     * @param  string $endtime (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsumstatPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGetsumstatPostWithHttpInfo($duration, $envName, $endtime = null, string $contentType = self::contentTypes['environmentControlRestGetsumstatPost'][0])
    {
        $request = $this->environmentControlRestGetsumstatPostRequest($duration, $envName, $endtime, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGetsumstatPostAsync
     *
     * @param  int $duration (required)
     * @param  string $envName (required)
     * @param  string $endtime (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsumstatPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetsumstatPostAsync($duration, $envName, $endtime = null, string $contentType = self::contentTypes['environmentControlRestGetsumstatPost'][0])
    {
        return $this->environmentControlRestGetsumstatPostAsyncWithHttpInfo($duration, $envName, $endtime, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGetsumstatPostAsyncWithHttpInfo
     *
     * @param  int $duration (required)
     * @param  string $envName (required)
     * @param  string $endtime (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsumstatPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGetsumstatPostAsyncWithHttpInfo($duration, $envName, $endtime = null, string $contentType = self::contentTypes['environmentControlRestGetsumstatPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerStatisticResponseEnvironmentStatisticResponse';
        $request = $this->environmentControlRestGetsumstatPostRequest($duration, $envName, $endtime, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGetsumstatPost'
     *
     * @param  int $duration (required)
     * @param  string $envName (required)
     * @param  string $endtime (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGetsumstatPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGetsumstatPostRequest($duration, $envName, $endtime = null, string $contentType = self::contentTypes['environmentControlRestGetsumstatPost'][0])
    {

        // verify the required parameter 'duration' is set
        if ($duration === null || (is_array($duration) && count($duration) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $duration when calling environmentControlRestGetsumstatPost'
            );
        }
        if ($duration > 9223372036854775807) {
            throw new \InvalidArgumentException('invalid value for "$duration" when calling ControlServiceApi.environmentControlRestGetsumstatPost, must be smaller than or equal to 9223372036854775807.');
        }
        if ($duration < -9223372036854775808) {
            throw new \InvalidArgumentException('invalid value for "$duration" when calling ControlServiceApi.environmentControlRestGetsumstatPost, must be bigger than or equal to -9223372036854775808.');
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestGetsumstatPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestGetsumstatPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestGetsumstatPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($endtime !== null && strlen($endtime) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$endtime" when calling ControlServiceApi.environmentControlRestGetsumstatPost, must be smaller than or equal to 2147483647.');
        }
        if ($endtime !== null && !preg_match("/(.*){0,2147483647}/", $endtime)) {
            throw new \InvalidArgumentException("invalid value for \"endtime\" when calling ControlServiceApi.environmentControlRestGetsumstatPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/getsumstat';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($duration !== null) {
            $formParams['duration'] = ObjectSerializer::toFormValue($duration);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($endtime !== null) {
            $formParams['endtime'] = ObjectSerializer::toFormValue($endtime);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGettemplatemanifestPost
     *
     * @param  string $tag tag (required)
     * @param  string $nodeType nodeType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGettemplatemanifestPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentControlRestGettemplatemanifestPost($tag, $nodeType, string $contentType = self::contentTypes['environmentControlRestGettemplatemanifestPost'][0])
    {
        list($response) = $this->environmentControlRestGettemplatemanifestPostWithHttpInfo($tag, $nodeType, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGettemplatemanifestPostWithHttpInfo
     *
     * @param  string $tag (required)
     * @param  string $nodeType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGettemplatemanifestPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGettemplatemanifestPostWithHttpInfo($tag, $nodeType, string $contentType = self::contentTypes['environmentControlRestGettemplatemanifestPost'][0])
    {
        $request = $this->environmentControlRestGettemplatemanifestPostRequest($tag, $nodeType, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGettemplatemanifestPostAsync
     *
     * @param  string $tag (required)
     * @param  string $nodeType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGettemplatemanifestPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGettemplatemanifestPostAsync($tag, $nodeType, string $contentType = self::contentTypes['environmentControlRestGettemplatemanifestPost'][0])
    {
        return $this->environmentControlRestGettemplatemanifestPostAsyncWithHttpInfo($tag, $nodeType, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGettemplatemanifestPostAsyncWithHttpInfo
     *
     * @param  string $tag (required)
     * @param  string $nodeType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGettemplatemanifestPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGettemplatemanifestPostAsyncWithHttpInfo($tag, $nodeType, string $contentType = self::contentTypes['environmentControlRestGettemplatemanifestPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentControlRestGettemplatemanifestPostRequest($tag, $nodeType, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGettemplatemanifestPost'
     *
     * @param  string $tag (required)
     * @param  string $nodeType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGettemplatemanifestPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGettemplatemanifestPostRequest($tag, $nodeType, string $contentType = self::contentTypes['environmentControlRestGettemplatemanifestPost'][0])
    {

        // verify the required parameter 'tag' is set
        if ($tag === null || (is_array($tag) && count($tag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag when calling environmentControlRestGettemplatemanifestPost'
            );
        }
        if (strlen($tag) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$tag" when calling ControlServiceApi.environmentControlRestGettemplatemanifestPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $tag)) {
            throw new \InvalidArgumentException("invalid value for \"tag\" when calling ControlServiceApi.environmentControlRestGettemplatemanifestPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeType' is set
        if ($nodeType === null || (is_array($nodeType) && count($nodeType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeType when calling environmentControlRestGettemplatemanifestPost'
            );
        }
        if (strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling ControlServiceApi.environmentControlRestGettemplatemanifestPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling ControlServiceApi.environmentControlRestGettemplatemanifestPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/gettemplatemanifest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($tag !== null) {
            $formParams['tag'] = ObjectSerializer::toFormValue($tag);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestGettemplatesPost
     *
     * @param  string $type type (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGettemplatesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTemplateArrayResponse
     */
    public function environmentControlRestGettemplatesPost($type = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGettemplatesPost'][0])
    {
        list($response) = $this->environmentControlRestGettemplatesPostWithHttpInfo($type, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestGettemplatesPostWithHttpInfo
     *
     * @param  string $type (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGettemplatesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTemplateArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestGettemplatesPostWithHttpInfo($type = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGettemplatesPost'][0])
    {
        $request = $this->environmentControlRestGettemplatesPostRequest($type, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTemplateArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTemplateArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTemplateArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTemplateArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTemplateArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestGettemplatesPostAsync
     *
     * @param  string $type (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGettemplatesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGettemplatesPostAsync($type = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGettemplatesPost'][0])
    {
        return $this->environmentControlRestGettemplatesPostAsyncWithHttpInfo($type, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestGettemplatesPostAsyncWithHttpInfo
     *
     * @param  string $type (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGettemplatesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestGettemplatesPostAsyncWithHttpInfo($type = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGettemplatesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseTemplateArrayResponse';
        $request = $this->environmentControlRestGettemplatesPostRequest($type, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestGettemplatesPost'
     *
     * @param  string $type (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestGettemplatesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestGettemplatesPostRequest($type = null, $ownerUid = null, string $contentType = self::contentTypes['environmentControlRestGettemplatesPost'][0])
    {

        if ($type !== null && strlen($type) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$type" when calling ControlServiceApi.environmentControlRestGettemplatesPost, must be smaller than or equal to 2147483647.');
        }
        if ($type !== null && !preg_match("/(.*){0,2147483647}/", $type)) {
            throw new \InvalidArgumentException("invalid value for \"type\" when calling ControlServiceApi.environmentControlRestGettemplatesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling ControlServiceApi.environmentControlRestGettemplatesPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling ControlServiceApi.environmentControlRestGettemplatesPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/gettemplates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestMigratePost
     *
     * @param  string $envName envName (required)
     * @param  bool $isOnline isOnline (optional)
     * @param  string $hardwareNodeGroup hardwareNodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestMigratePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestMigratePost($envName, $isOnline = null, $hardwareNodeGroup = null, string $contentType = self::contentTypes['environmentControlRestMigratePost'][0])
    {
        list($response) = $this->environmentControlRestMigratePostWithHttpInfo($envName, $isOnline, $hardwareNodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestMigratePostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  bool $isOnline (optional)
     * @param  string $hardwareNodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestMigratePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestMigratePostWithHttpInfo($envName, $isOnline = null, $hardwareNodeGroup = null, string $contentType = self::contentTypes['environmentControlRestMigratePost'][0])
    {
        $request = $this->environmentControlRestMigratePostRequest($envName, $isOnline, $hardwareNodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestMigratePostAsync
     *
     * @param  string $envName (required)
     * @param  bool $isOnline (optional)
     * @param  string $hardwareNodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestMigratePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestMigratePostAsync($envName, $isOnline = null, $hardwareNodeGroup = null, string $contentType = self::contentTypes['environmentControlRestMigratePost'][0])
    {
        return $this->environmentControlRestMigratePostAsyncWithHttpInfo($envName, $isOnline, $hardwareNodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestMigratePostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  bool $isOnline (optional)
     * @param  string $hardwareNodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestMigratePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestMigratePostAsyncWithHttpInfo($envName, $isOnline = null, $hardwareNodeGroup = null, string $contentType = self::contentTypes['environmentControlRestMigratePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestMigratePostRequest($envName, $isOnline, $hardwareNodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestMigratePost'
     *
     * @param  string $envName (required)
     * @param  bool $isOnline (optional)
     * @param  string $hardwareNodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestMigratePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestMigratePostRequest($envName, $isOnline = null, $hardwareNodeGroup = null, string $contentType = self::contentTypes['environmentControlRestMigratePost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestMigratePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestMigratePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestMigratePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($hardwareNodeGroup !== null && strlen($hardwareNodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$hardwareNodeGroup" when calling ControlServiceApi.environmentControlRestMigratePost, must be smaller than or equal to 2147483647.');
        }
        if ($hardwareNodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $hardwareNodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"hardwareNodeGroup\" when calling ControlServiceApi.environmentControlRestMigratePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/migrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($isOnline !== null) {
            $formParams['isOnline'] = ObjectSerializer::toFormValue($isOnline);
        }
        // form params
        if ($hardwareNodeGroup !== null) {
            $formParams['hardwareNodeGroup'] = ObjectSerializer::toFormValue($hardwareNodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestReadlogPost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  int $count count (optional)
     * @param  int $from from (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestReadlogPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogReadResponse
     */
    public function environmentControlRestReadlogPost($path, $envName, $nodeId, $count = null, $from = null, string $contentType = self::contentTypes['environmentControlRestReadlogPost'][0])
    {
        list($response) = $this->environmentControlRestReadlogPostWithHttpInfo($path, $envName, $nodeId, $count, $from, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestReadlogPostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  int $count (optional)
     * @param  int $from (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestReadlogPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogReadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestReadlogPostWithHttpInfo($path, $envName, $nodeId, $count = null, $from = null, string $contentType = self::contentTypes['environmentControlRestReadlogPost'][0])
    {
        $request = $this->environmentControlRestReadlogPostRequest($path, $envName, $nodeId, $count, $from, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogReadResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogReadResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogReadResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogReadResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogReadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestReadlogPostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  int $count (optional)
     * @param  int $from (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestReadlogPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestReadlogPostAsync($path, $envName, $nodeId, $count = null, $from = null, string $contentType = self::contentTypes['environmentControlRestReadlogPost'][0])
    {
        return $this->environmentControlRestReadlogPostAsyncWithHttpInfo($path, $envName, $nodeId, $count, $from, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestReadlogPostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  int $count (optional)
     * @param  int $from (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestReadlogPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestReadlogPostAsyncWithHttpInfo($path, $envName, $nodeId, $count = null, $from = null, string $contentType = self::contentTypes['environmentControlRestReadlogPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseLogReadResponse';
        $request = $this->environmentControlRestReadlogPostRequest($path, $envName, $nodeId, $count, $from, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestReadlogPost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  int $count (optional)
     * @param  int $from (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestReadlogPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestReadlogPostRequest($path, $envName, $nodeId, $count = null, $from = null, string $contentType = self::contentTypes['environmentControlRestReadlogPost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentControlRestReadlogPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling ControlServiceApi.environmentControlRestReadlogPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling ControlServiceApi.environmentControlRestReadlogPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestReadlogPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestReadlogPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestReadlogPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestReadlogPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestReadlogPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestReadlogPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($count !== null && $count > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling ControlServiceApi.environmentControlRestReadlogPost, must be smaller than or equal to 2147483647.');
        }
        if ($count !== null && $count < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling ControlServiceApi.environmentControlRestReadlogPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($from !== null && $from > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$from" when calling ControlServiceApi.environmentControlRestReadlogPost, must be smaller than or equal to 2147483647.');
        }
        if ($from !== null && $from < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$from" when calling ControlServiceApi.environmentControlRestReadlogPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/readlog';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($count !== null) {
            $formParams['count'] = ObjectSerializer::toFormValue($count);
        }
        // form params
        if ($from !== null) {
            $formParams['from'] = ObjectSerializer::toFormValue($from);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRedeploycontainerbyidPost
     *
     * @param  string $envName envName (required)
     * @param  string $tag tag (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $password password (optional)
     * @param  string $login login (optional)
     * @param  bool $useExistingVolumes useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainerbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses
     */
    public function environmentControlRestRedeploycontainerbyidPost($envName, $tag, $nodeId, $password = null, $login = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainerbyidPost'][0])
    {
        list($response) = $this->environmentControlRestRedeploycontainerbyidPostWithHttpInfo($envName, $tag, $nodeId, $password, $login, $useExistingVolumes, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRedeploycontainerbyidPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $tag (required)
     * @param  int $nodeId (required)
     * @param  string $password (optional)
     * @param  string $login (optional)
     * @param  bool $useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainerbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRedeploycontainerbyidPostWithHttpInfo($envName, $tag, $nodeId, $password = null, $login = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainerbyidPost'][0])
    {
        $request = $this->environmentControlRestRedeploycontainerbyidPostRequest($envName, $tag, $nodeId, $password, $login, $useExistingVolumes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRedeploycontainerbyidPostAsync
     *
     * @param  string $envName (required)
     * @param  string $tag (required)
     * @param  int $nodeId (required)
     * @param  string $password (optional)
     * @param  string $login (optional)
     * @param  bool $useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainerbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRedeploycontainerbyidPostAsync($envName, $tag, $nodeId, $password = null, $login = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainerbyidPost'][0])
    {
        return $this->environmentControlRestRedeploycontainerbyidPostAsyncWithHttpInfo($envName, $tag, $nodeId, $password, $login, $useExistingVolumes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRedeploycontainerbyidPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $tag (required)
     * @param  int $nodeId (required)
     * @param  string $password (optional)
     * @param  string $login (optional)
     * @param  bool $useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainerbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRedeploycontainerbyidPostAsyncWithHttpInfo($envName, $tag, $nodeId, $password = null, $login = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainerbyidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
        $request = $this->environmentControlRestRedeploycontainerbyidPostRequest($envName, $tag, $nodeId, $password, $login, $useExistingVolumes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRedeploycontainerbyidPost'
     *
     * @param  string $envName (required)
     * @param  string $tag (required)
     * @param  int $nodeId (required)
     * @param  string $password (optional)
     * @param  string $login (optional)
     * @param  bool $useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainerbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRedeploycontainerbyidPostRequest($envName, $tag, $nodeId, $password = null, $login = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainerbyidPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRedeploycontainerbyidPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRedeploycontainerbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRedeploycontainerbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'tag' is set
        if ($tag === null || (is_array($tag) && count($tag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag when calling environmentControlRestRedeploycontainerbyidPost'
            );
        }
        if (strlen($tag) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$tag" when calling ControlServiceApi.environmentControlRestRedeploycontainerbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $tag)) {
            throw new \InvalidArgumentException("invalid value for \"tag\" when calling ControlServiceApi.environmentControlRestRedeploycontainerbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestRedeploycontainerbyidPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRedeploycontainerbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRedeploycontainerbyidPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling ControlServiceApi.environmentControlRestRedeploycontainerbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling ControlServiceApi.environmentControlRestRedeploycontainerbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($login !== null && strlen($login) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$login" when calling ControlServiceApi.environmentControlRestRedeploycontainerbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($login !== null && !preg_match("/(.*){0,2147483647}/", $login)) {
            throw new \InvalidArgumentException("invalid value for \"login\" when calling ControlServiceApi.environmentControlRestRedeploycontainerbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        


        $resourcePath = '/environment/control/rest/redeploycontainerbyid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($tag !== null) {
            $formParams['tag'] = ObjectSerializer::toFormValue($tag);
        }
        // form params
        if ($login !== null) {
            $formParams['login'] = ObjectSerializer::toFormValue($login);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($useExistingVolumes !== null) {
            $formParams['useExistingVolumes'] = ObjectSerializer::toFormValue($useExistingVolumes);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRedeploycontainersPost
     *
     * @param  string $envName envName (required)
     * @param  string $tag tag (required)
     * @param  string $password password (optional)
     * @param  string $login login (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  bool $useExistingVolumes useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestRedeploycontainersPost($envName, $tag, $password = null, $login = null, $nodeGroup = null, $nodeId = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainersPost'][0])
    {
        list($response) = $this->environmentControlRestRedeploycontainersPostWithHttpInfo($envName, $tag, $password, $login, $nodeGroup, $nodeId, $useExistingVolumes, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRedeploycontainersPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $tag (required)
     * @param  string $password (optional)
     * @param  string $login (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRedeploycontainersPostWithHttpInfo($envName, $tag, $password = null, $login = null, $nodeGroup = null, $nodeId = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainersPost'][0])
    {
        $request = $this->environmentControlRestRedeploycontainersPostRequest($envName, $tag, $password, $login, $nodeGroup, $nodeId, $useExistingVolumes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRedeploycontainersPostAsync
     *
     * @param  string $envName (required)
     * @param  string $tag (required)
     * @param  string $password (optional)
     * @param  string $login (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRedeploycontainersPostAsync($envName, $tag, $password = null, $login = null, $nodeGroup = null, $nodeId = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainersPost'][0])
    {
        return $this->environmentControlRestRedeploycontainersPostAsyncWithHttpInfo($envName, $tag, $password, $login, $nodeGroup, $nodeId, $useExistingVolumes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRedeploycontainersPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $tag (required)
     * @param  string $password (optional)
     * @param  string $login (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRedeploycontainersPostAsyncWithHttpInfo($envName, $tag, $password = null, $login = null, $nodeGroup = null, $nodeId = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainersPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestRedeploycontainersPostRequest($envName, $tag, $password, $login, $nodeGroup, $nodeId, $useExistingVolumes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRedeploycontainersPost'
     *
     * @param  string $envName (required)
     * @param  string $tag (required)
     * @param  string $password (optional)
     * @param  string $login (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRedeploycontainersPostRequest($envName, $tag, $password = null, $login = null, $nodeGroup = null, $nodeId = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainersPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRedeploycontainersPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRedeploycontainersPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRedeploycontainersPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'tag' is set
        if ($tag === null || (is_array($tag) && count($tag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag when calling environmentControlRestRedeploycontainersPost'
            );
        }
        if (strlen($tag) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$tag" when calling ControlServiceApi.environmentControlRestRedeploycontainersPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $tag)) {
            throw new \InvalidArgumentException("invalid value for \"tag\" when calling ControlServiceApi.environmentControlRestRedeploycontainersPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling ControlServiceApi.environmentControlRestRedeploycontainersPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling ControlServiceApi.environmentControlRestRedeploycontainersPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($login !== null && strlen($login) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$login" when calling ControlServiceApi.environmentControlRestRedeploycontainersPost, must be smaller than or equal to 2147483647.');
        }
        if ($login !== null && !preg_match("/(.*){0,2147483647}/", $login)) {
            throw new \InvalidArgumentException("invalid value for \"login\" when calling ControlServiceApi.environmentControlRestRedeploycontainersPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestRedeploycontainersPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestRedeploycontainersPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRedeploycontainersPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRedeploycontainersPost, must be bigger than or equal to -2147483648.');
        }
        


        $resourcePath = '/environment/control/rest/redeploycontainers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($tag !== null) {
            $formParams['tag'] = ObjectSerializer::toFormValue($tag);
        }
        // form params
        if ($login !== null) {
            $formParams['login'] = ObjectSerializer::toFormValue($login);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($useExistingVolumes !== null) {
            $formParams['useExistingVolumes'] = ObjectSerializer::toFormValue($useExistingVolumes);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRedeploycontainersbygroupPost
     *
     * @param  string $envName envName (required)
     * @param  string $tag tag (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $password password (optional)
     * @param  int $delay delay (optional)
     * @param  string $login login (optional)
     * @param  bool $isSequential isSequential (optional)
     * @param  bool $useExistingVolumes useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainersbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses
     */
    public function environmentControlRestRedeploycontainersbygroupPost($envName, $tag, $nodeGroup, $password = null, $delay = null, $login = null, $isSequential = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainersbygroupPost'][0])
    {
        list($response) = $this->environmentControlRestRedeploycontainersbygroupPostWithHttpInfo($envName, $tag, $nodeGroup, $password, $delay, $login, $isSequential, $useExistingVolumes, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRedeploycontainersbygroupPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $tag (required)
     * @param  string $nodeGroup (required)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $login (optional)
     * @param  bool $isSequential (optional)
     * @param  bool $useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainersbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRedeploycontainersbygroupPostWithHttpInfo($envName, $tag, $nodeGroup, $password = null, $delay = null, $login = null, $isSequential = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainersbygroupPost'][0])
    {
        $request = $this->environmentControlRestRedeploycontainersbygroupPostRequest($envName, $tag, $nodeGroup, $password, $delay, $login, $isSequential, $useExistingVolumes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRedeploycontainersbygroupPostAsync
     *
     * @param  string $envName (required)
     * @param  string $tag (required)
     * @param  string $nodeGroup (required)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $login (optional)
     * @param  bool $isSequential (optional)
     * @param  bool $useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainersbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRedeploycontainersbygroupPostAsync($envName, $tag, $nodeGroup, $password = null, $delay = null, $login = null, $isSequential = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainersbygroupPost'][0])
    {
        return $this->environmentControlRestRedeploycontainersbygroupPostAsyncWithHttpInfo($envName, $tag, $nodeGroup, $password, $delay, $login, $isSequential, $useExistingVolumes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRedeploycontainersbygroupPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $tag (required)
     * @param  string $nodeGroup (required)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $login (optional)
     * @param  bool $isSequential (optional)
     * @param  bool $useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainersbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRedeploycontainersbygroupPostAsyncWithHttpInfo($envName, $tag, $nodeGroup, $password = null, $delay = null, $login = null, $isSequential = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainersbygroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
        $request = $this->environmentControlRestRedeploycontainersbygroupPostRequest($envName, $tag, $nodeGroup, $password, $delay, $login, $isSequential, $useExistingVolumes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRedeploycontainersbygroupPost'
     *
     * @param  string $envName (required)
     * @param  string $tag (required)
     * @param  string $nodeGroup (required)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $login (optional)
     * @param  bool $isSequential (optional)
     * @param  bool $useExistingVolumes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRedeploycontainersbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRedeploycontainersbygroupPostRequest($envName, $tag, $nodeGroup, $password = null, $delay = null, $login = null, $isSequential = null, $useExistingVolumes = null, string $contentType = self::contentTypes['environmentControlRestRedeploycontainersbygroupPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRedeploycontainersbygroupPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRedeploycontainersbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRedeploycontainersbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'tag' is set
        if ($tag === null || (is_array($tag) && count($tag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag when calling environmentControlRestRedeploycontainersbygroupPost'
            );
        }
        if (strlen($tag) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$tag" when calling ControlServiceApi.environmentControlRestRedeploycontainersbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $tag)) {
            throw new \InvalidArgumentException("invalid value for \"tag\" when calling ControlServiceApi.environmentControlRestRedeploycontainersbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentControlRestRedeploycontainersbygroupPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestRedeploycontainersbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestRedeploycontainersbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling ControlServiceApi.environmentControlRestRedeploycontainersbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling ControlServiceApi.environmentControlRestRedeploycontainersbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling ControlServiceApi.environmentControlRestRedeploycontainersbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling ControlServiceApi.environmentControlRestRedeploycontainersbygroupPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($login !== null && strlen($login) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$login" when calling ControlServiceApi.environmentControlRestRedeploycontainersbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($login !== null && !preg_match("/(.*){0,2147483647}/", $login)) {
            throw new \InvalidArgumentException("invalid value for \"login\" when calling ControlServiceApi.environmentControlRestRedeploycontainersbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        



        $resourcePath = '/environment/control/rest/redeploycontainersbygroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($tag !== null) {
            $formParams['tag'] = ObjectSerializer::toFormValue($tag);
        }
        // form params
        if ($login !== null) {
            $formParams['login'] = ObjectSerializer::toFormValue($login);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($isSequential !== null) {
            $formParams['isSequential'] = ObjectSerializer::toFormValue($isSequential);
        }
        // form params
        if ($useExistingVolumes !== null) {
            $formParams['useExistingVolumes'] = ObjectSerializer::toFormValue($useExistingVolumes);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRemoveappPost
     *
     * @param  string $envName envName (required)
     * @param  string $context context (required)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveappPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestRemoveappPost($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestRemoveappPost'][0])
    {
        list($response) = $this->environmentControlRestRemoveappPostWithHttpInfo($envName, $context, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRemoveappPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveappPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRemoveappPostWithHttpInfo($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestRemoveappPost'][0])
    {
        $request = $this->environmentControlRestRemoveappPostRequest($envName, $context, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRemoveappPostAsync
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemoveappPostAsync($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestRemoveappPost'][0])
    {
        return $this->environmentControlRestRemoveappPostAsyncWithHttpInfo($envName, $context, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRemoveappPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemoveappPostAsyncWithHttpInfo($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestRemoveappPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestRemoveappPostRequest($envName, $context, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRemoveappPost'
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRemoveappPostRequest($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestRemoveappPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRemoveappPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRemoveappPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRemoveappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling environmentControlRestRemoveappPost'
            );
        }
        if (strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling ControlServiceApi.environmentControlRestRemoveappPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling ControlServiceApi.environmentControlRestRemoveappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestRemoveappPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestRemoveappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/removeapp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRemovecontainerenvvarsPost
     *
     * @param  string $envName envName (required)
     * @param  string $vars vars (required)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestRemovecontainerenvvarsPost($envName, $vars, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestRemovecontainerenvvarsPost'][0])
    {
        list($response) = $this->environmentControlRestRemovecontainerenvvarsPostWithHttpInfo($envName, $vars, $nodeGroup, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRemovecontainerenvvarsPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $vars (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRemovecontainerenvvarsPostWithHttpInfo($envName, $vars, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestRemovecontainerenvvarsPost'][0])
    {
        $request = $this->environmentControlRestRemovecontainerenvvarsPostRequest($envName, $vars, $nodeGroup, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRemovecontainerenvvarsPostAsync
     *
     * @param  string $envName (required)
     * @param  string $vars (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemovecontainerenvvarsPostAsync($envName, $vars, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestRemovecontainerenvvarsPost'][0])
    {
        return $this->environmentControlRestRemovecontainerenvvarsPostAsyncWithHttpInfo($envName, $vars, $nodeGroup, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRemovecontainerenvvarsPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $vars (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemovecontainerenvvarsPostAsyncWithHttpInfo($envName, $vars, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestRemovecontainerenvvarsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestRemovecontainerenvvarsPostRequest($envName, $vars, $nodeGroup, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRemovecontainerenvvarsPost'
     *
     * @param  string $envName (required)
     * @param  string $vars (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRemovecontainerenvvarsPostRequest($envName, $vars, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestRemovecontainerenvvarsPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRemovecontainerenvvarsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRemovecontainerenvvarsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRemovecontainerenvvarsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'vars' is set
        if ($vars === null || (is_array($vars) && count($vars) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vars when calling environmentControlRestRemovecontainerenvvarsPost'
            );
        }
        if (strlen($vars) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$vars" when calling ControlServiceApi.environmentControlRestRemovecontainerenvvarsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $vars)) {
            throw new \InvalidArgumentException("invalid value for \"vars\" when calling ControlServiceApi.environmentControlRestRemovecontainerenvvarsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestRemovecontainerenvvarsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestRemovecontainerenvvarsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRemovecontainerenvvarsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRemovecontainerenvvarsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/removecontainerenvvars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($vars !== null) {
            $formParams['vars'] = ObjectSerializer::toFormValue($vars);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRemovecontainervolumePost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse
     */
    public function environmentControlRestRemovecontainervolumePost($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumePost'][0])
    {
        list($response) = $this->environmentControlRestRemovecontainervolumePostWithHttpInfo($path, $envName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRemovecontainervolumePostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRemovecontainervolumePostWithHttpInfo($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumePost'][0])
    {
        $request = $this->environmentControlRestRemovecontainervolumePostRequest($path, $envName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRemovecontainervolumePostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemovecontainervolumePostAsync($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumePost'][0])
    {
        return $this->environmentControlRestRemovecontainervolumePostAsyncWithHttpInfo($path, $envName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRemovecontainervolumePostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemovecontainervolumePostAsyncWithHttpInfo($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse';
        $request = $this->environmentControlRestRemovecontainervolumePostRequest($path, $envName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRemovecontainervolumePost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRemovecontainervolumePostRequest($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumePost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentControlRestRemovecontainervolumePost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling ControlServiceApi.environmentControlRestRemovecontainervolumePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling ControlServiceApi.environmentControlRestRemovecontainervolumePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRemovecontainervolumePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRemovecontainervolumePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRemovecontainervolumePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestRemovecontainervolumePost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRemovecontainervolumePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRemovecontainervolumePost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/removecontainervolume';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRemovecontainervolumebygroupPost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumebygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse
     */
    public function environmentControlRestRemovecontainervolumebygroupPost($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumebygroupPost'][0])
    {
        list($response) = $this->environmentControlRestRemovecontainervolumebygroupPostWithHttpInfo($path, $envName, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRemovecontainervolumebygroupPostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumebygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRemovecontainervolumebygroupPostWithHttpInfo($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumebygroupPost'][0])
    {
        $request = $this->environmentControlRestRemovecontainervolumebygroupPostRequest($path, $envName, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRemovecontainervolumebygroupPostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumebygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemovecontainervolumebygroupPostAsync($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumebygroupPost'][0])
    {
        return $this->environmentControlRestRemovecontainervolumebygroupPostAsyncWithHttpInfo($path, $envName, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRemovecontainervolumebygroupPostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumebygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemovecontainervolumebygroupPostAsyncWithHttpInfo($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumebygroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse';
        $request = $this->environmentControlRestRemovecontainervolumebygroupPostRequest($path, $envName, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRemovecontainervolumebygroupPost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumebygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRemovecontainervolumebygroupPostRequest($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumebygroupPost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentControlRestRemovecontainervolumebygroupPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling ControlServiceApi.environmentControlRestRemovecontainervolumebygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling ControlServiceApi.environmentControlRestRemovecontainervolumebygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRemovecontainervolumebygroupPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRemovecontainervolumebygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRemovecontainervolumebygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentControlRestRemovecontainervolumebygroupPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestRemovecontainervolumebygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestRemovecontainervolumebygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/removecontainervolumebygroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRemovecontainervolumesPost
     *
     * @param  string $envName envName (required)
     * @param  string $volumes volumes (required)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses
     */
    public function environmentControlRestRemovecontainervolumesPost($envName, $volumes, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumesPost'][0])
    {
        list($response) = $this->environmentControlRestRemovecontainervolumesPostWithHttpInfo($envName, $volumes, $nodeGroup, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRemovecontainervolumesPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $volumes (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRemovecontainervolumesPostWithHttpInfo($envName, $volumes, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumesPost'][0])
    {
        $request = $this->environmentControlRestRemovecontainervolumesPostRequest($envName, $volumes, $nodeGroup, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRemovecontainervolumesPostAsync
     *
     * @param  string $envName (required)
     * @param  string $volumes (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemovecontainervolumesPostAsync($envName, $volumes, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumesPost'][0])
    {
        return $this->environmentControlRestRemovecontainervolumesPostAsyncWithHttpInfo($envName, $volumes, $nodeGroup, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRemovecontainervolumesPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $volumes (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemovecontainervolumesPostAsyncWithHttpInfo($envName, $volumes, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
        $request = $this->environmentControlRestRemovecontainervolumesPostRequest($envName, $volumes, $nodeGroup, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRemovecontainervolumesPost'
     *
     * @param  string $envName (required)
     * @param  string $volumes (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovecontainervolumesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRemovecontainervolumesPostRequest($envName, $volumes, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestRemovecontainervolumesPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRemovecontainervolumesPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRemovecontainervolumesPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRemovecontainervolumesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'volumes' is set
        if ($volumes === null || (is_array($volumes) && count($volumes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $volumes when calling environmentControlRestRemovecontainervolumesPost'
            );
        }
        if (strlen($volumes) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$volumes" when calling ControlServiceApi.environmentControlRestRemovecontainervolumesPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $volumes)) {
            throw new \InvalidArgumentException("invalid value for \"volumes\" when calling ControlServiceApi.environmentControlRestRemovecontainervolumesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestRemovecontainervolumesPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestRemovecontainervolumesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRemovecontainervolumesPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRemovecontainervolumesPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/removecontainervolumes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($volumes !== null) {
            $formParams['volumes'] = ObjectSerializer::toFormValue($volumes);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRemoveendpointPost
     *
     * @param  string $envName envName (required)
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveendpointPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestRemoveendpointPost($envName, $id, string $contentType = self::contentTypes['environmentControlRestRemoveendpointPost'][0])
    {
        list($response) = $this->environmentControlRestRemoveendpointPostWithHttpInfo($envName, $id, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRemoveendpointPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveendpointPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRemoveendpointPostWithHttpInfo($envName, $id, string $contentType = self::contentTypes['environmentControlRestRemoveendpointPost'][0])
    {
        $request = $this->environmentControlRestRemoveendpointPostRequest($envName, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRemoveendpointPostAsync
     *
     * @param  string $envName (required)
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveendpointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemoveendpointPostAsync($envName, $id, string $contentType = self::contentTypes['environmentControlRestRemoveendpointPost'][0])
    {
        return $this->environmentControlRestRemoveendpointPostAsyncWithHttpInfo($envName, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRemoveendpointPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveendpointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemoveendpointPostAsyncWithHttpInfo($envName, $id, string $contentType = self::contentTypes['environmentControlRestRemoveendpointPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestRemoveendpointPostRequest($envName, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRemoveendpointPost'
     *
     * @param  string $envName (required)
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveendpointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRemoveendpointPostRequest($envName, $id, string $contentType = self::contentTypes['environmentControlRestRemoveendpointPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRemoveendpointPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRemoveendpointPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRemoveendpointPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling environmentControlRestRemoveendpointPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ControlServiceApi.environmentControlRestRemoveendpointPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ControlServiceApi.environmentControlRestRemoveendpointPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/removeendpoint';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRemoveenvpropertyPost
     *
     * @param  string $envName envName (required)
     * @param  string $propertyKeys propertyKeys (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestRemoveenvpropertyPost($envName, $propertyKeys, string $contentType = self::contentTypes['environmentControlRestRemoveenvpropertyPost'][0])
    {
        list($response) = $this->environmentControlRestRemoveenvpropertyPostWithHttpInfo($envName, $propertyKeys, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRemoveenvpropertyPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $propertyKeys (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRemoveenvpropertyPostWithHttpInfo($envName, $propertyKeys, string $contentType = self::contentTypes['environmentControlRestRemoveenvpropertyPost'][0])
    {
        $request = $this->environmentControlRestRemoveenvpropertyPostRequest($envName, $propertyKeys, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRemoveenvpropertyPostAsync
     *
     * @param  string $envName (required)
     * @param  string $propertyKeys (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemoveenvpropertyPostAsync($envName, $propertyKeys, string $contentType = self::contentTypes['environmentControlRestRemoveenvpropertyPost'][0])
    {
        return $this->environmentControlRestRemoveenvpropertyPostAsyncWithHttpInfo($envName, $propertyKeys, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRemoveenvpropertyPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $propertyKeys (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemoveenvpropertyPostAsyncWithHttpInfo($envName, $propertyKeys, string $contentType = self::contentTypes['environmentControlRestRemoveenvpropertyPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestRemoveenvpropertyPostRequest($envName, $propertyKeys, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRemoveenvpropertyPost'
     *
     * @param  string $envName (required)
     * @param  string $propertyKeys (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemoveenvpropertyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRemoveenvpropertyPostRequest($envName, $propertyKeys, string $contentType = self::contentTypes['environmentControlRestRemoveenvpropertyPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRemoveenvpropertyPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRemoveenvpropertyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRemoveenvpropertyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'propertyKeys' is set
        if ($propertyKeys === null || (is_array($propertyKeys) && count($propertyKeys) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyKeys when calling environmentControlRestRemoveenvpropertyPost'
            );
        }
        if (strlen($propertyKeys) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$propertyKeys" when calling ControlServiceApi.environmentControlRestRemoveenvpropertyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $propertyKeys)) {
            throw new \InvalidArgumentException("invalid value for \"propertyKeys\" when calling ControlServiceApi.environmentControlRestRemoveenvpropertyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/removeenvproperty';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($propertyKeys !== null) {
            $formParams['propertyKeys'] = ObjectSerializer::toFormValue($propertyKeys);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRemovelogPost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovelogPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestRemovelogPost($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRemovelogPost'][0])
    {
        list($response) = $this->environmentControlRestRemovelogPostWithHttpInfo($path, $envName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRemovelogPostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovelogPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRemovelogPostWithHttpInfo($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRemovelogPost'][0])
    {
        $request = $this->environmentControlRestRemovelogPostRequest($path, $envName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRemovelogPostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovelogPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemovelogPostAsync($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRemovelogPost'][0])
    {
        return $this->environmentControlRestRemovelogPostAsyncWithHttpInfo($path, $envName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRemovelogPostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovelogPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRemovelogPostAsyncWithHttpInfo($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRemovelogPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestRemovelogPostRequest($path, $envName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRemovelogPost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRemovelogPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRemovelogPostRequest($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRemovelogPost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentControlRestRemovelogPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling ControlServiceApi.environmentControlRestRemovelogPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling ControlServiceApi.environmentControlRestRemovelogPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRemovelogPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRemovelogPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRemovelogPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestRemovelogPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRemovelogPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRemovelogPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/removelog';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRenameappPost
     *
     * @param  string $envName envName (required)
     * @param  string $oldcontext oldcontext (required)
     * @param  string $newcontext newcontext (required)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRenameappPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestRenameappPost($envName, $oldcontext, $newcontext, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestRenameappPost'][0])
    {
        list($response) = $this->environmentControlRestRenameappPostWithHttpInfo($envName, $oldcontext, $newcontext, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRenameappPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $oldcontext (required)
     * @param  string $newcontext (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRenameappPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRenameappPostWithHttpInfo($envName, $oldcontext, $newcontext, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestRenameappPost'][0])
    {
        $request = $this->environmentControlRestRenameappPostRequest($envName, $oldcontext, $newcontext, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRenameappPostAsync
     *
     * @param  string $envName (required)
     * @param  string $oldcontext (required)
     * @param  string $newcontext (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRenameappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRenameappPostAsync($envName, $oldcontext, $newcontext, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestRenameappPost'][0])
    {
        return $this->environmentControlRestRenameappPostAsyncWithHttpInfo($envName, $oldcontext, $newcontext, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRenameappPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $oldcontext (required)
     * @param  string $newcontext (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRenameappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRenameappPostAsyncWithHttpInfo($envName, $oldcontext, $newcontext, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestRenameappPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestRenameappPostRequest($envName, $oldcontext, $newcontext, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRenameappPost'
     *
     * @param  string $envName (required)
     * @param  string $oldcontext (required)
     * @param  string $newcontext (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRenameappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRenameappPostRequest($envName, $oldcontext, $newcontext, $nodeGroup = null, string $contentType = self::contentTypes['environmentControlRestRenameappPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRenameappPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRenameappPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRenameappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'oldcontext' is set
        if ($oldcontext === null || (is_array($oldcontext) && count($oldcontext) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oldcontext when calling environmentControlRestRenameappPost'
            );
        }
        if (strlen($oldcontext) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$oldcontext" when calling ControlServiceApi.environmentControlRestRenameappPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $oldcontext)) {
            throw new \InvalidArgumentException("invalid value for \"oldcontext\" when calling ControlServiceApi.environmentControlRestRenameappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'newcontext' is set
        if ($newcontext === null || (is_array($newcontext) && count($newcontext) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newcontext when calling environmentControlRestRenameappPost'
            );
        }
        if (strlen($newcontext) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$newcontext" when calling ControlServiceApi.environmentControlRestRenameappPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $newcontext)) {
            throw new \InvalidArgumentException("invalid value for \"newcontext\" when calling ControlServiceApi.environmentControlRestRenameappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestRenameappPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestRenameappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/renameapp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($oldcontext !== null) {
            $formParams['oldcontext'] = ObjectSerializer::toFormValue($oldcontext);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($newcontext !== null) {
            $formParams['newcontext'] = ObjectSerializer::toFormValue($newcontext);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestResetcontainerpasswordbyidPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeid nodeid (required)
     * @param  string $password password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetcontainerpasswordbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestResetcontainerpasswordbyidPost($envName, $nodeid, $password = null, string $contentType = self::contentTypes['environmentControlRestResetcontainerpasswordbyidPost'][0])
    {
        list($response) = $this->environmentControlRestResetcontainerpasswordbyidPostWithHttpInfo($envName, $nodeid, $password, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestResetcontainerpasswordbyidPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetcontainerpasswordbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestResetcontainerpasswordbyidPostWithHttpInfo($envName, $nodeid, $password = null, string $contentType = self::contentTypes['environmentControlRestResetcontainerpasswordbyidPost'][0])
    {
        $request = $this->environmentControlRestResetcontainerpasswordbyidPostRequest($envName, $nodeid, $password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestResetcontainerpasswordbyidPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetcontainerpasswordbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestResetcontainerpasswordbyidPostAsync($envName, $nodeid, $password = null, string $contentType = self::contentTypes['environmentControlRestResetcontainerpasswordbyidPost'][0])
    {
        return $this->environmentControlRestResetcontainerpasswordbyidPostAsyncWithHttpInfo($envName, $nodeid, $password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestResetcontainerpasswordbyidPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetcontainerpasswordbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestResetcontainerpasswordbyidPostAsyncWithHttpInfo($envName, $nodeid, $password = null, string $contentType = self::contentTypes['environmentControlRestResetcontainerpasswordbyidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestResetcontainerpasswordbyidPostRequest($envName, $nodeid, $password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestResetcontainerpasswordbyidPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetcontainerpasswordbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestResetcontainerpasswordbyidPostRequest($envName, $nodeid, $password = null, string $contentType = self::contentTypes['environmentControlRestResetcontainerpasswordbyidPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestResetcontainerpasswordbyidPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestResetcontainerpasswordbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestResetcontainerpasswordbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeid' is set
        if ($nodeid === null || (is_array($nodeid) && count($nodeid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeid when calling environmentControlRestResetcontainerpasswordbyidPost'
            );
        }
        if ($nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling ControlServiceApi.environmentControlRestResetcontainerpasswordbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling ControlServiceApi.environmentControlRestResetcontainerpasswordbyidPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling ControlServiceApi.environmentControlRestResetcontainerpasswordbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling ControlServiceApi.environmentControlRestResetcontainerpasswordbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/resetcontainerpasswordbyid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestResetcontainerspasswordbygroupPost
     *
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $password password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetcontainerspasswordbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestResetcontainerspasswordbygroupPost($envName, $nodeGroup, $password = null, string $contentType = self::contentTypes['environmentControlRestResetcontainerspasswordbygroupPost'][0])
    {
        list($response) = $this->environmentControlRestResetcontainerspasswordbygroupPostWithHttpInfo($envName, $nodeGroup, $password, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestResetcontainerspasswordbygroupPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetcontainerspasswordbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestResetcontainerspasswordbygroupPostWithHttpInfo($envName, $nodeGroup, $password = null, string $contentType = self::contentTypes['environmentControlRestResetcontainerspasswordbygroupPost'][0])
    {
        $request = $this->environmentControlRestResetcontainerspasswordbygroupPostRequest($envName, $nodeGroup, $password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestResetcontainerspasswordbygroupPostAsync
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetcontainerspasswordbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestResetcontainerspasswordbygroupPostAsync($envName, $nodeGroup, $password = null, string $contentType = self::contentTypes['environmentControlRestResetcontainerspasswordbygroupPost'][0])
    {
        return $this->environmentControlRestResetcontainerspasswordbygroupPostAsyncWithHttpInfo($envName, $nodeGroup, $password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestResetcontainerspasswordbygroupPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetcontainerspasswordbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestResetcontainerspasswordbygroupPostAsyncWithHttpInfo($envName, $nodeGroup, $password = null, string $contentType = self::contentTypes['environmentControlRestResetcontainerspasswordbygroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestResetcontainerspasswordbygroupPostRequest($envName, $nodeGroup, $password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestResetcontainerspasswordbygroupPost'
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetcontainerspasswordbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestResetcontainerspasswordbygroupPostRequest($envName, $nodeGroup, $password = null, string $contentType = self::contentTypes['environmentControlRestResetcontainerspasswordbygroupPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestResetcontainerspasswordbygroupPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestResetcontainerspasswordbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestResetcontainerspasswordbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentControlRestResetcontainerspasswordbygroupPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestResetcontainerspasswordbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestResetcontainerspasswordbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling ControlServiceApi.environmentControlRestResetcontainerspasswordbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling ControlServiceApi.environmentControlRestResetcontainerspasswordbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/resetcontainerspasswordbygroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestResetnodepasswordPost
     *
     * @param  string $envName envName (required)
     * @param  string $password password (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestResetnodepasswordPost($envName, $password = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordPost'][0])
    {
        list($response) = $this->environmentControlRestResetnodepasswordPostWithHttpInfo($envName, $password, $nodeGroup, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestResetnodepasswordPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $password (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestResetnodepasswordPostWithHttpInfo($envName, $password = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordPost'][0])
    {
        $request = $this->environmentControlRestResetnodepasswordPostRequest($envName, $password, $nodeGroup, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestResetnodepasswordPostAsync
     *
     * @param  string $envName (required)
     * @param  string $password (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestResetnodepasswordPostAsync($envName, $password = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordPost'][0])
    {
        return $this->environmentControlRestResetnodepasswordPostAsyncWithHttpInfo($envName, $password, $nodeGroup, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestResetnodepasswordPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $password (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestResetnodepasswordPostAsyncWithHttpInfo($envName, $password = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestResetnodepasswordPostRequest($envName, $password, $nodeGroup, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestResetnodepasswordPost'
     *
     * @param  string $envName (required)
     * @param  string $password (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestResetnodepasswordPostRequest($envName, $password = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestResetnodepasswordPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestResetnodepasswordPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestResetnodepasswordPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling ControlServiceApi.environmentControlRestResetnodepasswordPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling ControlServiceApi.environmentControlRestResetnodepasswordPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestResetnodepasswordPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestResetnodepasswordPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestResetnodepasswordPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestResetnodepasswordPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/resetnodepassword';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestResetnodepasswordbyidPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $password password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestResetnodepasswordbyidPost($envName, $nodeId, $password = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordbyidPost'][0])
    {
        list($response) = $this->environmentControlRestResetnodepasswordbyidPostWithHttpInfo($envName, $nodeId, $password, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestResetnodepasswordbyidPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestResetnodepasswordbyidPostWithHttpInfo($envName, $nodeId, $password = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordbyidPost'][0])
    {
        $request = $this->environmentControlRestResetnodepasswordbyidPostRequest($envName, $nodeId, $password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestResetnodepasswordbyidPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestResetnodepasswordbyidPostAsync($envName, $nodeId, $password = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordbyidPost'][0])
    {
        return $this->environmentControlRestResetnodepasswordbyidPostAsyncWithHttpInfo($envName, $nodeId, $password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestResetnodepasswordbyidPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestResetnodepasswordbyidPostAsyncWithHttpInfo($envName, $nodeId, $password = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordbyidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestResetnodepasswordbyidPostRequest($envName, $nodeId, $password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestResetnodepasswordbyidPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestResetnodepasswordbyidPostRequest($envName, $nodeId, $password = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordbyidPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestResetnodepasswordbyidPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestResetnodepasswordbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestResetnodepasswordbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestResetnodepasswordbyidPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestResetnodepasswordbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestResetnodepasswordbyidPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling ControlServiceApi.environmentControlRestResetnodepasswordbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling ControlServiceApi.environmentControlRestResetnodepasswordbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/resetnodepasswordbyid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestResetnodepasswordbytypePost
     *
     * @param  string $envName envName (required)
     * @param  string $nodeType nodeType (required)
     * @param  string $password password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordbytypePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestResetnodepasswordbytypePost($envName, $nodeType, $password = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordbytypePost'][0])
    {
        list($response) = $this->environmentControlRestResetnodepasswordbytypePostWithHttpInfo($envName, $nodeType, $password, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestResetnodepasswordbytypePostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeType (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordbytypePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestResetnodepasswordbytypePostWithHttpInfo($envName, $nodeType, $password = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordbytypePost'][0])
    {
        $request = $this->environmentControlRestResetnodepasswordbytypePostRequest($envName, $nodeType, $password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestResetnodepasswordbytypePostAsync
     *
     * @param  string $envName (required)
     * @param  string $nodeType (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordbytypePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestResetnodepasswordbytypePostAsync($envName, $nodeType, $password = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordbytypePost'][0])
    {
        return $this->environmentControlRestResetnodepasswordbytypePostAsyncWithHttpInfo($envName, $nodeType, $password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestResetnodepasswordbytypePostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeType (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordbytypePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestResetnodepasswordbytypePostAsyncWithHttpInfo($envName, $nodeType, $password = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordbytypePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestResetnodepasswordbytypePostRequest($envName, $nodeType, $password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestResetnodepasswordbytypePost'
     *
     * @param  string $envName (required)
     * @param  string $nodeType (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetnodepasswordbytypePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestResetnodepasswordbytypePostRequest($envName, $nodeType, $password = null, string $contentType = self::contentTypes['environmentControlRestResetnodepasswordbytypePost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestResetnodepasswordbytypePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestResetnodepasswordbytypePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestResetnodepasswordbytypePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeType' is set
        if ($nodeType === null || (is_array($nodeType) && count($nodeType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeType when calling environmentControlRestResetnodepasswordbytypePost'
            );
        }
        if (strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling ControlServiceApi.environmentControlRestResetnodepasswordbytypePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling ControlServiceApi.environmentControlRestResetnodepasswordbytypePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling ControlServiceApi.environmentControlRestResetnodepasswordbytypePost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling ControlServiceApi.environmentControlRestResetnodepasswordbytypePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/resetnodepasswordbytype';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestResetservicepasswordPost
     *
     * @param  string $envName envName (required)
     * @param  string $password password (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetservicepasswordPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestResetservicepasswordPost($envName, $password = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestResetservicepasswordPost'][0])
    {
        list($response) = $this->environmentControlRestResetservicepasswordPostWithHttpInfo($envName, $password, $nodeGroup, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestResetservicepasswordPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $password (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetservicepasswordPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestResetservicepasswordPostWithHttpInfo($envName, $password = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestResetservicepasswordPost'][0])
    {
        $request = $this->environmentControlRestResetservicepasswordPostRequest($envName, $password, $nodeGroup, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestResetservicepasswordPostAsync
     *
     * @param  string $envName (required)
     * @param  string $password (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetservicepasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestResetservicepasswordPostAsync($envName, $password = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestResetservicepasswordPost'][0])
    {
        return $this->environmentControlRestResetservicepasswordPostAsyncWithHttpInfo($envName, $password, $nodeGroup, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestResetservicepasswordPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $password (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetservicepasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestResetservicepasswordPostAsyncWithHttpInfo($envName, $password = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestResetservicepasswordPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestResetservicepasswordPostRequest($envName, $password, $nodeGroup, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestResetservicepasswordPost'
     *
     * @param  string $envName (required)
     * @param  string $password (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestResetservicepasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestResetservicepasswordPostRequest($envName, $password = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestResetservicepasswordPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestResetservicepasswordPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestResetservicepasswordPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestResetservicepasswordPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling ControlServiceApi.environmentControlRestResetservicepasswordPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling ControlServiceApi.environmentControlRestResetservicepasswordPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestResetservicepasswordPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestResetservicepasswordPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestResetservicepasswordPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestResetservicepasswordPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/resetservicepassword';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRestartcontainerbyidPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeid nodeid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartcontainerbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestRestartcontainerbyidPost($envName, $nodeid, string $contentType = self::contentTypes['environmentControlRestRestartcontainerbyidPost'][0])
    {
        list($response) = $this->environmentControlRestRestartcontainerbyidPostWithHttpInfo($envName, $nodeid, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRestartcontainerbyidPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartcontainerbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRestartcontainerbyidPostWithHttpInfo($envName, $nodeid, string $contentType = self::contentTypes['environmentControlRestRestartcontainerbyidPost'][0])
    {
        $request = $this->environmentControlRestRestartcontainerbyidPostRequest($envName, $nodeid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRestartcontainerbyidPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartcontainerbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRestartcontainerbyidPostAsync($envName, $nodeid, string $contentType = self::contentTypes['environmentControlRestRestartcontainerbyidPost'][0])
    {
        return $this->environmentControlRestRestartcontainerbyidPostAsyncWithHttpInfo($envName, $nodeid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRestartcontainerbyidPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartcontainerbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRestartcontainerbyidPostAsyncWithHttpInfo($envName, $nodeid, string $contentType = self::contentTypes['environmentControlRestRestartcontainerbyidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestRestartcontainerbyidPostRequest($envName, $nodeid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRestartcontainerbyidPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartcontainerbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRestartcontainerbyidPostRequest($envName, $nodeid, string $contentType = self::contentTypes['environmentControlRestRestartcontainerbyidPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRestartcontainerbyidPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRestartcontainerbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRestartcontainerbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeid' is set
        if ($nodeid === null || (is_array($nodeid) && count($nodeid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeid when calling environmentControlRestRestartcontainerbyidPost'
            );
        }
        if ($nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling ControlServiceApi.environmentControlRestRestartcontainerbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling ControlServiceApi.environmentControlRestRestartcontainerbyidPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/restartcontainerbyid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRestartnodebyidPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartnodebyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse
     */
    public function environmentControlRestRestartnodebyidPost($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRestartnodebyidPost'][0])
    {
        list($response) = $this->environmentControlRestRestartnodebyidPostWithHttpInfo($envName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRestartnodebyidPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartnodebyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRestartnodebyidPostWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRestartnodebyidPost'][0])
    {
        $request = $this->environmentControlRestRestartnodebyidPostRequest($envName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRestartnodebyidPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartnodebyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRestartnodebyidPostAsync($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRestartnodebyidPost'][0])
    {
        return $this->environmentControlRestRestartnodebyidPostAsyncWithHttpInfo($envName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRestartnodebyidPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartnodebyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRestartnodebyidPostAsyncWithHttpInfo($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRestartnodebyidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponse';
        $request = $this->environmentControlRestRestartnodebyidPostRequest($envName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRestartnodebyidPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartnodebyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRestartnodebyidPostRequest($envName, $nodeId, string $contentType = self::contentTypes['environmentControlRestRestartnodebyidPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRestartnodebyidPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRestartnodebyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRestartnodebyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestRestartnodebyidPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRestartnodebyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRestartnodebyidPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/restartnodebyid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRestartnodesPost
     *
     * @param  string $envName envName (required)
     * @param  int $delay delay (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  bool $isSequential isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartnodesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestRestartnodesPost($envName, $delay = null, $nodeGroup = null, $nodeId = null, $isSequential = null, string $contentType = self::contentTypes['environmentControlRestRestartnodesPost'][0])
    {
        list($response) = $this->environmentControlRestRestartnodesPostWithHttpInfo($envName, $delay, $nodeGroup, $nodeId, $isSequential, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRestartnodesPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $delay (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartnodesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRestartnodesPostWithHttpInfo($envName, $delay = null, $nodeGroup = null, $nodeId = null, $isSequential = null, string $contentType = self::contentTypes['environmentControlRestRestartnodesPost'][0])
    {
        $request = $this->environmentControlRestRestartnodesPostRequest($envName, $delay, $nodeGroup, $nodeId, $isSequential, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRestartnodesPostAsync
     *
     * @param  string $envName (required)
     * @param  int $delay (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartnodesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRestartnodesPostAsync($envName, $delay = null, $nodeGroup = null, $nodeId = null, $isSequential = null, string $contentType = self::contentTypes['environmentControlRestRestartnodesPost'][0])
    {
        return $this->environmentControlRestRestartnodesPostAsyncWithHttpInfo($envName, $delay, $nodeGroup, $nodeId, $isSequential, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRestartnodesPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $delay (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartnodesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRestartnodesPostAsyncWithHttpInfo($envName, $delay = null, $nodeGroup = null, $nodeId = null, $isSequential = null, string $contentType = self::contentTypes['environmentControlRestRestartnodesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestRestartnodesPostRequest($envName, $delay, $nodeGroup, $nodeId, $isSequential, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRestartnodesPost'
     *
     * @param  string $envName (required)
     * @param  int $delay (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartnodesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRestartnodesPostRequest($envName, $delay = null, $nodeGroup = null, $nodeId = null, $isSequential = null, string $contentType = self::contentTypes['environmentControlRestRestartnodesPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRestartnodesPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRestartnodesPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRestartnodesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling ControlServiceApi.environmentControlRestRestartnodesPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling ControlServiceApi.environmentControlRestRestartnodesPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestRestartnodesPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestRestartnodesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRestartnodesPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRestartnodesPost, must be bigger than or equal to -2147483648.');
        }
        


        $resourcePath = '/environment/control/rest/restartnodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($isSequential !== null) {
            $formParams['isSequential'] = ObjectSerializer::toFormValue($isSequential);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRestartservicesPost
     *
     * @param  string $envName envName (required)
     * @param  int $delay delay (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  bool $isSequential isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartservicesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses
     */
    public function environmentControlRestRestartservicesPost($envName, $delay = null, $nodeGroup = null, $nodeId = null, $isSequential = null, string $contentType = self::contentTypes['environmentControlRestRestartservicesPost'][0])
    {
        list($response) = $this->environmentControlRestRestartservicesPostWithHttpInfo($envName, $delay, $nodeGroup, $nodeId, $isSequential, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRestartservicesPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $delay (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartservicesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRestartservicesPostWithHttpInfo($envName, $delay = null, $nodeGroup = null, $nodeId = null, $isSequential = null, string $contentType = self::contentTypes['environmentControlRestRestartservicesPost'][0])
    {
        $request = $this->environmentControlRestRestartservicesPostRequest($envName, $delay, $nodeGroup, $nodeId, $isSequential, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRestartservicesPostAsync
     *
     * @param  string $envName (required)
     * @param  int $delay (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartservicesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRestartservicesPostAsync($envName, $delay = null, $nodeGroup = null, $nodeId = null, $isSequential = null, string $contentType = self::contentTypes['environmentControlRestRestartservicesPost'][0])
    {
        return $this->environmentControlRestRestartservicesPostAsyncWithHttpInfo($envName, $delay, $nodeGroup, $nodeId, $isSequential, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRestartservicesPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $delay (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartservicesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRestartservicesPostAsyncWithHttpInfo($envName, $delay = null, $nodeGroup = null, $nodeId = null, $isSequential = null, string $contentType = self::contentTypes['environmentControlRestRestartservicesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
        $request = $this->environmentControlRestRestartservicesPostRequest($envName, $delay, $nodeGroup, $nodeId, $isSequential, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRestartservicesPost'
     *
     * @param  string $envName (required)
     * @param  int $delay (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestartservicesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRestartservicesPostRequest($envName, $delay = null, $nodeGroup = null, $nodeId = null, $isSequential = null, string $contentType = self::contentTypes['environmentControlRestRestartservicesPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRestartservicesPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRestartservicesPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRestartservicesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling ControlServiceApi.environmentControlRestRestartservicesPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling ControlServiceApi.environmentControlRestRestartservicesPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestRestartservicesPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestRestartservicesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRestartservicesPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestRestartservicesPost, must be bigger than or equal to -2147483648.');
        }
        


        $resourcePath = '/environment/control/rest/restartservices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($isSequential !== null) {
            $formParams['isSequential'] = ObjectSerializer::toFormValue($isSequential);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestRestoredumpPost
     *
     * @param  string $dumpUrl dumpUrl (required)
     * @param  string $password password (required)
     * @param  string $envName envName (required)
     * @param  string $dbName dbName (required)
     * @param  string $nodeType nodeType (required)
     * @param  string $user user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestoredumpPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestRestoredumpPost($dumpUrl, $password, $envName, $dbName, $nodeType, $user = null, string $contentType = self::contentTypes['environmentControlRestRestoredumpPost'][0])
    {
        list($response) = $this->environmentControlRestRestoredumpPostWithHttpInfo($dumpUrl, $password, $envName, $dbName, $nodeType, $user, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestRestoredumpPostWithHttpInfo
     *
     * @param  string $dumpUrl (required)
     * @param  string $password (required)
     * @param  string $envName (required)
     * @param  string $dbName (required)
     * @param  string $nodeType (required)
     * @param  string $user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestoredumpPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestRestoredumpPostWithHttpInfo($dumpUrl, $password, $envName, $dbName, $nodeType, $user = null, string $contentType = self::contentTypes['environmentControlRestRestoredumpPost'][0])
    {
        $request = $this->environmentControlRestRestoredumpPostRequest($dumpUrl, $password, $envName, $dbName, $nodeType, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestRestoredumpPostAsync
     *
     * @param  string $dumpUrl (required)
     * @param  string $password (required)
     * @param  string $envName (required)
     * @param  string $dbName (required)
     * @param  string $nodeType (required)
     * @param  string $user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestoredumpPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRestoredumpPostAsync($dumpUrl, $password, $envName, $dbName, $nodeType, $user = null, string $contentType = self::contentTypes['environmentControlRestRestoredumpPost'][0])
    {
        return $this->environmentControlRestRestoredumpPostAsyncWithHttpInfo($dumpUrl, $password, $envName, $dbName, $nodeType, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestRestoredumpPostAsyncWithHttpInfo
     *
     * @param  string $dumpUrl (required)
     * @param  string $password (required)
     * @param  string $envName (required)
     * @param  string $dbName (required)
     * @param  string $nodeType (required)
     * @param  string $user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestoredumpPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestRestoredumpPostAsyncWithHttpInfo($dumpUrl, $password, $envName, $dbName, $nodeType, $user = null, string $contentType = self::contentTypes['environmentControlRestRestoredumpPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestRestoredumpPostRequest($dumpUrl, $password, $envName, $dbName, $nodeType, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestRestoredumpPost'
     *
     * @param  string $dumpUrl (required)
     * @param  string $password (required)
     * @param  string $envName (required)
     * @param  string $dbName (required)
     * @param  string $nodeType (required)
     * @param  string $user (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestRestoredumpPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestRestoredumpPostRequest($dumpUrl, $password, $envName, $dbName, $nodeType, $user = null, string $contentType = self::contentTypes['environmentControlRestRestoredumpPost'][0])
    {

        // verify the required parameter 'dumpUrl' is set
        if ($dumpUrl === null || (is_array($dumpUrl) && count($dumpUrl) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dumpUrl when calling environmentControlRestRestoredumpPost'
            );
        }
        if (strlen($dumpUrl) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$dumpUrl" when calling ControlServiceApi.environmentControlRestRestoredumpPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $dumpUrl)) {
            throw new \InvalidArgumentException("invalid value for \"dumpUrl\" when calling ControlServiceApi.environmentControlRestRestoredumpPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'password' is set
        if ($password === null || (is_array($password) && count($password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $password when calling environmentControlRestRestoredumpPost'
            );
        }
        if (strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling ControlServiceApi.environmentControlRestRestoredumpPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling ControlServiceApi.environmentControlRestRestoredumpPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestRestoredumpPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestRestoredumpPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestRestoredumpPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'dbName' is set
        if ($dbName === null || (is_array($dbName) && count($dbName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dbName when calling environmentControlRestRestoredumpPost'
            );
        }
        if (strlen($dbName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$dbName" when calling ControlServiceApi.environmentControlRestRestoredumpPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $dbName)) {
            throw new \InvalidArgumentException("invalid value for \"dbName\" when calling ControlServiceApi.environmentControlRestRestoredumpPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeType' is set
        if ($nodeType === null || (is_array($nodeType) && count($nodeType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeType when calling environmentControlRestRestoredumpPost'
            );
        }
        if (strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling ControlServiceApi.environmentControlRestRestoredumpPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling ControlServiceApi.environmentControlRestRestoredumpPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($user !== null && strlen($user) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$user" when calling ControlServiceApi.environmentControlRestRestoredumpPost, must be smaller than or equal to 2147483647.');
        }
        if ($user !== null && !preg_match("/(.*){0,2147483647}/", $user)) {
            throw new \InvalidArgumentException("invalid value for \"user\" when calling ControlServiceApi.environmentControlRestRestoredumpPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/restoredump';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($dumpUrl !== null) {
            $formParams['dumpUrl'] = ObjectSerializer::toFormValue($dumpUrl);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($dbName !== null) {
            $formParams['dbName'] = ObjectSerializer::toFormValue($dbName);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }
        // form params
        if ($user !== null) {
            $formParams['user'] = ObjectSerializer::toFormValue($user);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestSetcloudletscountbyidPost
     *
     * @param  string $envName envName (required)
     * @param  int $count count (required)
     * @param  int $flexibleCloudlets flexibleCloudlets (required)
     * @param  int $fixedCloudlets fixedCloudlets (required)
     * @param  int $nodeid nodeid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcloudletscountbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestSetcloudletscountbyidPost($envName, $count, $flexibleCloudlets, $fixedCloudlets, $nodeid, string $contentType = self::contentTypes['environmentControlRestSetcloudletscountbyidPost'][0])
    {
        list($response) = $this->environmentControlRestSetcloudletscountbyidPostWithHttpInfo($envName, $count, $flexibleCloudlets, $fixedCloudlets, $nodeid, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestSetcloudletscountbyidPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $count (required)
     * @param  int $flexibleCloudlets (required)
     * @param  int $fixedCloudlets (required)
     * @param  int $nodeid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcloudletscountbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestSetcloudletscountbyidPostWithHttpInfo($envName, $count, $flexibleCloudlets, $fixedCloudlets, $nodeid, string $contentType = self::contentTypes['environmentControlRestSetcloudletscountbyidPost'][0])
    {
        $request = $this->environmentControlRestSetcloudletscountbyidPostRequest($envName, $count, $flexibleCloudlets, $fixedCloudlets, $nodeid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestSetcloudletscountbyidPostAsync
     *
     * @param  string $envName (required)
     * @param  int $count (required)
     * @param  int $flexibleCloudlets (required)
     * @param  int $fixedCloudlets (required)
     * @param  int $nodeid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcloudletscountbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetcloudletscountbyidPostAsync($envName, $count, $flexibleCloudlets, $fixedCloudlets, $nodeid, string $contentType = self::contentTypes['environmentControlRestSetcloudletscountbyidPost'][0])
    {
        return $this->environmentControlRestSetcloudletscountbyidPostAsyncWithHttpInfo($envName, $count, $flexibleCloudlets, $fixedCloudlets, $nodeid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestSetcloudletscountbyidPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $count (required)
     * @param  int $flexibleCloudlets (required)
     * @param  int $fixedCloudlets (required)
     * @param  int $nodeid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcloudletscountbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetcloudletscountbyidPostAsyncWithHttpInfo($envName, $count, $flexibleCloudlets, $fixedCloudlets, $nodeid, string $contentType = self::contentTypes['environmentControlRestSetcloudletscountbyidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestSetcloudletscountbyidPostRequest($envName, $count, $flexibleCloudlets, $fixedCloudlets, $nodeid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestSetcloudletscountbyidPost'
     *
     * @param  string $envName (required)
     * @param  int $count (required)
     * @param  int $flexibleCloudlets (required)
     * @param  int $fixedCloudlets (required)
     * @param  int $nodeid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcloudletscountbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestSetcloudletscountbyidPostRequest($envName, $count, $flexibleCloudlets, $fixedCloudlets, $nodeid, string $contentType = self::contentTypes['environmentControlRestSetcloudletscountbyidPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestSetcloudletscountbyidPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestSetcloudletscountbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestSetcloudletscountbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'count' is set
        if ($count === null || (is_array($count) && count($count) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $count when calling environmentControlRestSetcloudletscountbyidPost'
            );
        }
        if ($count > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling ControlServiceApi.environmentControlRestSetcloudletscountbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($count < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling ControlServiceApi.environmentControlRestSetcloudletscountbyidPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'flexibleCloudlets' is set
        if ($flexibleCloudlets === null || (is_array($flexibleCloudlets) && count($flexibleCloudlets) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flexibleCloudlets when calling environmentControlRestSetcloudletscountbyidPost'
            );
        }
        if ($flexibleCloudlets > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$flexibleCloudlets" when calling ControlServiceApi.environmentControlRestSetcloudletscountbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($flexibleCloudlets < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$flexibleCloudlets" when calling ControlServiceApi.environmentControlRestSetcloudletscountbyidPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'fixedCloudlets' is set
        if ($fixedCloudlets === null || (is_array($fixedCloudlets) && count($fixedCloudlets) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fixedCloudlets when calling environmentControlRestSetcloudletscountbyidPost'
            );
        }
        if ($fixedCloudlets > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$fixedCloudlets" when calling ControlServiceApi.environmentControlRestSetcloudletscountbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($fixedCloudlets < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$fixedCloudlets" when calling ControlServiceApi.environmentControlRestSetcloudletscountbyidPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'nodeid' is set
        if ($nodeid === null || (is_array($nodeid) && count($nodeid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeid when calling environmentControlRestSetcloudletscountbyidPost'
            );
        }
        if ($nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling ControlServiceApi.environmentControlRestSetcloudletscountbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling ControlServiceApi.environmentControlRestSetcloudletscountbyidPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/setcloudletscountbyid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($count !== null) {
            $formParams['count'] = ObjectSerializer::toFormValue($count);
        }
        // form params
        if ($flexibleCloudlets !== null) {
            $formParams['flexibleCloudlets'] = ObjectSerializer::toFormValue($flexibleCloudlets);
        }
        // form params
        if ($fixedCloudlets !== null) {
            $formParams['fixedCloudlets'] = ObjectSerializer::toFormValue($fixedCloudlets);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestSetcontainerentrypointPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $data data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerentrypointPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestSetcontainerentrypointPost($envName, $nodeId, $data = null, string $contentType = self::contentTypes['environmentControlRestSetcontainerentrypointPost'][0])
    {
        list($response) = $this->environmentControlRestSetcontainerentrypointPostWithHttpInfo($envName, $nodeId, $data, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestSetcontainerentrypointPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerentrypointPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestSetcontainerentrypointPostWithHttpInfo($envName, $nodeId, $data = null, string $contentType = self::contentTypes['environmentControlRestSetcontainerentrypointPost'][0])
    {
        $request = $this->environmentControlRestSetcontainerentrypointPostRequest($envName, $nodeId, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestSetcontainerentrypointPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerentrypointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetcontainerentrypointPostAsync($envName, $nodeId, $data = null, string $contentType = self::contentTypes['environmentControlRestSetcontainerentrypointPost'][0])
    {
        return $this->environmentControlRestSetcontainerentrypointPostAsyncWithHttpInfo($envName, $nodeId, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestSetcontainerentrypointPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerentrypointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetcontainerentrypointPostAsyncWithHttpInfo($envName, $nodeId, $data = null, string $contentType = self::contentTypes['environmentControlRestSetcontainerentrypointPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestSetcontainerentrypointPostRequest($envName, $nodeId, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestSetcontainerentrypointPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerentrypointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestSetcontainerentrypointPostRequest($envName, $nodeId, $data = null, string $contentType = self::contentTypes['environmentControlRestSetcontainerentrypointPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestSetcontainerentrypointPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestSetcontainerentrypointPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestSetcontainerentrypointPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestSetcontainerentrypointPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestSetcontainerentrypointPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestSetcontainerentrypointPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($data !== null && strlen($data) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$data" when calling ControlServiceApi.environmentControlRestSetcontainerentrypointPost, must be smaller than or equal to 2147483647.');
        }
        if ($data !== null && !preg_match("/(.*){0,2147483647}/", $data)) {
            throw new \InvalidArgumentException("invalid value for \"data\" when calling ControlServiceApi.environmentControlRestSetcontainerentrypointPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/setcontainerentrypoint';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($data !== null) {
            $formParams['data'] = ObjectSerializer::toFormValue($data);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestSetcontainerenvvarsPost
     *
     * @param  string $envName envName (required)
     * @param  string $vars vars (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestSetcontainerenvvarsPost($envName, $vars, $nodeId, string $contentType = self::contentTypes['environmentControlRestSetcontainerenvvarsPost'][0])
    {
        list($response) = $this->environmentControlRestSetcontainerenvvarsPostWithHttpInfo($envName, $vars, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestSetcontainerenvvarsPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $vars (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestSetcontainerenvvarsPostWithHttpInfo($envName, $vars, $nodeId, string $contentType = self::contentTypes['environmentControlRestSetcontainerenvvarsPost'][0])
    {
        $request = $this->environmentControlRestSetcontainerenvvarsPostRequest($envName, $vars, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestSetcontainerenvvarsPostAsync
     *
     * @param  string $envName (required)
     * @param  string $vars (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetcontainerenvvarsPostAsync($envName, $vars, $nodeId, string $contentType = self::contentTypes['environmentControlRestSetcontainerenvvarsPost'][0])
    {
        return $this->environmentControlRestSetcontainerenvvarsPostAsyncWithHttpInfo($envName, $vars, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestSetcontainerenvvarsPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $vars (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetcontainerenvvarsPostAsyncWithHttpInfo($envName, $vars, $nodeId, string $contentType = self::contentTypes['environmentControlRestSetcontainerenvvarsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestSetcontainerenvvarsPostRequest($envName, $vars, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestSetcontainerenvvarsPost'
     *
     * @param  string $envName (required)
     * @param  string $vars (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerenvvarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestSetcontainerenvvarsPostRequest($envName, $vars, $nodeId, string $contentType = self::contentTypes['environmentControlRestSetcontainerenvvarsPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestSetcontainerenvvarsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestSetcontainerenvvarsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestSetcontainerenvvarsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'vars' is set
        if ($vars === null || (is_array($vars) && count($vars) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vars when calling environmentControlRestSetcontainerenvvarsPost'
            );
        }
        if (strlen($vars) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$vars" when calling ControlServiceApi.environmentControlRestSetcontainerenvvarsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $vars)) {
            throw new \InvalidArgumentException("invalid value for \"vars\" when calling ControlServiceApi.environmentControlRestSetcontainerenvvarsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestSetcontainerenvvarsPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestSetcontainerenvvarsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestSetcontainerenvvarsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/setcontainerenvvars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($vars !== null) {
            $formParams['vars'] = ObjectSerializer::toFormValue($vars);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestSetcontainerenvvarsbygroupPost
     *
     * @param  string $data data (required)
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerenvvarsbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestSetcontainerenvvarsbygroupPost($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestSetcontainerenvvarsbygroupPost'][0])
    {
        list($response) = $this->environmentControlRestSetcontainerenvvarsbygroupPostWithHttpInfo($data, $envName, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestSetcontainerenvvarsbygroupPostWithHttpInfo
     *
     * @param  string $data (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerenvvarsbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestSetcontainerenvvarsbygroupPostWithHttpInfo($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestSetcontainerenvvarsbygroupPost'][0])
    {
        $request = $this->environmentControlRestSetcontainerenvvarsbygroupPostRequest($data, $envName, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestSetcontainerenvvarsbygroupPostAsync
     *
     * @param  string $data (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerenvvarsbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetcontainerenvvarsbygroupPostAsync($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestSetcontainerenvvarsbygroupPost'][0])
    {
        return $this->environmentControlRestSetcontainerenvvarsbygroupPostAsyncWithHttpInfo($data, $envName, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestSetcontainerenvvarsbygroupPostAsyncWithHttpInfo
     *
     * @param  string $data (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerenvvarsbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetcontainerenvvarsbygroupPostAsyncWithHttpInfo($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestSetcontainerenvvarsbygroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestSetcontainerenvvarsbygroupPostRequest($data, $envName, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestSetcontainerenvvarsbygroupPost'
     *
     * @param  string $data (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerenvvarsbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestSetcontainerenvvarsbygroupPostRequest($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentControlRestSetcontainerenvvarsbygroupPost'][0])
    {

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling environmentControlRestSetcontainerenvvarsbygroupPost'
            );
        }
        if (strlen($data) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$data" when calling ControlServiceApi.environmentControlRestSetcontainerenvvarsbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $data)) {
            throw new \InvalidArgumentException("invalid value for \"data\" when calling ControlServiceApi.environmentControlRestSetcontainerenvvarsbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestSetcontainerenvvarsbygroupPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestSetcontainerenvvarsbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestSetcontainerenvvarsbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentControlRestSetcontainerenvvarsbygroupPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestSetcontainerenvvarsbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestSetcontainerenvvarsbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/setcontainerenvvarsbygroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($data !== null) {
            $formParams['data'] = ObjectSerializer::toFormValue($data);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestSetcontainerruncmdPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $data data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerruncmdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestSetcontainerruncmdPost($envName, $nodeId, $data = null, string $contentType = self::contentTypes['environmentControlRestSetcontainerruncmdPost'][0])
    {
        list($response) = $this->environmentControlRestSetcontainerruncmdPostWithHttpInfo($envName, $nodeId, $data, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestSetcontainerruncmdPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerruncmdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestSetcontainerruncmdPostWithHttpInfo($envName, $nodeId, $data = null, string $contentType = self::contentTypes['environmentControlRestSetcontainerruncmdPost'][0])
    {
        $request = $this->environmentControlRestSetcontainerruncmdPostRequest($envName, $nodeId, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestSetcontainerruncmdPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerruncmdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetcontainerruncmdPostAsync($envName, $nodeId, $data = null, string $contentType = self::contentTypes['environmentControlRestSetcontainerruncmdPost'][0])
    {
        return $this->environmentControlRestSetcontainerruncmdPostAsyncWithHttpInfo($envName, $nodeId, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestSetcontainerruncmdPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerruncmdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetcontainerruncmdPostAsyncWithHttpInfo($envName, $nodeId, $data = null, string $contentType = self::contentTypes['environmentControlRestSetcontainerruncmdPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestSetcontainerruncmdPostRequest($envName, $nodeId, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestSetcontainerruncmdPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetcontainerruncmdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestSetcontainerruncmdPostRequest($envName, $nodeId, $data = null, string $contentType = self::contentTypes['environmentControlRestSetcontainerruncmdPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestSetcontainerruncmdPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestSetcontainerruncmdPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestSetcontainerruncmdPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestSetcontainerruncmdPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestSetcontainerruncmdPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestSetcontainerruncmdPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($data !== null && strlen($data) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$data" when calling ControlServiceApi.environmentControlRestSetcontainerruncmdPost, must be smaller than or equal to 2147483647.');
        }
        if ($data !== null && !preg_match("/(.*){0,2147483647}/", $data)) {
            throw new \InvalidArgumentException("invalid value for \"data\" when calling ControlServiceApi.environmentControlRestSetcontainerruncmdPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/setcontainerruncmd';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($data !== null) {
            $formParams['data'] = ObjectSerializer::toFormValue($data);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestSetenvdisplaynamePost
     *
     * @param  string $envName envName (required)
     * @param  string $displayName displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetenvdisplaynamePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestSetenvdisplaynamePost($envName, $displayName = null, string $contentType = self::contentTypes['environmentControlRestSetenvdisplaynamePost'][0])
    {
        list($response) = $this->environmentControlRestSetenvdisplaynamePostWithHttpInfo($envName, $displayName, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestSetenvdisplaynamePostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetenvdisplaynamePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestSetenvdisplaynamePostWithHttpInfo($envName, $displayName = null, string $contentType = self::contentTypes['environmentControlRestSetenvdisplaynamePost'][0])
    {
        $request = $this->environmentControlRestSetenvdisplaynamePostRequest($envName, $displayName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestSetenvdisplaynamePostAsync
     *
     * @param  string $envName (required)
     * @param  string $displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetenvdisplaynamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetenvdisplaynamePostAsync($envName, $displayName = null, string $contentType = self::contentTypes['environmentControlRestSetenvdisplaynamePost'][0])
    {
        return $this->environmentControlRestSetenvdisplaynamePostAsyncWithHttpInfo($envName, $displayName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestSetenvdisplaynamePostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetenvdisplaynamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetenvdisplaynamePostAsyncWithHttpInfo($envName, $displayName = null, string $contentType = self::contentTypes['environmentControlRestSetenvdisplaynamePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestSetenvdisplaynamePostRequest($envName, $displayName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestSetenvdisplaynamePost'
     *
     * @param  string $envName (required)
     * @param  string $displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetenvdisplaynamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestSetenvdisplaynamePostRequest($envName, $displayName = null, string $contentType = self::contentTypes['environmentControlRestSetenvdisplaynamePost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestSetenvdisplaynamePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestSetenvdisplaynamePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestSetenvdisplaynamePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($displayName !== null && strlen($displayName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$displayName" when calling ControlServiceApi.environmentControlRestSetenvdisplaynamePost, must be smaller than or equal to 2147483647.');
        }
        if ($displayName !== null && !preg_match("/(.*){0,2147483647}/", $displayName)) {
            throw new \InvalidArgumentException("invalid value for \"displayName\" when calling ControlServiceApi.environmentControlRestSetenvdisplaynamePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/setenvdisplayname';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($displayName !== null) {
            $formParams['displayName'] = ObjectSerializer::toFormValue($displayName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestSetenvgroupPost
     *
     * @param  string $envName envName (required)
     * @param  string $envGroup envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetenvgroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestSetenvgroupPost($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestSetenvgroupPost'][0])
    {
        list($response) = $this->environmentControlRestSetenvgroupPostWithHttpInfo($envName, $envGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestSetenvgroupPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetenvgroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestSetenvgroupPostWithHttpInfo($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestSetenvgroupPost'][0])
    {
        $request = $this->environmentControlRestSetenvgroupPostRequest($envName, $envGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestSetenvgroupPostAsync
     *
     * @param  string $envName (required)
     * @param  string $envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetenvgroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetenvgroupPostAsync($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestSetenvgroupPost'][0])
    {
        return $this->environmentControlRestSetenvgroupPostAsyncWithHttpInfo($envName, $envGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestSetenvgroupPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetenvgroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetenvgroupPostAsyncWithHttpInfo($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestSetenvgroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestSetenvgroupPostRequest($envName, $envGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestSetenvgroupPost'
     *
     * @param  string $envName (required)
     * @param  string $envGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetenvgroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestSetenvgroupPostRequest($envName, $envGroup, string $contentType = self::contentTypes['environmentControlRestSetenvgroupPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestSetenvgroupPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestSetenvgroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestSetenvgroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envGroup' is set
        if ($envGroup === null || (is_array($envGroup) && count($envGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envGroup when calling environmentControlRestSetenvgroupPost'
            );
        }
        if (strlen($envGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envGroup" when calling ControlServiceApi.environmentControlRestSetenvgroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envGroup)) {
            throw new \InvalidArgumentException("invalid value for \"envGroup\" when calling ControlServiceApi.environmentControlRestSetenvgroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/setenvgroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($envGroup !== null) {
            $formParams['envGroup'] = ObjectSerializer::toFormValue($envGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestSetnodedisplaynamePost
     *
     * @param  string $envName envName (required)
     * @param  string $displayName displayName (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetnodedisplaynamePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestSetnodedisplaynamePost($envName, $displayName = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestSetnodedisplaynamePost'][0])
    {
        list($response) = $this->environmentControlRestSetnodedisplaynamePostWithHttpInfo($envName, $displayName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestSetnodedisplaynamePostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $displayName (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetnodedisplaynamePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestSetnodedisplaynamePostWithHttpInfo($envName, $displayName = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestSetnodedisplaynamePost'][0])
    {
        $request = $this->environmentControlRestSetnodedisplaynamePostRequest($envName, $displayName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestSetnodedisplaynamePostAsync
     *
     * @param  string $envName (required)
     * @param  string $displayName (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetnodedisplaynamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetnodedisplaynamePostAsync($envName, $displayName = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestSetnodedisplaynamePost'][0])
    {
        return $this->environmentControlRestSetnodedisplaynamePostAsyncWithHttpInfo($envName, $displayName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestSetnodedisplaynamePostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $displayName (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetnodedisplaynamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetnodedisplaynamePostAsyncWithHttpInfo($envName, $displayName = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestSetnodedisplaynamePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestSetnodedisplaynamePostRequest($envName, $displayName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestSetnodedisplaynamePost'
     *
     * @param  string $envName (required)
     * @param  string $displayName (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetnodedisplaynamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestSetnodedisplaynamePostRequest($envName, $displayName = null, $nodeId = null, string $contentType = self::contentTypes['environmentControlRestSetnodedisplaynamePost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestSetnodedisplaynamePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestSetnodedisplaynamePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestSetnodedisplaynamePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($displayName !== null && strlen($displayName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$displayName" when calling ControlServiceApi.environmentControlRestSetnodedisplaynamePost, must be smaller than or equal to 2147483647.');
        }
        if ($displayName !== null && !preg_match("/(.*){0,2147483647}/", $displayName)) {
            throw new \InvalidArgumentException("invalid value for \"displayName\" when calling ControlServiceApi.environmentControlRestSetnodedisplaynamePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestSetnodedisplaynamePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestSetnodedisplaynamePost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/setnodedisplayname';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($displayName !== null) {
            $formParams['displayName'] = ObjectSerializer::toFormValue($displayName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestSetnodegroupdisplaynamePost
     *
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $displayName displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetnodegroupdisplaynamePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestSetnodegroupdisplaynamePost($envName, $nodeGroup, $displayName = null, string $contentType = self::contentTypes['environmentControlRestSetnodegroupdisplaynamePost'][0])
    {
        list($response) = $this->environmentControlRestSetnodegroupdisplaynamePostWithHttpInfo($envName, $nodeGroup, $displayName, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestSetnodegroupdisplaynamePostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetnodegroupdisplaynamePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestSetnodegroupdisplaynamePostWithHttpInfo($envName, $nodeGroup, $displayName = null, string $contentType = self::contentTypes['environmentControlRestSetnodegroupdisplaynamePost'][0])
    {
        $request = $this->environmentControlRestSetnodegroupdisplaynamePostRequest($envName, $nodeGroup, $displayName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestSetnodegroupdisplaynamePostAsync
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetnodegroupdisplaynamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetnodegroupdisplaynamePostAsync($envName, $nodeGroup, $displayName = null, string $contentType = self::contentTypes['environmentControlRestSetnodegroupdisplaynamePost'][0])
    {
        return $this->environmentControlRestSetnodegroupdisplaynamePostAsyncWithHttpInfo($envName, $nodeGroup, $displayName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestSetnodegroupdisplaynamePostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetnodegroupdisplaynamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetnodegroupdisplaynamePostAsyncWithHttpInfo($envName, $nodeGroup, $displayName = null, string $contentType = self::contentTypes['environmentControlRestSetnodegroupdisplaynamePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestSetnodegroupdisplaynamePostRequest($envName, $nodeGroup, $displayName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestSetnodegroupdisplaynamePost'
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $displayName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetnodegroupdisplaynamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestSetnodegroupdisplaynamePostRequest($envName, $nodeGroup, $displayName = null, string $contentType = self::contentTypes['environmentControlRestSetnodegroupdisplaynamePost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestSetnodegroupdisplaynamePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestSetnodegroupdisplaynamePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestSetnodegroupdisplaynamePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentControlRestSetnodegroupdisplaynamePost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestSetnodegroupdisplaynamePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestSetnodegroupdisplaynamePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($displayName !== null && strlen($displayName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$displayName" when calling ControlServiceApi.environmentControlRestSetnodegroupdisplaynamePost, must be smaller than or equal to 2147483647.');
        }
        if ($displayName !== null && !preg_match("/(.*){0,2147483647}/", $displayName)) {
            throw new \InvalidArgumentException("invalid value for \"displayName\" when calling ControlServiceApi.environmentControlRestSetnodegroupdisplaynamePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/setnodegroupdisplayname';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($displayName !== null) {
            $formParams['displayName'] = ObjectSerializer::toFormValue($displayName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestSetslbaccessenabledPost
     *
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  bool $enabled enabled (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetslbaccessenabledPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestSetslbaccessenabledPost($envName, $nodeGroup, $enabled, string $contentType = self::contentTypes['environmentControlRestSetslbaccessenabledPost'][0])
    {
        list($response) = $this->environmentControlRestSetslbaccessenabledPostWithHttpInfo($envName, $nodeGroup, $enabled, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestSetslbaccessenabledPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  bool $enabled (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetslbaccessenabledPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestSetslbaccessenabledPostWithHttpInfo($envName, $nodeGroup, $enabled, string $contentType = self::contentTypes['environmentControlRestSetslbaccessenabledPost'][0])
    {
        $request = $this->environmentControlRestSetslbaccessenabledPostRequest($envName, $nodeGroup, $enabled, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestSetslbaccessenabledPostAsync
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  bool $enabled (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetslbaccessenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetslbaccessenabledPostAsync($envName, $nodeGroup, $enabled, string $contentType = self::contentTypes['environmentControlRestSetslbaccessenabledPost'][0])
    {
        return $this->environmentControlRestSetslbaccessenabledPostAsyncWithHttpInfo($envName, $nodeGroup, $enabled, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestSetslbaccessenabledPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  bool $enabled (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetslbaccessenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSetslbaccessenabledPostAsyncWithHttpInfo($envName, $nodeGroup, $enabled, string $contentType = self::contentTypes['environmentControlRestSetslbaccessenabledPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestSetslbaccessenabledPostRequest($envName, $nodeGroup, $enabled, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestSetslbaccessenabledPost'
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  bool $enabled (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSetslbaccessenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestSetslbaccessenabledPostRequest($envName, $nodeGroup, $enabled, string $contentType = self::contentTypes['environmentControlRestSetslbaccessenabledPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestSetslbaccessenabledPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestSetslbaccessenabledPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestSetslbaccessenabledPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentControlRestSetslbaccessenabledPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling ControlServiceApi.environmentControlRestSetslbaccessenabledPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling ControlServiceApi.environmentControlRestSetslbaccessenabledPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'enabled' is set
        if ($enabled === null || (is_array($enabled) && count($enabled) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enabled when calling environmentControlRestSetslbaccessenabledPost'
            );
        }


        $resourcePath = '/environment/control/rest/setslbaccessenabled';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($enabled !== null) {
            $formParams['enabled'] = ObjectSerializer::toFormValue($enabled);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestSkipmessagePost
     *
     * @param  string $envName envName (required)
     * @param  int $id id (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSkipmessagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestSkipmessagePost($envName, $id, $nodeId, string $contentType = self::contentTypes['environmentControlRestSkipmessagePost'][0])
    {
        list($response) = $this->environmentControlRestSkipmessagePostWithHttpInfo($envName, $id, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestSkipmessagePostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $id (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSkipmessagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestSkipmessagePostWithHttpInfo($envName, $id, $nodeId, string $contentType = self::contentTypes['environmentControlRestSkipmessagePost'][0])
    {
        $request = $this->environmentControlRestSkipmessagePostRequest($envName, $id, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestSkipmessagePostAsync
     *
     * @param  string $envName (required)
     * @param  int $id (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSkipmessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSkipmessagePostAsync($envName, $id, $nodeId, string $contentType = self::contentTypes['environmentControlRestSkipmessagePost'][0])
    {
        return $this->environmentControlRestSkipmessagePostAsyncWithHttpInfo($envName, $id, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestSkipmessagePostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $id (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSkipmessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSkipmessagePostAsyncWithHttpInfo($envName, $id, $nodeId, string $contentType = self::contentTypes['environmentControlRestSkipmessagePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestSkipmessagePostRequest($envName, $id, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestSkipmessagePost'
     *
     * @param  string $envName (required)
     * @param  int $id (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSkipmessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestSkipmessagePostRequest($envName, $id, $nodeId, string $contentType = self::contentTypes['environmentControlRestSkipmessagePost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestSkipmessagePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestSkipmessagePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestSkipmessagePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling environmentControlRestSkipmessagePost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ControlServiceApi.environmentControlRestSkipmessagePost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ControlServiceApi.environmentControlRestSkipmessagePost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentControlRestSkipmessagePost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestSkipmessagePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling ControlServiceApi.environmentControlRestSkipmessagePost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/control/rest/skipmessage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestSleepenvPost
     *
     * @param  string $envName envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSleepenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestSleepenvPost($envName, string $contentType = self::contentTypes['environmentControlRestSleepenvPost'][0])
    {
        list($response) = $this->environmentControlRestSleepenvPostWithHttpInfo($envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestSleepenvPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSleepenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestSleepenvPostWithHttpInfo($envName, string $contentType = self::contentTypes['environmentControlRestSleepenvPost'][0])
    {
        $request = $this->environmentControlRestSleepenvPostRequest($envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestSleepenvPostAsync
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSleepenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSleepenvPostAsync($envName, string $contentType = self::contentTypes['environmentControlRestSleepenvPost'][0])
    {
        return $this->environmentControlRestSleepenvPostAsyncWithHttpInfo($envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestSleepenvPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSleepenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestSleepenvPostAsyncWithHttpInfo($envName, string $contentType = self::contentTypes['environmentControlRestSleepenvPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestSleepenvPostRequest($envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestSleepenvPost'
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestSleepenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestSleepenvPostRequest($envName, string $contentType = self::contentTypes['environmentControlRestSleepenvPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestSleepenvPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestSleepenvPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestSleepenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/sleepenv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestStartenvPost
     *
     * @param  string $envName envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestStartenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestStartenvPost($envName, string $contentType = self::contentTypes['environmentControlRestStartenvPost'][0])
    {
        list($response) = $this->environmentControlRestStartenvPostWithHttpInfo($envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestStartenvPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestStartenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestStartenvPostWithHttpInfo($envName, string $contentType = self::contentTypes['environmentControlRestStartenvPost'][0])
    {
        $request = $this->environmentControlRestStartenvPostRequest($envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestStartenvPostAsync
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestStartenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestStartenvPostAsync($envName, string $contentType = self::contentTypes['environmentControlRestStartenvPost'][0])
    {
        return $this->environmentControlRestStartenvPostAsyncWithHttpInfo($envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestStartenvPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestStartenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestStartenvPostAsyncWithHttpInfo($envName, string $contentType = self::contentTypes['environmentControlRestStartenvPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestStartenvPostRequest($envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestStartenvPost'
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestStartenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestStartenvPostRequest($envName, string $contentType = self::contentTypes['environmentControlRestStartenvPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestStartenvPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestStartenvPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestStartenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/startenv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentControlRestStopenvPost
     *
     * @param  string $envName envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestStopenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentControlRestStopenvPost($envName, string $contentType = self::contentTypes['environmentControlRestStopenvPost'][0])
    {
        list($response) = $this->environmentControlRestStopenvPostWithHttpInfo($envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentControlRestStopenvPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestStopenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentControlRestStopenvPostWithHttpInfo($envName, string $contentType = self::contentTypes['environmentControlRestStopenvPost'][0])
    {
        $request = $this->environmentControlRestStopenvPostRequest($envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentControlRestStopenvPostAsync
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestStopenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestStopenvPostAsync($envName, string $contentType = self::contentTypes['environmentControlRestStopenvPost'][0])
    {
        return $this->environmentControlRestStopenvPostAsyncWithHttpInfo($envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentControlRestStopenvPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestStopenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentControlRestStopenvPostAsyncWithHttpInfo($envName, string $contentType = self::contentTypes['environmentControlRestStopenvPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentControlRestStopenvPostRequest($envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentControlRestStopenvPost'
     *
     * @param  string $envName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentControlRestStopenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentControlRestStopenvPostRequest($envName, string $contentType = self::contentTypes['environmentControlRestStopenvPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentControlRestStopenvPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling ControlServiceApi.environmentControlRestStopenvPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling ControlServiceApi.environmentControlRestStopenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/control/rest/stopenv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
