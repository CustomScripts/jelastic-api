<?php
/**
 * FileServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * FileServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FileServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'environmentFileRestAddfavoritePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestAddmountpointbygroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestAddmountpointbyidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestAppendPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestCheckcrossmountPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestCopyPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestCreatePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestDeletePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestGetexportedlistPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestGetfavoritesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestGetlistPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestGetmountpointsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestReadPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestRemoveexportPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestRemovefavoritePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestRemovemountpointbygroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestRemovemountpointbyidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestRenamePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestReplaceinbodyPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestUnpackbyidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestUnpackbytypePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestUploadPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentFileRestWritePost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation environmentFileRestAddfavoritePost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  string $filter filter (optional)
     * @param  string $keyword keyword (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  bool $isDir isDir (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddfavoritePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentFileRestAddfavoritePost($path, $envName, $filter = null, $keyword = null, $nodeGroup = null, $nodeId = null, $isDir = null, string $contentType = self::contentTypes['environmentFileRestAddfavoritePost'][0])
    {
        list($response) = $this->environmentFileRestAddfavoritePostWithHttpInfo($path, $envName, $filter, $keyword, $nodeGroup, $nodeId, $isDir, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestAddfavoritePostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $filter (optional)
     * @param  string $keyword (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $isDir (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddfavoritePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestAddfavoritePostWithHttpInfo($path, $envName, $filter = null, $keyword = null, $nodeGroup = null, $nodeId = null, $isDir = null, string $contentType = self::contentTypes['environmentFileRestAddfavoritePost'][0])
    {
        $request = $this->environmentFileRestAddfavoritePostRequest($path, $envName, $filter, $keyword, $nodeGroup, $nodeId, $isDir, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestAddfavoritePostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $filter (optional)
     * @param  string $keyword (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $isDir (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddfavoritePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestAddfavoritePostAsync($path, $envName, $filter = null, $keyword = null, $nodeGroup = null, $nodeId = null, $isDir = null, string $contentType = self::contentTypes['environmentFileRestAddfavoritePost'][0])
    {
        return $this->environmentFileRestAddfavoritePostAsyncWithHttpInfo($path, $envName, $filter, $keyword, $nodeGroup, $nodeId, $isDir, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestAddfavoritePostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $filter (optional)
     * @param  string $keyword (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $isDir (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddfavoritePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestAddfavoritePostAsyncWithHttpInfo($path, $envName, $filter = null, $keyword = null, $nodeGroup = null, $nodeId = null, $isDir = null, string $contentType = self::contentTypes['environmentFileRestAddfavoritePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentFileRestAddfavoritePostRequest($path, $envName, $filter, $keyword, $nodeGroup, $nodeId, $isDir, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestAddfavoritePost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $filter (optional)
     * @param  string $keyword (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  bool $isDir (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddfavoritePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestAddfavoritePostRequest($path, $envName, $filter = null, $keyword = null, $nodeGroup = null, $nodeId = null, $isDir = null, string $contentType = self::contentTypes['environmentFileRestAddfavoritePost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentFileRestAddfavoritePost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestAddfavoritePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestAddfavoritePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestAddfavoritePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestAddfavoritePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestAddfavoritePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($filter !== null && strlen($filter) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$filter" when calling FileServiceApi.environmentFileRestAddfavoritePost, must be smaller than or equal to 2147483647.');
        }
        if ($filter !== null && !preg_match("/(.*){0,2147483647}/", $filter)) {
            throw new \InvalidArgumentException("invalid value for \"filter\" when calling FileServiceApi.environmentFileRestAddfavoritePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($keyword !== null && strlen($keyword) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$keyword" when calling FileServiceApi.environmentFileRestAddfavoritePost, must be smaller than or equal to 2147483647.');
        }
        if ($keyword !== null && !preg_match("/(.*){0,2147483647}/", $keyword)) {
            throw new \InvalidArgumentException("invalid value for \"keyword\" when calling FileServiceApi.environmentFileRestAddfavoritePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestAddfavoritePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestAddfavoritePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestAddfavoritePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestAddfavoritePost, must be bigger than or equal to -2147483648.');
        }
        


        $resourcePath = '/environment/file/rest/addfavorite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($filter !== null) {
            $formParams['filter'] = ObjectSerializer::toFormValue($filter);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($keyword !== null) {
            $formParams['keyword'] = ObjectSerializer::toFormValue($keyword);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($isDir !== null) {
            $formParams['isDir'] = ObjectSerializer::toFormValue($isDir);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestAddmountpointbygroupPost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $sourcePath sourcePath (required)
     * @param  string $protocol protocol (optional)
     * @param  int $sourceNodeId sourceNodeId (optional)
     * @param  string $sourceHost sourceHost (optional)
     * @param  string $name name (optional)
     * @param  bool $readOnly readOnly (optional)
     * @param  string $sourceAddressType sourceAddressType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddmountpointbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentFileRestAddmountpointbygroupPost($path, $envName, $nodeGroup, $sourcePath, $protocol = null, $sourceNodeId = null, $sourceHost = null, $name = null, $readOnly = null, $sourceAddressType = null, string $contentType = self::contentTypes['environmentFileRestAddmountpointbygroupPost'][0])
    {
        list($response) = $this->environmentFileRestAddmountpointbygroupPostWithHttpInfo($path, $envName, $nodeGroup, $sourcePath, $protocol, $sourceNodeId, $sourceHost, $name, $readOnly, $sourceAddressType, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestAddmountpointbygroupPostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $sourcePath (required)
     * @param  string $protocol (optional)
     * @param  int $sourceNodeId (optional)
     * @param  string $sourceHost (optional)
     * @param  string $name (optional)
     * @param  bool $readOnly (optional)
     * @param  string $sourceAddressType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddmountpointbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestAddmountpointbygroupPostWithHttpInfo($path, $envName, $nodeGroup, $sourcePath, $protocol = null, $sourceNodeId = null, $sourceHost = null, $name = null, $readOnly = null, $sourceAddressType = null, string $contentType = self::contentTypes['environmentFileRestAddmountpointbygroupPost'][0])
    {
        $request = $this->environmentFileRestAddmountpointbygroupPostRequest($path, $envName, $nodeGroup, $sourcePath, $protocol, $sourceNodeId, $sourceHost, $name, $readOnly, $sourceAddressType, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestAddmountpointbygroupPostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $sourcePath (required)
     * @param  string $protocol (optional)
     * @param  int $sourceNodeId (optional)
     * @param  string $sourceHost (optional)
     * @param  string $name (optional)
     * @param  bool $readOnly (optional)
     * @param  string $sourceAddressType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddmountpointbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestAddmountpointbygroupPostAsync($path, $envName, $nodeGroup, $sourcePath, $protocol = null, $sourceNodeId = null, $sourceHost = null, $name = null, $readOnly = null, $sourceAddressType = null, string $contentType = self::contentTypes['environmentFileRestAddmountpointbygroupPost'][0])
    {
        return $this->environmentFileRestAddmountpointbygroupPostAsyncWithHttpInfo($path, $envName, $nodeGroup, $sourcePath, $protocol, $sourceNodeId, $sourceHost, $name, $readOnly, $sourceAddressType, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestAddmountpointbygroupPostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $sourcePath (required)
     * @param  string $protocol (optional)
     * @param  int $sourceNodeId (optional)
     * @param  string $sourceHost (optional)
     * @param  string $name (optional)
     * @param  bool $readOnly (optional)
     * @param  string $sourceAddressType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddmountpointbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestAddmountpointbygroupPostAsyncWithHttpInfo($path, $envName, $nodeGroup, $sourcePath, $protocol = null, $sourceNodeId = null, $sourceHost = null, $name = null, $readOnly = null, $sourceAddressType = null, string $contentType = self::contentTypes['environmentFileRestAddmountpointbygroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentFileRestAddmountpointbygroupPostRequest($path, $envName, $nodeGroup, $sourcePath, $protocol, $sourceNodeId, $sourceHost, $name, $readOnly, $sourceAddressType, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestAddmountpointbygroupPost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $sourcePath (required)
     * @param  string $protocol (optional)
     * @param  int $sourceNodeId (optional)
     * @param  string $sourceHost (optional)
     * @param  string $name (optional)
     * @param  bool $readOnly (optional)
     * @param  string $sourceAddressType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddmountpointbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestAddmountpointbygroupPostRequest($path, $envName, $nodeGroup, $sourcePath, $protocol = null, $sourceNodeId = null, $sourceHost = null, $name = null, $readOnly = null, $sourceAddressType = null, string $contentType = self::contentTypes['environmentFileRestAddmountpointbygroupPost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentFileRestAddmountpointbygroupPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestAddmountpointbygroupPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentFileRestAddmountpointbygroupPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'sourcePath' is set
        if ($sourcePath === null || (is_array($sourcePath) && count($sourcePath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourcePath when calling environmentFileRestAddmountpointbygroupPost'
            );
        }
        if (strlen($sourcePath) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$sourcePath" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $sourcePath)) {
            throw new \InvalidArgumentException("invalid value for \"sourcePath\" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($protocol !== null && strlen($protocol) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($protocol !== null && !preg_match("/(.*){0,2147483647}/", $protocol)) {
            throw new \InvalidArgumentException("invalid value for \"protocol\" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($sourceNodeId !== null && $sourceNodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$sourceNodeId" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($sourceNodeId !== null && $sourceNodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$sourceNodeId" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($sourceHost !== null && strlen($sourceHost) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$sourceHost" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($sourceHost !== null && !preg_match("/(.*){0,2147483647}/", $sourceHost)) {
            throw new \InvalidArgumentException("invalid value for \"sourceHost\" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($name !== null && strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($name !== null && !preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($sourceAddressType !== null && strlen($sourceAddressType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$sourceAddressType" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($sourceAddressType !== null && !preg_match("/(.*){0,2147483647}/", $sourceAddressType)) {
            throw new \InvalidArgumentException("invalid value for \"sourceAddressType\" when calling FileServiceApi.environmentFileRestAddmountpointbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/file/rest/addmountpointbygroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($protocol !== null) {
            $formParams['protocol'] = ObjectSerializer::toFormValue($protocol);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($sourceNodeId !== null) {
            $formParams['sourceNodeId'] = ObjectSerializer::toFormValue($sourceNodeId);
        }
        // form params
        if ($sourceHost !== null) {
            $formParams['sourceHost'] = ObjectSerializer::toFormValue($sourceHost);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($readOnly !== null) {
            $formParams['readOnly'] = ObjectSerializer::toFormValue($readOnly);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($sourcePath !== null) {
            $formParams['sourcePath'] = ObjectSerializer::toFormValue($sourcePath);
        }
        // form params
        if ($sourceAddressType !== null) {
            $formParams['sourceAddressType'] = ObjectSerializer::toFormValue($sourceAddressType);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestAddmountpointbyidPost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $sourcePath sourcePath (required)
     * @param  string $protocol protocol (optional)
     * @param  int $sourceNodeId sourceNodeId (optional)
     * @param  string $sourceHost sourceHost (optional)
     * @param  string $name name (optional)
     * @param  bool $readOnly readOnly (optional)
     * @param  string $sourceAddressType sourceAddressType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddmountpointbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentFileRestAddmountpointbyidPost($path, $envName, $nodeId, $sourcePath, $protocol = null, $sourceNodeId = null, $sourceHost = null, $name = null, $readOnly = null, $sourceAddressType = null, string $contentType = self::contentTypes['environmentFileRestAddmountpointbyidPost'][0])
    {
        list($response) = $this->environmentFileRestAddmountpointbyidPostWithHttpInfo($path, $envName, $nodeId, $sourcePath, $protocol, $sourceNodeId, $sourceHost, $name, $readOnly, $sourceAddressType, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestAddmountpointbyidPostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $sourcePath (required)
     * @param  string $protocol (optional)
     * @param  int $sourceNodeId (optional)
     * @param  string $sourceHost (optional)
     * @param  string $name (optional)
     * @param  bool $readOnly (optional)
     * @param  string $sourceAddressType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddmountpointbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestAddmountpointbyidPostWithHttpInfo($path, $envName, $nodeId, $sourcePath, $protocol = null, $sourceNodeId = null, $sourceHost = null, $name = null, $readOnly = null, $sourceAddressType = null, string $contentType = self::contentTypes['environmentFileRestAddmountpointbyidPost'][0])
    {
        $request = $this->environmentFileRestAddmountpointbyidPostRequest($path, $envName, $nodeId, $sourcePath, $protocol, $sourceNodeId, $sourceHost, $name, $readOnly, $sourceAddressType, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestAddmountpointbyidPostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $sourcePath (required)
     * @param  string $protocol (optional)
     * @param  int $sourceNodeId (optional)
     * @param  string $sourceHost (optional)
     * @param  string $name (optional)
     * @param  bool $readOnly (optional)
     * @param  string $sourceAddressType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddmountpointbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestAddmountpointbyidPostAsync($path, $envName, $nodeId, $sourcePath, $protocol = null, $sourceNodeId = null, $sourceHost = null, $name = null, $readOnly = null, $sourceAddressType = null, string $contentType = self::contentTypes['environmentFileRestAddmountpointbyidPost'][0])
    {
        return $this->environmentFileRestAddmountpointbyidPostAsyncWithHttpInfo($path, $envName, $nodeId, $sourcePath, $protocol, $sourceNodeId, $sourceHost, $name, $readOnly, $sourceAddressType, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestAddmountpointbyidPostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $sourcePath (required)
     * @param  string $protocol (optional)
     * @param  int $sourceNodeId (optional)
     * @param  string $sourceHost (optional)
     * @param  string $name (optional)
     * @param  bool $readOnly (optional)
     * @param  string $sourceAddressType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddmountpointbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestAddmountpointbyidPostAsyncWithHttpInfo($path, $envName, $nodeId, $sourcePath, $protocol = null, $sourceNodeId = null, $sourceHost = null, $name = null, $readOnly = null, $sourceAddressType = null, string $contentType = self::contentTypes['environmentFileRestAddmountpointbyidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentFileRestAddmountpointbyidPostRequest($path, $envName, $nodeId, $sourcePath, $protocol, $sourceNodeId, $sourceHost, $name, $readOnly, $sourceAddressType, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestAddmountpointbyidPost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $sourcePath (required)
     * @param  string $protocol (optional)
     * @param  int $sourceNodeId (optional)
     * @param  string $sourceHost (optional)
     * @param  string $name (optional)
     * @param  bool $readOnly (optional)
     * @param  string $sourceAddressType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAddmountpointbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestAddmountpointbyidPostRequest($path, $envName, $nodeId, $sourcePath, $protocol = null, $sourceNodeId = null, $sourceHost = null, $name = null, $readOnly = null, $sourceAddressType = null, string $contentType = self::contentTypes['environmentFileRestAddmountpointbyidPost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentFileRestAddmountpointbyidPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestAddmountpointbyidPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentFileRestAddmountpointbyidPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'sourcePath' is set
        if ($sourcePath === null || (is_array($sourcePath) && count($sourcePath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourcePath when calling environmentFileRestAddmountpointbyidPost'
            );
        }
        if (strlen($sourcePath) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$sourcePath" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $sourcePath)) {
            throw new \InvalidArgumentException("invalid value for \"sourcePath\" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($protocol !== null && strlen($protocol) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$protocol" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($protocol !== null && !preg_match("/(.*){0,2147483647}/", $protocol)) {
            throw new \InvalidArgumentException("invalid value for \"protocol\" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($sourceNodeId !== null && $sourceNodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$sourceNodeId" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($sourceNodeId !== null && $sourceNodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$sourceNodeId" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($sourceHost !== null && strlen($sourceHost) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$sourceHost" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($sourceHost !== null && !preg_match("/(.*){0,2147483647}/", $sourceHost)) {
            throw new \InvalidArgumentException("invalid value for \"sourceHost\" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($name !== null && strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($name !== null && !preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($sourceAddressType !== null && strlen($sourceAddressType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$sourceAddressType" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($sourceAddressType !== null && !preg_match("/(.*){0,2147483647}/", $sourceAddressType)) {
            throw new \InvalidArgumentException("invalid value for \"sourceAddressType\" when calling FileServiceApi.environmentFileRestAddmountpointbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/file/rest/addmountpointbyid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($protocol !== null) {
            $formParams['protocol'] = ObjectSerializer::toFormValue($protocol);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($sourceNodeId !== null) {
            $formParams['sourceNodeId'] = ObjectSerializer::toFormValue($sourceNodeId);
        }
        // form params
        if ($sourceHost !== null) {
            $formParams['sourceHost'] = ObjectSerializer::toFormValue($sourceHost);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($readOnly !== null) {
            $formParams['readOnly'] = ObjectSerializer::toFormValue($readOnly);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($sourcePath !== null) {
            $formParams['sourcePath'] = ObjectSerializer::toFormValue($sourcePath);
        }
        // form params
        if ($sourceAddressType !== null) {
            $formParams['sourceAddressType'] = ObjectSerializer::toFormValue($sourceAddressType);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestAppendPost
     *
     * @param  string $envName envName (required)
     * @param  string $path path (optional)
     * @param  string $body body (optional)
     * @param  string $nodeType nodeType (optional)
     * @param  bool $masterOnly masterOnly (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeid nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAppendPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentFileRestAppendPost($envName, $path = null, $body = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestAppendPost'][0])
    {
        list($response) = $this->environmentFileRestAppendPostWithHttpInfo($envName, $path, $body, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestAppendPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $path (optional)
     * @param  string $body (optional)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAppendPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestAppendPostWithHttpInfo($envName, $path = null, $body = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestAppendPost'][0])
    {
        $request = $this->environmentFileRestAppendPostRequest($envName, $path, $body, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestAppendPostAsync
     *
     * @param  string $envName (required)
     * @param  string $path (optional)
     * @param  string $body (optional)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAppendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestAppendPostAsync($envName, $path = null, $body = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestAppendPost'][0])
    {
        return $this->environmentFileRestAppendPostAsyncWithHttpInfo($envName, $path, $body, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestAppendPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $path (optional)
     * @param  string $body (optional)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAppendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestAppendPostAsyncWithHttpInfo($envName, $path = null, $body = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestAppendPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentFileRestAppendPostRequest($envName, $path, $body, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestAppendPost'
     *
     * @param  string $envName (required)
     * @param  string $path (optional)
     * @param  string $body (optional)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestAppendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestAppendPostRequest($envName, $path = null, $body = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestAppendPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestAppendPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestAppendPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestAppendPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($path !== null && strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestAppendPost, must be smaller than or equal to 2147483647.');
        }
        if ($path !== null && !preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestAppendPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($body !== null && strlen($body) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$body" when calling FileServiceApi.environmentFileRestAppendPost, must be smaller than or equal to 2147483647.');
        }
        if ($body !== null && !preg_match("/(.*){0,2147483647}/", $body)) {
            throw new \InvalidArgumentException("invalid value for \"body\" when calling FileServiceApi.environmentFileRestAppendPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeType !== null && strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling FileServiceApi.environmentFileRestAppendPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeType !== null && !preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling FileServiceApi.environmentFileRestAppendPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestAppendPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestAppendPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeid !== null && $nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestAppendPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid !== null && $nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestAppendPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/file/rest/append';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }
        // form params
        if ($masterOnly !== null) {
            $formParams['masterOnly'] = ObjectSerializer::toFormValue($masterOnly);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestCheckcrossmountPost
     *
     * @param  string $envName envName (required)
     * @param  int $sourceNodeId sourceNodeId (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCheckcrossmountPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentFileRestCheckcrossmountPost($envName, $sourceNodeId, $nodeId, string $contentType = self::contentTypes['environmentFileRestCheckcrossmountPost'][0])
    {
        list($response) = $this->environmentFileRestCheckcrossmountPostWithHttpInfo($envName, $sourceNodeId, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestCheckcrossmountPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $sourceNodeId (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCheckcrossmountPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestCheckcrossmountPostWithHttpInfo($envName, $sourceNodeId, $nodeId, string $contentType = self::contentTypes['environmentFileRestCheckcrossmountPost'][0])
    {
        $request = $this->environmentFileRestCheckcrossmountPostRequest($envName, $sourceNodeId, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestCheckcrossmountPostAsync
     *
     * @param  string $envName (required)
     * @param  int $sourceNodeId (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCheckcrossmountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestCheckcrossmountPostAsync($envName, $sourceNodeId, $nodeId, string $contentType = self::contentTypes['environmentFileRestCheckcrossmountPost'][0])
    {
        return $this->environmentFileRestCheckcrossmountPostAsyncWithHttpInfo($envName, $sourceNodeId, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestCheckcrossmountPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $sourceNodeId (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCheckcrossmountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestCheckcrossmountPostAsyncWithHttpInfo($envName, $sourceNodeId, $nodeId, string $contentType = self::contentTypes['environmentFileRestCheckcrossmountPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentFileRestCheckcrossmountPostRequest($envName, $sourceNodeId, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestCheckcrossmountPost'
     *
     * @param  string $envName (required)
     * @param  int $sourceNodeId (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCheckcrossmountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestCheckcrossmountPostRequest($envName, $sourceNodeId, $nodeId, string $contentType = self::contentTypes['environmentFileRestCheckcrossmountPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestCheckcrossmountPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestCheckcrossmountPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestCheckcrossmountPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'sourceNodeId' is set
        if ($sourceNodeId === null || (is_array($sourceNodeId) && count($sourceNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourceNodeId when calling environmentFileRestCheckcrossmountPost'
            );
        }
        if ($sourceNodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$sourceNodeId" when calling FileServiceApi.environmentFileRestCheckcrossmountPost, must be smaller than or equal to 2147483647.');
        }
        if ($sourceNodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$sourceNodeId" when calling FileServiceApi.environmentFileRestCheckcrossmountPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentFileRestCheckcrossmountPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestCheckcrossmountPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestCheckcrossmountPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/file/rest/checkcrossmount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($sourceNodeId !== null) {
            $formParams['sourceNodeId'] = ObjectSerializer::toFormValue($sourceNodeId);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestCopyPost
     *
     * @param  string $src src (required)
     * @param  string $envName envName (required)
     * @param  string $dest dest (required)
     * @param  string $nodeType nodeType (optional)
     * @param  bool $masterOnly masterOnly (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeid nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCopyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentFileRestCopyPost($src, $envName, $dest, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestCopyPost'][0])
    {
        list($response) = $this->environmentFileRestCopyPostWithHttpInfo($src, $envName, $dest, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestCopyPostWithHttpInfo
     *
     * @param  string $src (required)
     * @param  string $envName (required)
     * @param  string $dest (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCopyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestCopyPostWithHttpInfo($src, $envName, $dest, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestCopyPost'][0])
    {
        $request = $this->environmentFileRestCopyPostRequest($src, $envName, $dest, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestCopyPostAsync
     *
     * @param  string $src (required)
     * @param  string $envName (required)
     * @param  string $dest (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCopyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestCopyPostAsync($src, $envName, $dest, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestCopyPost'][0])
    {
        return $this->environmentFileRestCopyPostAsyncWithHttpInfo($src, $envName, $dest, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestCopyPostAsyncWithHttpInfo
     *
     * @param  string $src (required)
     * @param  string $envName (required)
     * @param  string $dest (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCopyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestCopyPostAsyncWithHttpInfo($src, $envName, $dest, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestCopyPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentFileRestCopyPostRequest($src, $envName, $dest, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestCopyPost'
     *
     * @param  string $src (required)
     * @param  string $envName (required)
     * @param  string $dest (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCopyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestCopyPostRequest($src, $envName, $dest, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestCopyPost'][0])
    {

        // verify the required parameter 'src' is set
        if ($src === null || (is_array($src) && count($src) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $src when calling environmentFileRestCopyPost'
            );
        }
        if (strlen($src) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$src" when calling FileServiceApi.environmentFileRestCopyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $src)) {
            throw new \InvalidArgumentException("invalid value for \"src\" when calling FileServiceApi.environmentFileRestCopyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestCopyPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestCopyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestCopyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'dest' is set
        if ($dest === null || (is_array($dest) && count($dest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dest when calling environmentFileRestCopyPost'
            );
        }
        if (strlen($dest) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$dest" when calling FileServiceApi.environmentFileRestCopyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $dest)) {
            throw new \InvalidArgumentException("invalid value for \"dest\" when calling FileServiceApi.environmentFileRestCopyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeType !== null && strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling FileServiceApi.environmentFileRestCopyPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeType !== null && !preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling FileServiceApi.environmentFileRestCopyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestCopyPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestCopyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeid !== null && $nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestCopyPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid !== null && $nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestCopyPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/file/rest/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($src !== null) {
            $formParams['src'] = ObjectSerializer::toFormValue($src);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($dest !== null) {
            $formParams['dest'] = ObjectSerializer::toFormValue($dest);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }
        // form params
        if ($masterOnly !== null) {
            $formParams['masterOnly'] = ObjectSerializer::toFormValue($masterOnly);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestCreatePost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  string $nodeType nodeType (optional)
     * @param  bool $masterOnly masterOnly (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeid nodeid (optional)
     * @param  bool $isdir isdir (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCreatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilePermissionResponse
     */
    public function environmentFileRestCreatePost($path, $envName, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, $isdir = null, string $contentType = self::contentTypes['environmentFileRestCreatePost'][0])
    {
        list($response) = $this->environmentFileRestCreatePostWithHttpInfo($path, $envName, $nodeType, $masterOnly, $nodeGroup, $nodeid, $isdir, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestCreatePostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  bool $isdir (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCreatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilePermissionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestCreatePostWithHttpInfo($path, $envName, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, $isdir = null, string $contentType = self::contentTypes['environmentFileRestCreatePost'][0])
    {
        $request = $this->environmentFileRestCreatePostRequest($path, $envName, $nodeType, $masterOnly, $nodeGroup, $nodeid, $isdir, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilePermissionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilePermissionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilePermissionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilePermissionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilePermissionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestCreatePostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  bool $isdir (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestCreatePostAsync($path, $envName, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, $isdir = null, string $contentType = self::contentTypes['environmentFileRestCreatePost'][0])
    {
        return $this->environmentFileRestCreatePostAsyncWithHttpInfo($path, $envName, $nodeType, $masterOnly, $nodeGroup, $nodeid, $isdir, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestCreatePostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  bool $isdir (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestCreatePostAsyncWithHttpInfo($path, $envName, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, $isdir = null, string $contentType = self::contentTypes['environmentFileRestCreatePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilePermissionResponse';
        $request = $this->environmentFileRestCreatePostRequest($path, $envName, $nodeType, $masterOnly, $nodeGroup, $nodeid, $isdir, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestCreatePost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  bool $isdir (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestCreatePostRequest($path, $envName, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, $isdir = null, string $contentType = self::contentTypes['environmentFileRestCreatePost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentFileRestCreatePost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestCreatePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestCreatePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestCreatePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestCreatePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestCreatePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeType !== null && strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling FileServiceApi.environmentFileRestCreatePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeType !== null && !preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling FileServiceApi.environmentFileRestCreatePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestCreatePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestCreatePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeid !== null && $nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestCreatePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid !== null && $nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestCreatePost, must be bigger than or equal to -2147483648.');
        }
        


        $resourcePath = '/environment/file/rest/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }
        // form params
        if ($masterOnly !== null) {
            $formParams['masterOnly'] = ObjectSerializer::toFormValue($masterOnly);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }
        // form params
        if ($isdir !== null) {
            $formParams['isdir'] = ObjectSerializer::toFormValue($isdir);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestDeletePost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  string $nodeType nodeType (optional)
     * @param  bool $masterOnly masterOnly (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeid nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestDeletePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses
     */
    public function environmentFileRestDeletePost($path, $envName, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestDeletePost'][0])
    {
        list($response) = $this->environmentFileRestDeletePostWithHttpInfo($path, $envName, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestDeletePostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestDeletePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestDeletePostWithHttpInfo($path, $envName, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestDeletePost'][0])
    {
        $request = $this->environmentFileRestDeletePostRequest($path, $envName, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestDeletePostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestDeletePostAsync($path, $envName, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestDeletePost'][0])
    {
        return $this->environmentFileRestDeletePostAsyncWithHttpInfo($path, $envName, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestDeletePostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestDeletePostAsyncWithHttpInfo($path, $envName, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestDeletePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
        $request = $this->environmentFileRestDeletePostRequest($path, $envName, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestDeletePost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestDeletePostRequest($path, $envName, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestDeletePost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentFileRestDeletePost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestDeletePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestDeletePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestDeletePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestDeletePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestDeletePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeType !== null && strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling FileServiceApi.environmentFileRestDeletePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeType !== null && !preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling FileServiceApi.environmentFileRestDeletePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestDeletePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestDeletePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeid !== null && $nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestDeletePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid !== null && $nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestDeletePost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/file/rest/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }
        // form params
        if ($masterOnly !== null) {
            $formParams['masterOnly'] = ObjectSerializer::toFormValue($masterOnly);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestGetexportedlistPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $path path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetexportedlistPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentFileRestGetexportedlistPost($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentFileRestGetexportedlistPost'][0])
    {
        list($response) = $this->environmentFileRestGetexportedlistPostWithHttpInfo($envName, $nodeId, $path, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestGetexportedlistPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetexportedlistPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestGetexportedlistPostWithHttpInfo($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentFileRestGetexportedlistPost'][0])
    {
        $request = $this->environmentFileRestGetexportedlistPostRequest($envName, $nodeId, $path, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestGetexportedlistPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetexportedlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestGetexportedlistPostAsync($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentFileRestGetexportedlistPost'][0])
    {
        return $this->environmentFileRestGetexportedlistPostAsyncWithHttpInfo($envName, $nodeId, $path, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestGetexportedlistPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetexportedlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestGetexportedlistPostAsyncWithHttpInfo($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentFileRestGetexportedlistPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentFileRestGetexportedlistPostRequest($envName, $nodeId, $path, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestGetexportedlistPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $path (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetexportedlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestGetexportedlistPostRequest($envName, $nodeId, $path = null, string $contentType = self::contentTypes['environmentFileRestGetexportedlistPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestGetexportedlistPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestGetexportedlistPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestGetexportedlistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentFileRestGetexportedlistPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestGetexportedlistPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestGetexportedlistPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($path !== null && strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestGetexportedlistPost, must be smaller than or equal to 2147483647.');
        }
        if ($path !== null && !preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestGetexportedlistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/file/rest/getexportedlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestGetfavoritesPost
     *
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetfavoritesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFavoriteListResponse
     */
    public function environmentFileRestGetfavoritesPost($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentFileRestGetfavoritesPost'][0])
    {
        list($response) = $this->environmentFileRestGetfavoritesPostWithHttpInfo($envName, $nodeGroup, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestGetfavoritesPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetfavoritesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFavoriteListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestGetfavoritesPostWithHttpInfo($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentFileRestGetfavoritesPost'][0])
    {
        $request = $this->environmentFileRestGetfavoritesPostRequest($envName, $nodeGroup, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFavoriteListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFavoriteListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFavoriteListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFavoriteListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFavoriteListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestGetfavoritesPostAsync
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetfavoritesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestGetfavoritesPostAsync($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentFileRestGetfavoritesPost'][0])
    {
        return $this->environmentFileRestGetfavoritesPostAsyncWithHttpInfo($envName, $nodeGroup, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestGetfavoritesPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetfavoritesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestGetfavoritesPostAsyncWithHttpInfo($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentFileRestGetfavoritesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFavoriteListResponse';
        $request = $this->environmentFileRestGetfavoritesPostRequest($envName, $nodeGroup, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestGetfavoritesPost'
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetfavoritesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestGetfavoritesPostRequest($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentFileRestGetfavoritesPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestGetfavoritesPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestGetfavoritesPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestGetfavoritesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestGetfavoritesPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestGetfavoritesPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestGetfavoritesPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestGetfavoritesPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/file/rest/getfavorites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestGetlistPost
     *
     * @param  string $envName envName (required)
     * @param  string $filter filter (optional)
     * @param  string $path path (optional)
     * @param  string $nodeType nodeType (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeid nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse
     */
    public function environmentFileRestGetlistPost($envName, $filter = null, $path = null, $nodeType = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestGetlistPost'][0])
    {
        list($response) = $this->environmentFileRestGetlistPostWithHttpInfo($envName, $filter, $path, $nodeType, $nodeGroup, $nodeid, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestGetlistPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $filter (optional)
     * @param  string $path (optional)
     * @param  string $nodeType (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestGetlistPostWithHttpInfo($envName, $filter = null, $path = null, $nodeType = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestGetlistPost'][0])
    {
        $request = $this->environmentFileRestGetlistPostRequest($envName, $filter, $path, $nodeType, $nodeGroup, $nodeid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestGetlistPostAsync
     *
     * @param  string $envName (required)
     * @param  string $filter (optional)
     * @param  string $path (optional)
     * @param  string $nodeType (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestGetlistPostAsync($envName, $filter = null, $path = null, $nodeType = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestGetlistPost'][0])
    {
        return $this->environmentFileRestGetlistPostAsyncWithHttpInfo($envName, $filter, $path, $nodeType, $nodeGroup, $nodeid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestGetlistPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $filter (optional)
     * @param  string $path (optional)
     * @param  string $nodeType (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestGetlistPostAsyncWithHttpInfo($envName, $filter = null, $path = null, $nodeType = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestGetlistPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFilesListResponse';
        $request = $this->environmentFileRestGetlistPostRequest($envName, $filter, $path, $nodeType, $nodeGroup, $nodeid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestGetlistPost'
     *
     * @param  string $envName (required)
     * @param  string $filter (optional)
     * @param  string $path (optional)
     * @param  string $nodeType (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestGetlistPostRequest($envName, $filter = null, $path = null, $nodeType = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestGetlistPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestGetlistPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestGetlistPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestGetlistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($filter !== null && strlen($filter) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$filter" when calling FileServiceApi.environmentFileRestGetlistPost, must be smaller than or equal to 2147483647.');
        }
        if ($filter !== null && !preg_match("/(.*){0,2147483647}/", $filter)) {
            throw new \InvalidArgumentException("invalid value for \"filter\" when calling FileServiceApi.environmentFileRestGetlistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($path !== null && strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestGetlistPost, must be smaller than or equal to 2147483647.');
        }
        if ($path !== null && !preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestGetlistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeType !== null && strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling FileServiceApi.environmentFileRestGetlistPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeType !== null && !preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling FileServiceApi.environmentFileRestGetlistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestGetlistPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestGetlistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeid !== null && $nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestGetlistPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid !== null && $nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestGetlistPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/file/rest/getlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($filter !== null) {
            $formParams['filter'] = ObjectSerializer::toFormValue($filter);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestGetmountpointsPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetmountpointsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentFileRestGetmountpointsPost($envName, $nodeId = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentFileRestGetmountpointsPost'][0])
    {
        list($response) = $this->environmentFileRestGetmountpointsPostWithHttpInfo($envName, $nodeId, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestGetmountpointsPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetmountpointsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestGetmountpointsPostWithHttpInfo($envName, $nodeId = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentFileRestGetmountpointsPost'][0])
    {
        $request = $this->environmentFileRestGetmountpointsPostRequest($envName, $nodeId, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestGetmountpointsPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetmountpointsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestGetmountpointsPostAsync($envName, $nodeId = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentFileRestGetmountpointsPost'][0])
    {
        return $this->environmentFileRestGetmountpointsPostAsyncWithHttpInfo($envName, $nodeId, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestGetmountpointsPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetmountpointsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestGetmountpointsPostAsyncWithHttpInfo($envName, $nodeId = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentFileRestGetmountpointsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentFileRestGetmountpointsPostRequest($envName, $nodeId, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestGetmountpointsPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestGetmountpointsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestGetmountpointsPostRequest($envName, $nodeId = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentFileRestGetmountpointsPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestGetmountpointsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestGetmountpointsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestGetmountpointsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestGetmountpointsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestGetmountpointsPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestGetmountpointsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestGetmountpointsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/file/rest/getmountpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestReadPost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  string $nodeType nodeType (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeid nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestReadPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFileReadResponse
     */
    public function environmentFileRestReadPost($path, $envName, $nodeType = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestReadPost'][0])
    {
        list($response) = $this->environmentFileRestReadPostWithHttpInfo($path, $envName, $nodeType, $nodeGroup, $nodeid, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestReadPostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestReadPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFileReadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestReadPostWithHttpInfo($path, $envName, $nodeType = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestReadPost'][0])
    {
        $request = $this->environmentFileRestReadPostRequest($path, $envName, $nodeType, $nodeGroup, $nodeid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFileReadResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFileReadResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFileReadResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFileReadResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFileReadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestReadPostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestReadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestReadPostAsync($path, $envName, $nodeType = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestReadPost'][0])
    {
        return $this->environmentFileRestReadPostAsyncWithHttpInfo($path, $envName, $nodeType, $nodeGroup, $nodeid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestReadPostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestReadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestReadPostAsyncWithHttpInfo($path, $envName, $nodeType = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestReadPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseFileReadResponse';
        $request = $this->environmentFileRestReadPostRequest($path, $envName, $nodeType, $nodeGroup, $nodeid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestReadPost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeType (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestReadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestReadPostRequest($path, $envName, $nodeType = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestReadPost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentFileRestReadPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestReadPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestReadPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestReadPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestReadPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestReadPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeType !== null && strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling FileServiceApi.environmentFileRestReadPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeType !== null && !preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling FileServiceApi.environmentFileRestReadPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestReadPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestReadPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeid !== null && $nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestReadPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid !== null && $nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestReadPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/file/rest/read';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestRemoveexportPost
     *
     * @param  string $path path (required)
     * @param  string $clientPath clientPath (required)
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  int $clientNodeId clientNodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemoveexportPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentFileRestRemoveexportPost($path, $clientPath, $envName, $nodeId, $clientNodeId, string $contentType = self::contentTypes['environmentFileRestRemoveexportPost'][0])
    {
        list($response) = $this->environmentFileRestRemoveexportPostWithHttpInfo($path, $clientPath, $envName, $nodeId, $clientNodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestRemoveexportPostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $clientPath (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  int $clientNodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemoveexportPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestRemoveexportPostWithHttpInfo($path, $clientPath, $envName, $nodeId, $clientNodeId, string $contentType = self::contentTypes['environmentFileRestRemoveexportPost'][0])
    {
        $request = $this->environmentFileRestRemoveexportPostRequest($path, $clientPath, $envName, $nodeId, $clientNodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestRemoveexportPostAsync
     *
     * @param  string $path (required)
     * @param  string $clientPath (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  int $clientNodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemoveexportPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestRemoveexportPostAsync($path, $clientPath, $envName, $nodeId, $clientNodeId, string $contentType = self::contentTypes['environmentFileRestRemoveexportPost'][0])
    {
        return $this->environmentFileRestRemoveexportPostAsyncWithHttpInfo($path, $clientPath, $envName, $nodeId, $clientNodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestRemoveexportPostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $clientPath (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  int $clientNodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemoveexportPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestRemoveexportPostAsyncWithHttpInfo($path, $clientPath, $envName, $nodeId, $clientNodeId, string $contentType = self::contentTypes['environmentFileRestRemoveexportPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentFileRestRemoveexportPostRequest($path, $clientPath, $envName, $nodeId, $clientNodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestRemoveexportPost'
     *
     * @param  string $path (required)
     * @param  string $clientPath (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  int $clientNodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemoveexportPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestRemoveexportPostRequest($path, $clientPath, $envName, $nodeId, $clientNodeId, string $contentType = self::contentTypes['environmentFileRestRemoveexportPost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentFileRestRemoveexportPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestRemoveexportPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestRemoveexportPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'clientPath' is set
        if ($clientPath === null || (is_array($clientPath) && count($clientPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientPath when calling environmentFileRestRemoveexportPost'
            );
        }
        if (strlen($clientPath) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$clientPath" when calling FileServiceApi.environmentFileRestRemoveexportPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $clientPath)) {
            throw new \InvalidArgumentException("invalid value for \"clientPath\" when calling FileServiceApi.environmentFileRestRemoveexportPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestRemoveexportPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestRemoveexportPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestRemoveexportPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentFileRestRemoveexportPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestRemoveexportPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestRemoveexportPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'clientNodeId' is set
        if ($clientNodeId === null || (is_array($clientNodeId) && count($clientNodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientNodeId when calling environmentFileRestRemoveexportPost'
            );
        }
        if ($clientNodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$clientNodeId" when calling FileServiceApi.environmentFileRestRemoveexportPost, must be smaller than or equal to 2147483647.');
        }
        if ($clientNodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$clientNodeId" when calling FileServiceApi.environmentFileRestRemoveexportPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/file/rest/removeexport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($clientPath !== null) {
            $formParams['clientPath'] = ObjectSerializer::toFormValue($clientPath);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($clientNodeId !== null) {
            $formParams['clientNodeId'] = ObjectSerializer::toFormValue($clientNodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestRemovefavoritePost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovefavoritePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentFileRestRemovefavoritePost($path, $envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentFileRestRemovefavoritePost'][0])
    {
        list($response) = $this->environmentFileRestRemovefavoritePostWithHttpInfo($path, $envName, $nodeGroup, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestRemovefavoritePostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovefavoritePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestRemovefavoritePostWithHttpInfo($path, $envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentFileRestRemovefavoritePost'][0])
    {
        $request = $this->environmentFileRestRemovefavoritePostRequest($path, $envName, $nodeGroup, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestRemovefavoritePostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovefavoritePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestRemovefavoritePostAsync($path, $envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentFileRestRemovefavoritePost'][0])
    {
        return $this->environmentFileRestRemovefavoritePostAsyncWithHttpInfo($path, $envName, $nodeGroup, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestRemovefavoritePostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovefavoritePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestRemovefavoritePostAsyncWithHttpInfo($path, $envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentFileRestRemovefavoritePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentFileRestRemovefavoritePostRequest($path, $envName, $nodeGroup, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestRemovefavoritePost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovefavoritePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestRemovefavoritePostRequest($path, $envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentFileRestRemovefavoritePost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentFileRestRemovefavoritePost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestRemovefavoritePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestRemovefavoritePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestRemovefavoritePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestRemovefavoritePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestRemovefavoritePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestRemovefavoritePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestRemovefavoritePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestRemovefavoritePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestRemovefavoritePost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/file/rest/removefavorite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestRemovemountpointbygroupPost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovemountpointbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentFileRestRemovemountpointbygroupPost($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentFileRestRemovemountpointbygroupPost'][0])
    {
        list($response) = $this->environmentFileRestRemovemountpointbygroupPostWithHttpInfo($path, $envName, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestRemovemountpointbygroupPostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovemountpointbygroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestRemovemountpointbygroupPostWithHttpInfo($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentFileRestRemovemountpointbygroupPost'][0])
    {
        $request = $this->environmentFileRestRemovemountpointbygroupPostRequest($path, $envName, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestRemovemountpointbygroupPostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovemountpointbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestRemovemountpointbygroupPostAsync($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentFileRestRemovemountpointbygroupPost'][0])
    {
        return $this->environmentFileRestRemovemountpointbygroupPostAsyncWithHttpInfo($path, $envName, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestRemovemountpointbygroupPostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovemountpointbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestRemovemountpointbygroupPostAsyncWithHttpInfo($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentFileRestRemovemountpointbygroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentFileRestRemovemountpointbygroupPostRequest($path, $envName, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestRemovemountpointbygroupPost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovemountpointbygroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestRemovemountpointbygroupPostRequest($path, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentFileRestRemovemountpointbygroupPost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentFileRestRemovemountpointbygroupPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestRemovemountpointbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestRemovemountpointbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestRemovemountpointbygroupPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestRemovemountpointbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestRemovemountpointbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentFileRestRemovemountpointbygroupPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestRemovemountpointbygroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestRemovemountpointbygroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/file/rest/removemountpointbygroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestRemovemountpointbyidPost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovemountpointbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentFileRestRemovemountpointbyidPost($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentFileRestRemovemountpointbyidPost'][0])
    {
        list($response) = $this->environmentFileRestRemovemountpointbyidPostWithHttpInfo($path, $envName, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestRemovemountpointbyidPostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovemountpointbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestRemovemountpointbyidPostWithHttpInfo($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentFileRestRemovemountpointbyidPost'][0])
    {
        $request = $this->environmentFileRestRemovemountpointbyidPostRequest($path, $envName, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestRemovemountpointbyidPostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovemountpointbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestRemovemountpointbyidPostAsync($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentFileRestRemovemountpointbyidPost'][0])
    {
        return $this->environmentFileRestRemovemountpointbyidPostAsyncWithHttpInfo($path, $envName, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestRemovemountpointbyidPostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovemountpointbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestRemovemountpointbyidPostAsyncWithHttpInfo($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentFileRestRemovemountpointbyidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentFileRestRemovemountpointbyidPostRequest($path, $envName, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestRemovemountpointbyidPost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRemovemountpointbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestRemovemountpointbyidPostRequest($path, $envName, $nodeId, string $contentType = self::contentTypes['environmentFileRestRemovemountpointbyidPost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentFileRestRemovemountpointbyidPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestRemovemountpointbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestRemovemountpointbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestRemovemountpointbyidPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestRemovemountpointbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestRemovemountpointbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentFileRestRemovemountpointbyidPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestRemovemountpointbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestRemovemountpointbyidPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/file/rest/removemountpointbyid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestRenamePost
     *
     * @param  string $envName envName (required)
     * @param  string $oldPath oldPath (required)
     * @param  string $newPath newPath (required)
     * @param  string $nodeType nodeType (optional)
     * @param  bool $masterOnly masterOnly (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeid nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRenamePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses
     */
    public function environmentFileRestRenamePost($envName, $oldPath, $newPath, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestRenamePost'][0])
    {
        list($response) = $this->environmentFileRestRenamePostWithHttpInfo($envName, $oldPath, $newPath, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestRenamePostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $oldPath (required)
     * @param  string $newPath (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRenamePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestRenamePostWithHttpInfo($envName, $oldPath, $newPath, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestRenamePost'][0])
    {
        $request = $this->environmentFileRestRenamePostRequest($envName, $oldPath, $newPath, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestRenamePostAsync
     *
     * @param  string $envName (required)
     * @param  string $oldPath (required)
     * @param  string $newPath (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRenamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestRenamePostAsync($envName, $oldPath, $newPath, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestRenamePost'][0])
    {
        return $this->environmentFileRestRenamePostAsyncWithHttpInfo($envName, $oldPath, $newPath, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestRenamePostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $oldPath (required)
     * @param  string $newPath (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRenamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestRenamePostAsyncWithHttpInfo($envName, $oldPath, $newPath, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestRenamePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
        $request = $this->environmentFileRestRenamePostRequest($envName, $oldPath, $newPath, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestRenamePost'
     *
     * @param  string $envName (required)
     * @param  string $oldPath (required)
     * @param  string $newPath (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestRenamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestRenamePostRequest($envName, $oldPath, $newPath, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestRenamePost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestRenamePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestRenamePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestRenamePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'oldPath' is set
        if ($oldPath === null || (is_array($oldPath) && count($oldPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oldPath when calling environmentFileRestRenamePost'
            );
        }
        if (strlen($oldPath) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$oldPath" when calling FileServiceApi.environmentFileRestRenamePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $oldPath)) {
            throw new \InvalidArgumentException("invalid value for \"oldPath\" when calling FileServiceApi.environmentFileRestRenamePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'newPath' is set
        if ($newPath === null || (is_array($newPath) && count($newPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newPath when calling environmentFileRestRenamePost'
            );
        }
        if (strlen($newPath) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$newPath" when calling FileServiceApi.environmentFileRestRenamePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $newPath)) {
            throw new \InvalidArgumentException("invalid value for \"newPath\" when calling FileServiceApi.environmentFileRestRenamePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeType !== null && strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling FileServiceApi.environmentFileRestRenamePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeType !== null && !preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling FileServiceApi.environmentFileRestRenamePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestRenamePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestRenamePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeid !== null && $nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestRenamePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid !== null && $nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestRenamePost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/file/rest/rename';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($oldPath !== null) {
            $formParams['oldPath'] = ObjectSerializer::toFormValue($oldPath);
        }
        // form params
        if ($newPath !== null) {
            $formParams['newPath'] = ObjectSerializer::toFormValue($newPath);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }
        // form params
        if ($masterOnly !== null) {
            $formParams['masterOnly'] = ObjectSerializer::toFormValue($masterOnly);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestReplaceinbodyPost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  string $pattern pattern (required)
     * @param  string $replacement replacement (required)
     * @param  int $nth nth (optional)
     * @param  string $nodeType nodeType (optional)
     * @param  bool $masterOnly masterOnly (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeid nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestReplaceinbodyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentFileRestReplaceinbodyPost($path, $envName, $pattern, $replacement, $nth = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestReplaceinbodyPost'][0])
    {
        list($response) = $this->environmentFileRestReplaceinbodyPostWithHttpInfo($path, $envName, $pattern, $replacement, $nth, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestReplaceinbodyPostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $pattern (required)
     * @param  string $replacement (required)
     * @param  int $nth (optional)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestReplaceinbodyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestReplaceinbodyPostWithHttpInfo($path, $envName, $pattern, $replacement, $nth = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestReplaceinbodyPost'][0])
    {
        $request = $this->environmentFileRestReplaceinbodyPostRequest($path, $envName, $pattern, $replacement, $nth, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestReplaceinbodyPostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $pattern (required)
     * @param  string $replacement (required)
     * @param  int $nth (optional)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestReplaceinbodyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestReplaceinbodyPostAsync($path, $envName, $pattern, $replacement, $nth = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestReplaceinbodyPost'][0])
    {
        return $this->environmentFileRestReplaceinbodyPostAsyncWithHttpInfo($path, $envName, $pattern, $replacement, $nth, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestReplaceinbodyPostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $pattern (required)
     * @param  string $replacement (required)
     * @param  int $nth (optional)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestReplaceinbodyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestReplaceinbodyPostAsyncWithHttpInfo($path, $envName, $pattern, $replacement, $nth = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestReplaceinbodyPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentFileRestReplaceinbodyPostRequest($path, $envName, $pattern, $replacement, $nth, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestReplaceinbodyPost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $pattern (required)
     * @param  string $replacement (required)
     * @param  int $nth (optional)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestReplaceinbodyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestReplaceinbodyPostRequest($path, $envName, $pattern, $replacement, $nth = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestReplaceinbodyPost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentFileRestReplaceinbodyPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestReplaceinbodyPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'pattern' is set
        if ($pattern === null || (is_array($pattern) && count($pattern) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pattern when calling environmentFileRestReplaceinbodyPost'
            );
        }
        if (strlen($pattern) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$pattern" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $pattern)) {
            throw new \InvalidArgumentException("invalid value for \"pattern\" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'replacement' is set
        if ($replacement === null || (is_array($replacement) && count($replacement) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replacement when calling environmentFileRestReplaceinbodyPost'
            );
        }
        if (strlen($replacement) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$replacement" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $replacement)) {
            throw new \InvalidArgumentException("invalid value for \"replacement\" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nth !== null && $nth > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nth" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must be smaller than or equal to 2147483647.');
        }
        if ($nth !== null && $nth < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nth" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($nodeType !== null && strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeType !== null && !preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeid !== null && $nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid !== null && $nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestReplaceinbodyPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/file/rest/replaceinbody';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($nth !== null) {
            $formParams['nth'] = ObjectSerializer::toFormValue($nth);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($pattern !== null) {
            $formParams['pattern'] = ObjectSerializer::toFormValue($pattern);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }
        // form params
        if ($masterOnly !== null) {
            $formParams['masterOnly'] = ObjectSerializer::toFormValue($masterOnly);
        }
        // form params
        if ($replacement !== null) {
            $formParams['replacement'] = ObjectSerializer::toFormValue($replacement);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestUnpackbyidPost
     *
     * @param  string $envName envName (required)
     * @param  string $destPath destPath (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $sourcePath sourcePath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUnpackbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentFileRestUnpackbyidPost($envName, $destPath, $nodeId, $sourcePath, string $contentType = self::contentTypes['environmentFileRestUnpackbyidPost'][0])
    {
        list($response) = $this->environmentFileRestUnpackbyidPostWithHttpInfo($envName, $destPath, $nodeId, $sourcePath, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestUnpackbyidPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $destPath (required)
     * @param  int $nodeId (required)
     * @param  string $sourcePath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUnpackbyidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestUnpackbyidPostWithHttpInfo($envName, $destPath, $nodeId, $sourcePath, string $contentType = self::contentTypes['environmentFileRestUnpackbyidPost'][0])
    {
        $request = $this->environmentFileRestUnpackbyidPostRequest($envName, $destPath, $nodeId, $sourcePath, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestUnpackbyidPostAsync
     *
     * @param  string $envName (required)
     * @param  string $destPath (required)
     * @param  int $nodeId (required)
     * @param  string $sourcePath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUnpackbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestUnpackbyidPostAsync($envName, $destPath, $nodeId, $sourcePath, string $contentType = self::contentTypes['environmentFileRestUnpackbyidPost'][0])
    {
        return $this->environmentFileRestUnpackbyidPostAsyncWithHttpInfo($envName, $destPath, $nodeId, $sourcePath, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestUnpackbyidPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $destPath (required)
     * @param  int $nodeId (required)
     * @param  string $sourcePath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUnpackbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestUnpackbyidPostAsyncWithHttpInfo($envName, $destPath, $nodeId, $sourcePath, string $contentType = self::contentTypes['environmentFileRestUnpackbyidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentFileRestUnpackbyidPostRequest($envName, $destPath, $nodeId, $sourcePath, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestUnpackbyidPost'
     *
     * @param  string $envName (required)
     * @param  string $destPath (required)
     * @param  int $nodeId (required)
     * @param  string $sourcePath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUnpackbyidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestUnpackbyidPostRequest($envName, $destPath, $nodeId, $sourcePath, string $contentType = self::contentTypes['environmentFileRestUnpackbyidPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestUnpackbyidPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestUnpackbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestUnpackbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'destPath' is set
        if ($destPath === null || (is_array($destPath) && count($destPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destPath when calling environmentFileRestUnpackbyidPost'
            );
        }
        if (strlen($destPath) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$destPath" when calling FileServiceApi.environmentFileRestUnpackbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $destPath)) {
            throw new \InvalidArgumentException("invalid value for \"destPath\" when calling FileServiceApi.environmentFileRestUnpackbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentFileRestUnpackbyidPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestUnpackbyidPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling FileServiceApi.environmentFileRestUnpackbyidPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'sourcePath' is set
        if ($sourcePath === null || (is_array($sourcePath) && count($sourcePath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourcePath when calling environmentFileRestUnpackbyidPost'
            );
        }
        if (strlen($sourcePath) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$sourcePath" when calling FileServiceApi.environmentFileRestUnpackbyidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $sourcePath)) {
            throw new \InvalidArgumentException("invalid value for \"sourcePath\" when calling FileServiceApi.environmentFileRestUnpackbyidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/file/rest/unpackbyid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($destPath !== null) {
            $formParams['destPath'] = ObjectSerializer::toFormValue($destPath);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($sourcePath !== null) {
            $formParams['sourcePath'] = ObjectSerializer::toFormValue($sourcePath);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestUnpackbytypePost
     *
     * @param  string $envName envName (required)
     * @param  string $destPath destPath (required)
     * @param  string $nodeType nodeType (required)
     * @param  string $sourcePath sourcePath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUnpackbytypePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentFileRestUnpackbytypePost($envName, $destPath, $nodeType, $sourcePath, string $contentType = self::contentTypes['environmentFileRestUnpackbytypePost'][0])
    {
        list($response) = $this->environmentFileRestUnpackbytypePostWithHttpInfo($envName, $destPath, $nodeType, $sourcePath, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestUnpackbytypePostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $destPath (required)
     * @param  string $nodeType (required)
     * @param  string $sourcePath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUnpackbytypePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestUnpackbytypePostWithHttpInfo($envName, $destPath, $nodeType, $sourcePath, string $contentType = self::contentTypes['environmentFileRestUnpackbytypePost'][0])
    {
        $request = $this->environmentFileRestUnpackbytypePostRequest($envName, $destPath, $nodeType, $sourcePath, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestUnpackbytypePostAsync
     *
     * @param  string $envName (required)
     * @param  string $destPath (required)
     * @param  string $nodeType (required)
     * @param  string $sourcePath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUnpackbytypePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestUnpackbytypePostAsync($envName, $destPath, $nodeType, $sourcePath, string $contentType = self::contentTypes['environmentFileRestUnpackbytypePost'][0])
    {
        return $this->environmentFileRestUnpackbytypePostAsyncWithHttpInfo($envName, $destPath, $nodeType, $sourcePath, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestUnpackbytypePostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $destPath (required)
     * @param  string $nodeType (required)
     * @param  string $sourcePath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUnpackbytypePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestUnpackbytypePostAsyncWithHttpInfo($envName, $destPath, $nodeType, $sourcePath, string $contentType = self::contentTypes['environmentFileRestUnpackbytypePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentFileRestUnpackbytypePostRequest($envName, $destPath, $nodeType, $sourcePath, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestUnpackbytypePost'
     *
     * @param  string $envName (required)
     * @param  string $destPath (required)
     * @param  string $nodeType (required)
     * @param  string $sourcePath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUnpackbytypePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestUnpackbytypePostRequest($envName, $destPath, $nodeType, $sourcePath, string $contentType = self::contentTypes['environmentFileRestUnpackbytypePost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestUnpackbytypePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestUnpackbytypePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestUnpackbytypePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'destPath' is set
        if ($destPath === null || (is_array($destPath) && count($destPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destPath when calling environmentFileRestUnpackbytypePost'
            );
        }
        if (strlen($destPath) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$destPath" when calling FileServiceApi.environmentFileRestUnpackbytypePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $destPath)) {
            throw new \InvalidArgumentException("invalid value for \"destPath\" when calling FileServiceApi.environmentFileRestUnpackbytypePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeType' is set
        if ($nodeType === null || (is_array($nodeType) && count($nodeType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeType when calling environmentFileRestUnpackbytypePost'
            );
        }
        if (strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling FileServiceApi.environmentFileRestUnpackbytypePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling FileServiceApi.environmentFileRestUnpackbytypePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'sourcePath' is set
        if ($sourcePath === null || (is_array($sourcePath) && count($sourcePath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourcePath when calling environmentFileRestUnpackbytypePost'
            );
        }
        if (strlen($sourcePath) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$sourcePath" when calling FileServiceApi.environmentFileRestUnpackbytypePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $sourcePath)) {
            throw new \InvalidArgumentException("invalid value for \"sourcePath\" when calling FileServiceApi.environmentFileRestUnpackbytypePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/file/rest/unpackbytype';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($destPath !== null) {
            $formParams['destPath'] = ObjectSerializer::toFormValue($destPath);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }
        // form params
        if ($sourcePath !== null) {
            $formParams['sourcePath'] = ObjectSerializer::toFormValue($sourcePath);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestUploadPost
     *
     * @param  string $envName envName (required)
     * @param  string $destPath destPath (required)
     * @param  string $sourcePath sourcePath (required)
     * @param  string $nodeType nodeType (optional)
     * @param  bool $masterOnly masterOnly (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeid nodeid (optional)
     * @param  bool $overwrite overwrite (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUploadPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses
     */
    public function environmentFileRestUploadPost($envName, $destPath, $sourcePath, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, $overwrite = null, string $contentType = self::contentTypes['environmentFileRestUploadPost'][0])
    {
        list($response) = $this->environmentFileRestUploadPostWithHttpInfo($envName, $destPath, $sourcePath, $nodeType, $masterOnly, $nodeGroup, $nodeid, $overwrite, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestUploadPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $destPath (required)
     * @param  string $sourcePath (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  bool $overwrite (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUploadPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestUploadPostWithHttpInfo($envName, $destPath, $sourcePath, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, $overwrite = null, string $contentType = self::contentTypes['environmentFileRestUploadPost'][0])
    {
        $request = $this->environmentFileRestUploadPostRequest($envName, $destPath, $sourcePath, $nodeType, $masterOnly, $nodeGroup, $nodeid, $overwrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestUploadPostAsync
     *
     * @param  string $envName (required)
     * @param  string $destPath (required)
     * @param  string $sourcePath (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  bool $overwrite (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestUploadPostAsync($envName, $destPath, $sourcePath, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, $overwrite = null, string $contentType = self::contentTypes['environmentFileRestUploadPost'][0])
    {
        return $this->environmentFileRestUploadPostAsyncWithHttpInfo($envName, $destPath, $sourcePath, $nodeType, $masterOnly, $nodeGroup, $nodeid, $overwrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestUploadPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $destPath (required)
     * @param  string $sourcePath (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  bool $overwrite (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestUploadPostAsyncWithHttpInfo($envName, $destPath, $sourcePath, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, $overwrite = null, string $contentType = self::contentTypes['environmentFileRestUploadPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
        $request = $this->environmentFileRestUploadPostRequest($envName, $destPath, $sourcePath, $nodeType, $masterOnly, $nodeGroup, $nodeid, $overwrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestUploadPost'
     *
     * @param  string $envName (required)
     * @param  string $destPath (required)
     * @param  string $sourcePath (required)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  bool $overwrite (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestUploadPostRequest($envName, $destPath, $sourcePath, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, $overwrite = null, string $contentType = self::contentTypes['environmentFileRestUploadPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestUploadPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestUploadPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestUploadPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'destPath' is set
        if ($destPath === null || (is_array($destPath) && count($destPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destPath when calling environmentFileRestUploadPost'
            );
        }
        if (strlen($destPath) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$destPath" when calling FileServiceApi.environmentFileRestUploadPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $destPath)) {
            throw new \InvalidArgumentException("invalid value for \"destPath\" when calling FileServiceApi.environmentFileRestUploadPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'sourcePath' is set
        if ($sourcePath === null || (is_array($sourcePath) && count($sourcePath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sourcePath when calling environmentFileRestUploadPost'
            );
        }
        if (strlen($sourcePath) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$sourcePath" when calling FileServiceApi.environmentFileRestUploadPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $sourcePath)) {
            throw new \InvalidArgumentException("invalid value for \"sourcePath\" when calling FileServiceApi.environmentFileRestUploadPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeType !== null && strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling FileServiceApi.environmentFileRestUploadPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeType !== null && !preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling FileServiceApi.environmentFileRestUploadPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestUploadPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestUploadPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeid !== null && $nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestUploadPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid !== null && $nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestUploadPost, must be bigger than or equal to -2147483648.');
        }
        


        $resourcePath = '/environment/file/rest/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($destPath !== null) {
            $formParams['destPath'] = ObjectSerializer::toFormValue($destPath);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }
        // form params
        if ($masterOnly !== null) {
            $formParams['masterOnly'] = ObjectSerializer::toFormValue($masterOnly);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }
        // form params
        if ($overwrite !== null) {
            $formParams['overwrite'] = ObjectSerializer::toFormValue($overwrite);
        }
        // form params
        if ($sourcePath !== null) {
            $formParams['sourcePath'] = ObjectSerializer::toFormValue($sourcePath);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentFileRestWritePost
     *
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  bool $isAppendMode isAppendMode (optional)
     * @param  string $body body (optional)
     * @param  string $nodeType nodeType (optional)
     * @param  bool $masterOnly masterOnly (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeid nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestWritePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentFileRestWritePost($path, $envName, $isAppendMode = null, $body = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestWritePost'][0])
    {
        list($response) = $this->environmentFileRestWritePostWithHttpInfo($path, $envName, $isAppendMode, $body, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);
        return $response;
    }

    /**
     * Operation environmentFileRestWritePostWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  bool $isAppendMode (optional)
     * @param  string $body (optional)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestWritePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentFileRestWritePostWithHttpInfo($path, $envName, $isAppendMode = null, $body = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestWritePost'][0])
    {
        $request = $this->environmentFileRestWritePostRequest($path, $envName, $isAppendMode, $body, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentFileRestWritePostAsync
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  bool $isAppendMode (optional)
     * @param  string $body (optional)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestWritePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestWritePostAsync($path, $envName, $isAppendMode = null, $body = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestWritePost'][0])
    {
        return $this->environmentFileRestWritePostAsyncWithHttpInfo($path, $envName, $isAppendMode, $body, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentFileRestWritePostAsyncWithHttpInfo
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  bool $isAppendMode (optional)
     * @param  string $body (optional)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestWritePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentFileRestWritePostAsyncWithHttpInfo($path, $envName, $isAppendMode = null, $body = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestWritePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentFileRestWritePostRequest($path, $envName, $isAppendMode, $body, $nodeType, $masterOnly, $nodeGroup, $nodeid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentFileRestWritePost'
     *
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  bool $isAppendMode (optional)
     * @param  string $body (optional)
     * @param  string $nodeType (optional)
     * @param  bool $masterOnly (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentFileRestWritePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentFileRestWritePostRequest($path, $envName, $isAppendMode = null, $body = null, $nodeType = null, $masterOnly = null, $nodeGroup = null, $nodeid = null, string $contentType = self::contentTypes['environmentFileRestWritePost'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentFileRestWritePost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling FileServiceApi.environmentFileRestWritePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling FileServiceApi.environmentFileRestWritePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentFileRestWritePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling FileServiceApi.environmentFileRestWritePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling FileServiceApi.environmentFileRestWritePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($body !== null && strlen($body) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$body" when calling FileServiceApi.environmentFileRestWritePost, must be smaller than or equal to 2147483647.');
        }
        if ($body !== null && !preg_match("/(.*){0,2147483647}/", $body)) {
            throw new \InvalidArgumentException("invalid value for \"body\" when calling FileServiceApi.environmentFileRestWritePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeType !== null && strlen($nodeType) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeType" when calling FileServiceApi.environmentFileRestWritePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeType !== null && !preg_match("/(.*){0,2147483647}/", $nodeType)) {
            throw new \InvalidArgumentException("invalid value for \"nodeType\" when calling FileServiceApi.environmentFileRestWritePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling FileServiceApi.environmentFileRestWritePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling FileServiceApi.environmentFileRestWritePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeid !== null && $nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestWritePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid !== null && $nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling FileServiceApi.environmentFileRestWritePost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/file/rest/write';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($isAppendMode !== null) {
            $formParams['isAppendMode'] = ObjectSerializer::toFormValue($isAppendMode);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // form params
        if ($nodeType !== null) {
            $formParams['nodeType'] = ObjectSerializer::toFormValue($nodeType);
        }
        // form params
        if ($masterOnly !== null) {
            $formParams['masterOnly'] = ObjectSerializer::toFormValue($masterOnly);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
