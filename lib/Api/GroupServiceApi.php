<?php
/**
 * GroupServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * GroupServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GroupServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'environmentGroupRestAttachenvPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentGroupRestCreategroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentGroupRestDetachenvPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentGroupRestEditgroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentGroupRestGetgroupsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentGroupRestRemovegroupPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentGroupRestSetenvPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentGroupRestSetisolationenabledPost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation environmentGroupRestAttachenvPost
     *
     * @param  string $envGroup envGroup (required)
     * @param  string $envName envName (optional)
     * @param  string $targetAppid targetAppid (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestAttachenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentGroupRestAttachenvPost($envGroup, $envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestAttachenvPost'][0])
    {
        list($response) = $this->environmentGroupRestAttachenvPostWithHttpInfo($envGroup, $envName, $targetAppid, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation environmentGroupRestAttachenvPostWithHttpInfo
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestAttachenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentGroupRestAttachenvPostWithHttpInfo($envGroup, $envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestAttachenvPost'][0])
    {
        $request = $this->environmentGroupRestAttachenvPostRequest($envGroup, $envName, $targetAppid, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentGroupRestAttachenvPostAsync
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestAttachenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestAttachenvPostAsync($envGroup, $envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestAttachenvPost'][0])
    {
        return $this->environmentGroupRestAttachenvPostAsyncWithHttpInfo($envGroup, $envName, $targetAppid, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentGroupRestAttachenvPostAsyncWithHttpInfo
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestAttachenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestAttachenvPostAsyncWithHttpInfo($envGroup, $envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestAttachenvPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentGroupRestAttachenvPostRequest($envGroup, $envName, $targetAppid, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentGroupRestAttachenvPost'
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestAttachenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentGroupRestAttachenvPostRequest($envGroup, $envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestAttachenvPost'][0])
    {

        // verify the required parameter 'envGroup' is set
        if ($envGroup === null || (is_array($envGroup) && count($envGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envGroup when calling environmentGroupRestAttachenvPost'
            );
        }
        if (strlen($envGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envGroup" when calling GroupServiceApi.environmentGroupRestAttachenvPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envGroup)) {
            throw new \InvalidArgumentException("invalid value for \"envGroup\" when calling GroupServiceApi.environmentGroupRestAttachenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling GroupServiceApi.environmentGroupRestAttachenvPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling GroupServiceApi.environmentGroupRestAttachenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($targetAppid !== null && strlen($targetAppid) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$targetAppid" when calling GroupServiceApi.environmentGroupRestAttachenvPost, must be smaller than or equal to 2147483647.');
        }
        if ($targetAppid !== null && !preg_match("/(.*){0,2147483647}/", $targetAppid)) {
            throw new \InvalidArgumentException("invalid value for \"targetAppid\" when calling GroupServiceApi.environmentGroupRestAttachenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling GroupServiceApi.environmentGroupRestAttachenvPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling GroupServiceApi.environmentGroupRestAttachenvPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/group/rest/attachenv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($envGroup !== null) {
            $formParams['envGroup'] = ObjectSerializer::toFormValue($envGroup);
        }
        // form params
        if ($targetAppid !== null) {
            $formParams['targetAppid'] = ObjectSerializer::toFormValue($targetAppid);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentGroupRestCreategroupPost
     *
     * @param  \OpenAPI\Client\Model\EnvironmentGroupRestEditgroupPostRequestData $data data (optional)
     * @param  string $envName envName (optional)
     * @param  string $envGroup envGroup (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestCreategroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentGroupRestCreategroupPost($data = null, $envName = null, $envGroup = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestCreategroupPost'][0])
    {
        list($response) = $this->environmentGroupRestCreategroupPostWithHttpInfo($data, $envName, $envGroup, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation environmentGroupRestCreategroupPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\EnvironmentGroupRestEditgroupPostRequestData $data (optional)
     * @param  string $envName (optional)
     * @param  string $envGroup (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestCreategroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentGroupRestCreategroupPostWithHttpInfo($data = null, $envName = null, $envGroup = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestCreategroupPost'][0])
    {
        $request = $this->environmentGroupRestCreategroupPostRequest($data, $envName, $envGroup, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentGroupRestCreategroupPostAsync
     *
     * @param  \OpenAPI\Client\Model\EnvironmentGroupRestEditgroupPostRequestData $data (optional)
     * @param  string $envName (optional)
     * @param  string $envGroup (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestCreategroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestCreategroupPostAsync($data = null, $envName = null, $envGroup = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestCreategroupPost'][0])
    {
        return $this->environmentGroupRestCreategroupPostAsyncWithHttpInfo($data, $envName, $envGroup, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentGroupRestCreategroupPostAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\EnvironmentGroupRestEditgroupPostRequestData $data (optional)
     * @param  string $envName (optional)
     * @param  string $envGroup (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestCreategroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestCreategroupPostAsyncWithHttpInfo($data = null, $envName = null, $envGroup = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestCreategroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentGroupRestCreategroupPostRequest($data, $envName, $envGroup, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentGroupRestCreategroupPost'
     *
     * @param  \OpenAPI\Client\Model\EnvironmentGroupRestEditgroupPostRequestData $data (optional)
     * @param  string $envName (optional)
     * @param  string $envGroup (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestCreategroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentGroupRestCreategroupPostRequest($data = null, $envName = null, $envGroup = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestCreategroupPost'][0])
    {


        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling GroupServiceApi.environmentGroupRestCreategroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling GroupServiceApi.environmentGroupRestCreategroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envGroup !== null && strlen($envGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envGroup" when calling GroupServiceApi.environmentGroupRestCreategroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($envGroup !== null && !preg_match("/(.*){0,2147483647}/", $envGroup)) {
            throw new \InvalidArgumentException("invalid value for \"envGroup\" when calling GroupServiceApi.environmentGroupRestCreategroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling GroupServiceApi.environmentGroupRestCreategroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling GroupServiceApi.environmentGroupRestCreategroupPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/group/rest/creategroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($data !== null) {
            $formParams['data'] = ObjectSerializer::toFormValue($data);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($envGroup !== null) {
            $formParams['envGroup'] = ObjectSerializer::toFormValue($envGroup);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentGroupRestDetachenvPost
     *
     * @param  string $envGroup envGroup (required)
     * @param  string $envName envName (optional)
     * @param  string $targetAppid targetAppid (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestDetachenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentGroupRestDetachenvPost($envGroup, $envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestDetachenvPost'][0])
    {
        list($response) = $this->environmentGroupRestDetachenvPostWithHttpInfo($envGroup, $envName, $targetAppid, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation environmentGroupRestDetachenvPostWithHttpInfo
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestDetachenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentGroupRestDetachenvPostWithHttpInfo($envGroup, $envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestDetachenvPost'][0])
    {
        $request = $this->environmentGroupRestDetachenvPostRequest($envGroup, $envName, $targetAppid, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentGroupRestDetachenvPostAsync
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestDetachenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestDetachenvPostAsync($envGroup, $envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestDetachenvPost'][0])
    {
        return $this->environmentGroupRestDetachenvPostAsyncWithHttpInfo($envGroup, $envName, $targetAppid, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentGroupRestDetachenvPostAsyncWithHttpInfo
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestDetachenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestDetachenvPostAsyncWithHttpInfo($envGroup, $envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestDetachenvPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentGroupRestDetachenvPostRequest($envGroup, $envName, $targetAppid, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentGroupRestDetachenvPost'
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestDetachenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentGroupRestDetachenvPostRequest($envGroup, $envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestDetachenvPost'][0])
    {

        // verify the required parameter 'envGroup' is set
        if ($envGroup === null || (is_array($envGroup) && count($envGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envGroup when calling environmentGroupRestDetachenvPost'
            );
        }
        if (strlen($envGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envGroup" when calling GroupServiceApi.environmentGroupRestDetachenvPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envGroup)) {
            throw new \InvalidArgumentException("invalid value for \"envGroup\" when calling GroupServiceApi.environmentGroupRestDetachenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling GroupServiceApi.environmentGroupRestDetachenvPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling GroupServiceApi.environmentGroupRestDetachenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($targetAppid !== null && strlen($targetAppid) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$targetAppid" when calling GroupServiceApi.environmentGroupRestDetachenvPost, must be smaller than or equal to 2147483647.');
        }
        if ($targetAppid !== null && !preg_match("/(.*){0,2147483647}/", $targetAppid)) {
            throw new \InvalidArgumentException("invalid value for \"targetAppid\" when calling GroupServiceApi.environmentGroupRestDetachenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling GroupServiceApi.environmentGroupRestDetachenvPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling GroupServiceApi.environmentGroupRestDetachenvPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/group/rest/detachenv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($envGroup !== null) {
            $formParams['envGroup'] = ObjectSerializer::toFormValue($envGroup);
        }
        // form params
        if ($targetAppid !== null) {
            $formParams['targetAppid'] = ObjectSerializer::toFormValue($targetAppid);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentGroupRestEditgroupPost
     *
     * @param  string $srcGroupName srcGroupName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentGroupRestEditgroupPostRequestData $data data (optional)
     * @param  string $envName envName (optional)
     * @param  string $dstGroupName dstGroupName (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestEditgroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentGroupRestEditgroupPost($srcGroupName, $data = null, $envName = null, $dstGroupName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestEditgroupPost'][0])
    {
        list($response) = $this->environmentGroupRestEditgroupPostWithHttpInfo($srcGroupName, $data, $envName, $dstGroupName, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation environmentGroupRestEditgroupPostWithHttpInfo
     *
     * @param  string $srcGroupName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentGroupRestEditgroupPostRequestData $data (optional)
     * @param  string $envName (optional)
     * @param  string $dstGroupName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestEditgroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentGroupRestEditgroupPostWithHttpInfo($srcGroupName, $data = null, $envName = null, $dstGroupName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestEditgroupPost'][0])
    {
        $request = $this->environmentGroupRestEditgroupPostRequest($srcGroupName, $data, $envName, $dstGroupName, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentGroupRestEditgroupPostAsync
     *
     * @param  string $srcGroupName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentGroupRestEditgroupPostRequestData $data (optional)
     * @param  string $envName (optional)
     * @param  string $dstGroupName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestEditgroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestEditgroupPostAsync($srcGroupName, $data = null, $envName = null, $dstGroupName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestEditgroupPost'][0])
    {
        return $this->environmentGroupRestEditgroupPostAsyncWithHttpInfo($srcGroupName, $data, $envName, $dstGroupName, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentGroupRestEditgroupPostAsyncWithHttpInfo
     *
     * @param  string $srcGroupName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentGroupRestEditgroupPostRequestData $data (optional)
     * @param  string $envName (optional)
     * @param  string $dstGroupName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestEditgroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestEditgroupPostAsyncWithHttpInfo($srcGroupName, $data = null, $envName = null, $dstGroupName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestEditgroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentGroupRestEditgroupPostRequest($srcGroupName, $data, $envName, $dstGroupName, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentGroupRestEditgroupPost'
     *
     * @param  string $srcGroupName (required)
     * @param  \OpenAPI\Client\Model\EnvironmentGroupRestEditgroupPostRequestData $data (optional)
     * @param  string $envName (optional)
     * @param  string $dstGroupName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestEditgroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentGroupRestEditgroupPostRequest($srcGroupName, $data = null, $envName = null, $dstGroupName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestEditgroupPost'][0])
    {

        // verify the required parameter 'srcGroupName' is set
        if ($srcGroupName === null || (is_array($srcGroupName) && count($srcGroupName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $srcGroupName when calling environmentGroupRestEditgroupPost'
            );
        }
        if (strlen($srcGroupName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$srcGroupName" when calling GroupServiceApi.environmentGroupRestEditgroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $srcGroupName)) {
            throw new \InvalidArgumentException("invalid value for \"srcGroupName\" when calling GroupServiceApi.environmentGroupRestEditgroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling GroupServiceApi.environmentGroupRestEditgroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling GroupServiceApi.environmentGroupRestEditgroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($dstGroupName !== null && strlen($dstGroupName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$dstGroupName" when calling GroupServiceApi.environmentGroupRestEditgroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($dstGroupName !== null && !preg_match("/(.*){0,2147483647}/", $dstGroupName)) {
            throw new \InvalidArgumentException("invalid value for \"dstGroupName\" when calling GroupServiceApi.environmentGroupRestEditgroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling GroupServiceApi.environmentGroupRestEditgroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling GroupServiceApi.environmentGroupRestEditgroupPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/group/rest/editgroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($srcGroupName !== null) {
            $formParams['srcGroupName'] = ObjectSerializer::toFormValue($srcGroupName);
        }
        // form params
        if ($data !== null) {
            $formParams['data'] = ObjectSerializer::toFormValue($data);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($dstGroupName !== null) {
            $formParams['dstGroupName'] = ObjectSerializer::toFormValue($dstGroupName);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentGroupRestGetgroupsPost
     *
     * @param  string $envName envName (optional)
     * @param  string $targetAppid targetAppid (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestGetgroupsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentGroupRestGetgroupsPost($envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestGetgroupsPost'][0])
    {
        list($response) = $this->environmentGroupRestGetgroupsPostWithHttpInfo($envName, $targetAppid, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation environmentGroupRestGetgroupsPostWithHttpInfo
     *
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestGetgroupsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentGroupRestGetgroupsPostWithHttpInfo($envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestGetgroupsPost'][0])
    {
        $request = $this->environmentGroupRestGetgroupsPostRequest($envName, $targetAppid, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentGroupRestGetgroupsPostAsync
     *
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestGetgroupsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestGetgroupsPostAsync($envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestGetgroupsPost'][0])
    {
        return $this->environmentGroupRestGetgroupsPostAsyncWithHttpInfo($envName, $targetAppid, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentGroupRestGetgroupsPostAsyncWithHttpInfo
     *
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestGetgroupsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestGetgroupsPostAsyncWithHttpInfo($envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestGetgroupsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentGroupRestGetgroupsPostRequest($envName, $targetAppid, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentGroupRestGetgroupsPost'
     *
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestGetgroupsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentGroupRestGetgroupsPostRequest($envName = null, $targetAppid = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestGetgroupsPost'][0])
    {

        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling GroupServiceApi.environmentGroupRestGetgroupsPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling GroupServiceApi.environmentGroupRestGetgroupsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($targetAppid !== null && strlen($targetAppid) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$targetAppid" when calling GroupServiceApi.environmentGroupRestGetgroupsPost, must be smaller than or equal to 2147483647.');
        }
        if ($targetAppid !== null && !preg_match("/(.*){0,2147483647}/", $targetAppid)) {
            throw new \InvalidArgumentException("invalid value for \"targetAppid\" when calling GroupServiceApi.environmentGroupRestGetgroupsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling GroupServiceApi.environmentGroupRestGetgroupsPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling GroupServiceApi.environmentGroupRestGetgroupsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/group/rest/getgroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($targetAppid !== null) {
            $formParams['targetAppid'] = ObjectSerializer::toFormValue($targetAppid);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentGroupRestRemovegroupPost
     *
     * @param  string $envGroup envGroup (required)
     * @param  string $envName envName (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestRemovegroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentGroupRestRemovegroupPost($envGroup, $envName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestRemovegroupPost'][0])
    {
        list($response) = $this->environmentGroupRestRemovegroupPostWithHttpInfo($envGroup, $envName, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation environmentGroupRestRemovegroupPostWithHttpInfo
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestRemovegroupPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentGroupRestRemovegroupPostWithHttpInfo($envGroup, $envName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestRemovegroupPost'][0])
    {
        $request = $this->environmentGroupRestRemovegroupPostRequest($envGroup, $envName, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentGroupRestRemovegroupPostAsync
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestRemovegroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestRemovegroupPostAsync($envGroup, $envName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestRemovegroupPost'][0])
    {
        return $this->environmentGroupRestRemovegroupPostAsyncWithHttpInfo($envGroup, $envName, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentGroupRestRemovegroupPostAsyncWithHttpInfo
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestRemovegroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestRemovegroupPostAsyncWithHttpInfo($envGroup, $envName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestRemovegroupPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentGroupRestRemovegroupPostRequest($envGroup, $envName, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentGroupRestRemovegroupPost'
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestRemovegroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentGroupRestRemovegroupPostRequest($envGroup, $envName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestRemovegroupPost'][0])
    {

        // verify the required parameter 'envGroup' is set
        if ($envGroup === null || (is_array($envGroup) && count($envGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envGroup when calling environmentGroupRestRemovegroupPost'
            );
        }
        if (strlen($envGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envGroup" when calling GroupServiceApi.environmentGroupRestRemovegroupPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envGroup)) {
            throw new \InvalidArgumentException("invalid value for \"envGroup\" when calling GroupServiceApi.environmentGroupRestRemovegroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling GroupServiceApi.environmentGroupRestRemovegroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling GroupServiceApi.environmentGroupRestRemovegroupPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling GroupServiceApi.environmentGroupRestRemovegroupPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling GroupServiceApi.environmentGroupRestRemovegroupPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/group/rest/removegroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($envGroup !== null) {
            $formParams['envGroup'] = ObjectSerializer::toFormValue($envGroup);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentGroupRestSetenvPost
     *
     * @param  string $envGroup envGroup (required)
     * @param  string $envName envName (optional)
     * @param  string $targetAppid targetAppid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestSetenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentGroupRestSetenvPost($envGroup, $envName = null, $targetAppid = null, string $contentType = self::contentTypes['environmentGroupRestSetenvPost'][0])
    {
        list($response) = $this->environmentGroupRestSetenvPostWithHttpInfo($envGroup, $envName, $targetAppid, $contentType);
        return $response;
    }

    /**
     * Operation environmentGroupRestSetenvPostWithHttpInfo
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestSetenvPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentGroupRestSetenvPostWithHttpInfo($envGroup, $envName = null, $targetAppid = null, string $contentType = self::contentTypes['environmentGroupRestSetenvPost'][0])
    {
        $request = $this->environmentGroupRestSetenvPostRequest($envGroup, $envName, $targetAppid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentGroupRestSetenvPostAsync
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestSetenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestSetenvPostAsync($envGroup, $envName = null, $targetAppid = null, string $contentType = self::contentTypes['environmentGroupRestSetenvPost'][0])
    {
        return $this->environmentGroupRestSetenvPostAsyncWithHttpInfo($envGroup, $envName, $targetAppid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentGroupRestSetenvPostAsyncWithHttpInfo
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestSetenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestSetenvPostAsyncWithHttpInfo($envGroup, $envName = null, $targetAppid = null, string $contentType = self::contentTypes['environmentGroupRestSetenvPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentGroupRestSetenvPostRequest($envGroup, $envName, $targetAppid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentGroupRestSetenvPost'
     *
     * @param  string $envGroup (required)
     * @param  string $envName (optional)
     * @param  string $targetAppid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestSetenvPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentGroupRestSetenvPostRequest($envGroup, $envName = null, $targetAppid = null, string $contentType = self::contentTypes['environmentGroupRestSetenvPost'][0])
    {

        // verify the required parameter 'envGroup' is set
        if ($envGroup === null || (is_array($envGroup) && count($envGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envGroup when calling environmentGroupRestSetenvPost'
            );
        }
        if (strlen($envGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envGroup" when calling GroupServiceApi.environmentGroupRestSetenvPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envGroup)) {
            throw new \InvalidArgumentException("invalid value for \"envGroup\" when calling GroupServiceApi.environmentGroupRestSetenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling GroupServiceApi.environmentGroupRestSetenvPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling GroupServiceApi.environmentGroupRestSetenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($targetAppid !== null && strlen($targetAppid) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$targetAppid" when calling GroupServiceApi.environmentGroupRestSetenvPost, must be smaller than or equal to 2147483647.');
        }
        if ($targetAppid !== null && !preg_match("/(.*){0,2147483647}/", $targetAppid)) {
            throw new \InvalidArgumentException("invalid value for \"targetAppid\" when calling GroupServiceApi.environmentGroupRestSetenvPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/group/rest/setenv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($envGroup !== null) {
            $formParams['envGroup'] = ObjectSerializer::toFormValue($envGroup);
        }
        // form params
        if ($targetAppid !== null) {
            $formParams['targetAppid'] = ObjectSerializer::toFormValue($targetAppid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentGroupRestSetisolationenabledPost
     *
     * @param  string $groupName groupName (required)
     * @param  bool $enabled enabled (required)
     * @param  string $envName envName (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestSetisolationenabledPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentGroupRestSetisolationenabledPost($groupName, $enabled, $envName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestSetisolationenabledPost'][0])
    {
        list($response) = $this->environmentGroupRestSetisolationenabledPostWithHttpInfo($groupName, $enabled, $envName, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation environmentGroupRestSetisolationenabledPostWithHttpInfo
     *
     * @param  string $groupName (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestSetisolationenabledPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentGroupRestSetisolationenabledPostWithHttpInfo($groupName, $enabled, $envName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestSetisolationenabledPost'][0])
    {
        $request = $this->environmentGroupRestSetisolationenabledPostRequest($groupName, $enabled, $envName, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentGroupRestSetisolationenabledPostAsync
     *
     * @param  string $groupName (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestSetisolationenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestSetisolationenabledPostAsync($groupName, $enabled, $envName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestSetisolationenabledPost'][0])
    {
        return $this->environmentGroupRestSetisolationenabledPostAsyncWithHttpInfo($groupName, $enabled, $envName, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentGroupRestSetisolationenabledPostAsyncWithHttpInfo
     *
     * @param  string $groupName (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestSetisolationenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentGroupRestSetisolationenabledPostAsyncWithHttpInfo($groupName, $enabled, $envName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestSetisolationenabledPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentGroupRestSetisolationenabledPostRequest($groupName, $enabled, $envName, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentGroupRestSetisolationenabledPost'
     *
     * @param  string $groupName (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentGroupRestSetisolationenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentGroupRestSetisolationenabledPostRequest($groupName, $enabled, $envName = null, $ownerUid = null, string $contentType = self::contentTypes['environmentGroupRestSetisolationenabledPost'][0])
    {

        // verify the required parameter 'groupName' is set
        if ($groupName === null || (is_array($groupName) && count($groupName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupName when calling environmentGroupRestSetisolationenabledPost'
            );
        }
        if (strlen($groupName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$groupName" when calling GroupServiceApi.environmentGroupRestSetisolationenabledPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $groupName)) {
            throw new \InvalidArgumentException("invalid value for \"groupName\" when calling GroupServiceApi.environmentGroupRestSetisolationenabledPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'enabled' is set
        if ($enabled === null || (is_array($enabled) && count($enabled) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enabled when calling environmentGroupRestSetisolationenabledPost'
            );
        }

        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling GroupServiceApi.environmentGroupRestSetisolationenabledPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling GroupServiceApi.environmentGroupRestSetisolationenabledPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling GroupServiceApi.environmentGroupRestSetisolationenabledPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling GroupServiceApi.environmentGroupRestSetisolationenabledPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/group/rest/setisolationenabled';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($groupName !== null) {
            $formParams['groupName'] = ObjectSerializer::toFormValue($groupName);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }
        // form params
        if ($enabled !== null) {
            $formParams['enabled'] = ObjectSerializer::toFormValue($enabled);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
