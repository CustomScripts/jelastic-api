<?php
/**
 * DeploymentServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DeploymentServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DeploymentServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'environmentDeploymentRestAddbuildprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestAddrepoPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestBuilddeployprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestBuildprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestDeployPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestDeployarchivePost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestDeployprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestEditbuildprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestEditprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestEditrepoPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestGetbuildprojectinfoPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestGetbuildprojectsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestGetdeploymentsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestGethooksPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestGetprojectinfoPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestGetreposPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestRemovebuildprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestRemoverepoPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestRenamecontextPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestUndeployPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentDeploymentRestUpdatePost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation environmentDeploymentRestAddbuildprojectPost
     *
     * @param  string $envName envName (required)
     * @param  string $repo repo (required)
     * @param  string $name name (required)
     * @param  int $nodeId nodeId (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings settings (optional)
     * @param  string $hooks hooks (optional)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestAddbuildprojectPostRequestDeployment $deployment deployment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestAddbuildprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse
     */
    public function environmentDeploymentRestAddbuildprojectPost($envName, $repo, $name, $nodeId, $settings = null, $hooks = null, $deployment = null, string $contentType = self::contentTypes['environmentDeploymentRestAddbuildprojectPost'][0])
    {
        list($response) = $this->environmentDeploymentRestAddbuildprojectPostWithHttpInfo($envName, $repo, $name, $nodeId, $settings, $hooks, $deployment, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestAddbuildprojectPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $repo (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  string $hooks (optional)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestAddbuildprojectPostRequestDeployment $deployment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestAddbuildprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestAddbuildprojectPostWithHttpInfo($envName, $repo, $name, $nodeId, $settings = null, $hooks = null, $deployment = null, string $contentType = self::contentTypes['environmentDeploymentRestAddbuildprojectPost'][0])
    {
        $request = $this->environmentDeploymentRestAddbuildprojectPostRequest($envName, $repo, $name, $nodeId, $settings, $hooks, $deployment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestAddbuildprojectPostAsync
     *
     * @param  string $envName (required)
     * @param  string $repo (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  string $hooks (optional)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestAddbuildprojectPostRequestDeployment $deployment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestAddbuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestAddbuildprojectPostAsync($envName, $repo, $name, $nodeId, $settings = null, $hooks = null, $deployment = null, string $contentType = self::contentTypes['environmentDeploymentRestAddbuildprojectPost'][0])
    {
        return $this->environmentDeploymentRestAddbuildprojectPostAsyncWithHttpInfo($envName, $repo, $name, $nodeId, $settings, $hooks, $deployment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestAddbuildprojectPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $repo (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  string $hooks (optional)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestAddbuildprojectPostRequestDeployment $deployment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestAddbuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestAddbuildprojectPostAsyncWithHttpInfo($envName, $repo, $name, $nodeId, $settings = null, $hooks = null, $deployment = null, string $contentType = self::contentTypes['environmentDeploymentRestAddbuildprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse';
        $request = $this->environmentDeploymentRestAddbuildprojectPostRequest($envName, $repo, $name, $nodeId, $settings, $hooks, $deployment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestAddbuildprojectPost'
     *
     * @param  string $envName (required)
     * @param  string $repo (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  string $hooks (optional)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestAddbuildprojectPostRequestDeployment $deployment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestAddbuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestAddbuildprojectPostRequest($envName, $repo, $name, $nodeId, $settings = null, $hooks = null, $deployment = null, string $contentType = self::contentTypes['environmentDeploymentRestAddbuildprojectPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestAddbuildprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestAddbuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestAddbuildprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling environmentDeploymentRestAddbuildprojectPost'
            );
        }
        if (strlen($repo) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$repo" when calling DeploymentServiceApi.environmentDeploymentRestAddbuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $repo)) {
            throw new \InvalidArgumentException("invalid value for \"repo\" when calling DeploymentServiceApi.environmentDeploymentRestAddbuildprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling environmentDeploymentRestAddbuildprojectPost'
            );
        }
        if (strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling DeploymentServiceApi.environmentDeploymentRestAddbuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling DeploymentServiceApi.environmentDeploymentRestAddbuildprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentDeploymentRestAddbuildprojectPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestAddbuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestAddbuildprojectPost, must be bigger than or equal to -2147483648.');
        }
        

        if ($hooks !== null && strlen($hooks) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$hooks" when calling DeploymentServiceApi.environmentDeploymentRestAddbuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($hooks !== null && !preg_match("/(.*){0,2147483647}/", $hooks)) {
            throw new \InvalidArgumentException("invalid value for \"hooks\" when calling DeploymentServiceApi.environmentDeploymentRestAddbuildprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        


        $resourcePath = '/environment/deployment/rest/addbuildproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($settings !== null) {
            $formParams['settings'] = ObjectSerializer::toFormValue($settings);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($repo !== null) {
            $formParams['repo'] = ObjectSerializer::toFormValue($repo);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($hooks !== null) {
            $formParams['hooks'] = ObjectSerializer::toFormValue($hooks);
        }
        // form params
        if ($deployment !== null) {
            $formParams['deployment'] = ObjectSerializer::toFormValue($deployment);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestAddrepoPost
     *
     * @param  string $name name (required)
     * @param  string $url url (required)
     * @param  string $password password (optional)
     * @param  int $keyId keyId (optional)
     * @param  string $description description (optional)
     * @param  string $type type (optional)
     * @param  string $login login (optional)
     * @param  string $branch branch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestAddrepoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentDeploymentRestAddrepoPost($name, $url, $password = null, $keyId = null, $description = null, $type = null, $login = null, $branch = null, string $contentType = self::contentTypes['environmentDeploymentRestAddrepoPost'][0])
    {
        list($response) = $this->environmentDeploymentRestAddrepoPostWithHttpInfo($name, $url, $password, $keyId, $description, $type, $login, $branch, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestAddrepoPostWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $url (required)
     * @param  string $password (optional)
     * @param  int $keyId (optional)
     * @param  string $description (optional)
     * @param  string $type (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestAddrepoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestAddrepoPostWithHttpInfo($name, $url, $password = null, $keyId = null, $description = null, $type = null, $login = null, $branch = null, string $contentType = self::contentTypes['environmentDeploymentRestAddrepoPost'][0])
    {
        $request = $this->environmentDeploymentRestAddrepoPostRequest($name, $url, $password, $keyId, $description, $type, $login, $branch, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestAddrepoPostAsync
     *
     * @param  string $name (required)
     * @param  string $url (required)
     * @param  string $password (optional)
     * @param  int $keyId (optional)
     * @param  string $description (optional)
     * @param  string $type (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestAddrepoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestAddrepoPostAsync($name, $url, $password = null, $keyId = null, $description = null, $type = null, $login = null, $branch = null, string $contentType = self::contentTypes['environmentDeploymentRestAddrepoPost'][0])
    {
        return $this->environmentDeploymentRestAddrepoPostAsyncWithHttpInfo($name, $url, $password, $keyId, $description, $type, $login, $branch, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestAddrepoPostAsyncWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $url (required)
     * @param  string $password (optional)
     * @param  int $keyId (optional)
     * @param  string $description (optional)
     * @param  string $type (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestAddrepoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestAddrepoPostAsyncWithHttpInfo($name, $url, $password = null, $keyId = null, $description = null, $type = null, $login = null, $branch = null, string $contentType = self::contentTypes['environmentDeploymentRestAddrepoPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentDeploymentRestAddrepoPostRequest($name, $url, $password, $keyId, $description, $type, $login, $branch, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestAddrepoPost'
     *
     * @param  string $name (required)
     * @param  string $url (required)
     * @param  string $password (optional)
     * @param  int $keyId (optional)
     * @param  string $description (optional)
     * @param  string $type (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestAddrepoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestAddrepoPostRequest($name, $url, $password = null, $keyId = null, $description = null, $type = null, $login = null, $branch = null, string $contentType = self::contentTypes['environmentDeploymentRestAddrepoPost'][0])
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling environmentDeploymentRestAddrepoPost'
            );
        }
        if (strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling environmentDeploymentRestAddrepoPost'
            );
        }
        if (strlen($url) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$url" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $url)) {
            throw new \InvalidArgumentException("invalid value for \"url\" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($keyId !== null && $keyId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$keyId" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($keyId !== null && $keyId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$keyId" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($description !== null && strlen($description) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$description" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($description !== null && !preg_match("/(.*){0,2147483647}/", $description)) {
            throw new \InvalidArgumentException("invalid value for \"description\" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($type !== null && strlen($type) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$type" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($type !== null && !preg_match("/(.*){0,2147483647}/", $type)) {
            throw new \InvalidArgumentException("invalid value for \"type\" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($login !== null && strlen($login) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$login" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($login !== null && !preg_match("/(.*){0,2147483647}/", $login)) {
            throw new \InvalidArgumentException("invalid value for \"login\" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($branch !== null && strlen($branch) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$branch" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($branch !== null && !preg_match("/(.*){0,2147483647}/", $branch)) {
            throw new \InvalidArgumentException("invalid value for \"branch\" when calling DeploymentServiceApi.environmentDeploymentRestAddrepoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/deployment/rest/addrepo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($keyId !== null) {
            $formParams['keyId'] = ObjectSerializer::toFormValue($keyId);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($login !== null) {
            $formParams['login'] = ObjectSerializer::toFormValue($login);
        }
        // form params
        if ($branch !== null) {
            $formParams['branch'] = ObjectSerializer::toFormValue($branch);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestBuilddeployprojectPost
     *
     * @param  string $envName envName (required)
     * @param  string $project project (required)
     * @param  int $nodeId nodeId (required)
     * @param  int $delay delay (optional)
     * @param  bool $skipUpdate skipUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestBuilddeployprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentDeploymentRestBuilddeployprojectPost($envName, $project, $nodeId, $delay = null, $skipUpdate = null, string $contentType = self::contentTypes['environmentDeploymentRestBuilddeployprojectPost'][0])
    {
        list($response) = $this->environmentDeploymentRestBuilddeployprojectPostWithHttpInfo($envName, $project, $nodeId, $delay, $skipUpdate, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestBuilddeployprojectPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  int $delay (optional)
     * @param  bool $skipUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestBuilddeployprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestBuilddeployprojectPostWithHttpInfo($envName, $project, $nodeId, $delay = null, $skipUpdate = null, string $contentType = self::contentTypes['environmentDeploymentRestBuilddeployprojectPost'][0])
    {
        $request = $this->environmentDeploymentRestBuilddeployprojectPostRequest($envName, $project, $nodeId, $delay, $skipUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestBuilddeployprojectPostAsync
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  int $delay (optional)
     * @param  bool $skipUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestBuilddeployprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestBuilddeployprojectPostAsync($envName, $project, $nodeId, $delay = null, $skipUpdate = null, string $contentType = self::contentTypes['environmentDeploymentRestBuilddeployprojectPost'][0])
    {
        return $this->environmentDeploymentRestBuilddeployprojectPostAsyncWithHttpInfo($envName, $project, $nodeId, $delay, $skipUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestBuilddeployprojectPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  int $delay (optional)
     * @param  bool $skipUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestBuilddeployprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestBuilddeployprojectPostAsyncWithHttpInfo($envName, $project, $nodeId, $delay = null, $skipUpdate = null, string $contentType = self::contentTypes['environmentDeploymentRestBuilddeployprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentDeploymentRestBuilddeployprojectPostRequest($envName, $project, $nodeId, $delay, $skipUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestBuilddeployprojectPost'
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  int $delay (optional)
     * @param  bool $skipUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestBuilddeployprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestBuilddeployprojectPostRequest($envName, $project, $nodeId, $delay = null, $skipUpdate = null, string $contentType = self::contentTypes['environmentDeploymentRestBuilddeployprojectPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestBuilddeployprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestBuilddeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestBuilddeployprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling environmentDeploymentRestBuilddeployprojectPost'
            );
        }
        if (strlen($project) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$project" when calling DeploymentServiceApi.environmentDeploymentRestBuilddeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $project)) {
            throw new \InvalidArgumentException("invalid value for \"project\" when calling DeploymentServiceApi.environmentDeploymentRestBuilddeployprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentDeploymentRestBuilddeployprojectPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestBuilddeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestBuilddeployprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling DeploymentServiceApi.environmentDeploymentRestBuilddeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling DeploymentServiceApi.environmentDeploymentRestBuilddeployprojectPost, must be bigger than or equal to -2147483648.');
        }
        


        $resourcePath = '/environment/deployment/rest/builddeployproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($project !== null) {
            $formParams['project'] = ObjectSerializer::toFormValue($project);
        }
        // form params
        if ($skipUpdate !== null) {
            $formParams['skipUpdate'] = ObjectSerializer::toFormValue($skipUpdate);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestBuildprojectPost
     *
     * @param  string $envName envName (required)
     * @param  string $project project (required)
     * @param  int $nodeId nodeId (required)
     * @param  bool $skipUpload skipUpload (optional)
     * @param  bool $skipUpdate skipUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestBuildprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentDeploymentRestBuildprojectPost($envName, $project, $nodeId, $skipUpload = null, $skipUpdate = null, string $contentType = self::contentTypes['environmentDeploymentRestBuildprojectPost'][0])
    {
        list($response) = $this->environmentDeploymentRestBuildprojectPostWithHttpInfo($envName, $project, $nodeId, $skipUpload, $skipUpdate, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestBuildprojectPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  bool $skipUpload (optional)
     * @param  bool $skipUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestBuildprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestBuildprojectPostWithHttpInfo($envName, $project, $nodeId, $skipUpload = null, $skipUpdate = null, string $contentType = self::contentTypes['environmentDeploymentRestBuildprojectPost'][0])
    {
        $request = $this->environmentDeploymentRestBuildprojectPostRequest($envName, $project, $nodeId, $skipUpload, $skipUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestBuildprojectPostAsync
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  bool $skipUpload (optional)
     * @param  bool $skipUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestBuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestBuildprojectPostAsync($envName, $project, $nodeId, $skipUpload = null, $skipUpdate = null, string $contentType = self::contentTypes['environmentDeploymentRestBuildprojectPost'][0])
    {
        return $this->environmentDeploymentRestBuildprojectPostAsyncWithHttpInfo($envName, $project, $nodeId, $skipUpload, $skipUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestBuildprojectPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  bool $skipUpload (optional)
     * @param  bool $skipUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestBuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestBuildprojectPostAsyncWithHttpInfo($envName, $project, $nodeId, $skipUpload = null, $skipUpdate = null, string $contentType = self::contentTypes['environmentDeploymentRestBuildprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentDeploymentRestBuildprojectPostRequest($envName, $project, $nodeId, $skipUpload, $skipUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestBuildprojectPost'
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  bool $skipUpload (optional)
     * @param  bool $skipUpdate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestBuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestBuildprojectPostRequest($envName, $project, $nodeId, $skipUpload = null, $skipUpdate = null, string $contentType = self::contentTypes['environmentDeploymentRestBuildprojectPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestBuildprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestBuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestBuildprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling environmentDeploymentRestBuildprojectPost'
            );
        }
        if (strlen($project) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$project" when calling DeploymentServiceApi.environmentDeploymentRestBuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $project)) {
            throw new \InvalidArgumentException("invalid value for \"project\" when calling DeploymentServiceApi.environmentDeploymentRestBuildprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentDeploymentRestBuildprojectPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestBuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestBuildprojectPost, must be bigger than or equal to -2147483648.');
        }
        



        $resourcePath = '/environment/deployment/rest/buildproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($skipUpload !== null) {
            $formParams['skipUpload'] = ObjectSerializer::toFormValue($skipUpload);
        }
        // form params
        if ($project !== null) {
            $formParams['project'] = ObjectSerializer::toFormValue($project);
        }
        // form params
        if ($skipUpdate !== null) {
            $formParams['skipUpdate'] = ObjectSerializer::toFormValue($skipUpdate);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestDeployPost
     *
     * @param  string $envName envName (required)
     * @param  string $repo repo (required)
     * @param  string $context context (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings settings (optional)
     * @param  int $delay delay (optional)
     * @param  int $buildNodeId buildNodeId (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $hooks hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentDeploymentRestDeployPost($envName, $repo, $context, $settings = null, $delay = null, $buildNodeId = null, $nodeGroup = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestDeployPost'][0])
    {
        list($response) = $this->environmentDeploymentRestDeployPostWithHttpInfo($envName, $repo, $context, $settings, $delay, $buildNodeId, $nodeGroup, $hooks, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestDeployPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $repo (required)
     * @param  string $context (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  int $delay (optional)
     * @param  int $buildNodeId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestDeployPostWithHttpInfo($envName, $repo, $context, $settings = null, $delay = null, $buildNodeId = null, $nodeGroup = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestDeployPost'][0])
    {
        $request = $this->environmentDeploymentRestDeployPostRequest($envName, $repo, $context, $settings, $delay, $buildNodeId, $nodeGroup, $hooks, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestDeployPostAsync
     *
     * @param  string $envName (required)
     * @param  string $repo (required)
     * @param  string $context (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  int $delay (optional)
     * @param  int $buildNodeId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestDeployPostAsync($envName, $repo, $context, $settings = null, $delay = null, $buildNodeId = null, $nodeGroup = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestDeployPost'][0])
    {
        return $this->environmentDeploymentRestDeployPostAsyncWithHttpInfo($envName, $repo, $context, $settings, $delay, $buildNodeId, $nodeGroup, $hooks, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestDeployPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $repo (required)
     * @param  string $context (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  int $delay (optional)
     * @param  int $buildNodeId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestDeployPostAsyncWithHttpInfo($envName, $repo, $context, $settings = null, $delay = null, $buildNodeId = null, $nodeGroup = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestDeployPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentDeploymentRestDeployPostRequest($envName, $repo, $context, $settings, $delay, $buildNodeId, $nodeGroup, $hooks, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestDeployPost'
     *
     * @param  string $envName (required)
     * @param  string $repo (required)
     * @param  string $context (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  int $delay (optional)
     * @param  int $buildNodeId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestDeployPostRequest($envName, $repo, $context, $settings = null, $delay = null, $buildNodeId = null, $nodeGroup = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestDeployPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestDeployPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestDeployPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestDeployPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling environmentDeploymentRestDeployPost'
            );
        }
        if (strlen($repo) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$repo" when calling DeploymentServiceApi.environmentDeploymentRestDeployPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $repo)) {
            throw new \InvalidArgumentException("invalid value for \"repo\" when calling DeploymentServiceApi.environmentDeploymentRestDeployPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling environmentDeploymentRestDeployPost'
            );
        }
        if (strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling DeploymentServiceApi.environmentDeploymentRestDeployPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling DeploymentServiceApi.environmentDeploymentRestDeployPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling DeploymentServiceApi.environmentDeploymentRestDeployPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling DeploymentServiceApi.environmentDeploymentRestDeployPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($buildNodeId !== null && $buildNodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$buildNodeId" when calling DeploymentServiceApi.environmentDeploymentRestDeployPost, must be smaller than or equal to 2147483647.');
        }
        if ($buildNodeId !== null && $buildNodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$buildNodeId" when calling DeploymentServiceApi.environmentDeploymentRestDeployPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling DeploymentServiceApi.environmentDeploymentRestDeployPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling DeploymentServiceApi.environmentDeploymentRestDeployPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($hooks !== null && strlen($hooks) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$hooks" when calling DeploymentServiceApi.environmentDeploymentRestDeployPost, must be smaller than or equal to 2147483647.');
        }
        if ($hooks !== null && !preg_match("/(.*){0,2147483647}/", $hooks)) {
            throw new \InvalidArgumentException("invalid value for \"hooks\" when calling DeploymentServiceApi.environmentDeploymentRestDeployPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/deployment/rest/deploy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($settings !== null) {
            $formParams['settings'] = ObjectSerializer::toFormValue($settings);
        }
        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($repo !== null) {
            $formParams['repo'] = ObjectSerializer::toFormValue($repo);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($buildNodeId !== null) {
            $formParams['buildNodeId'] = ObjectSerializer::toFormValue($buildNodeId);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($hooks !== null) {
            $formParams['hooks'] = ObjectSerializer::toFormValue($hooks);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestDeployarchivePost
     *
     * @param  string $fileName fileName (required)
     * @param  string $envName envName (required)
     * @param  string $fileUrl fileUrl (required)
     * @param  int $delay delay (optional)
     * @param  string $context context (optional)
     * @param  bool $zdt zdt (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $hooks hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployarchivePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses
     */
    public function environmentDeploymentRestDeployarchivePost($fileName, $envName, $fileUrl, $delay = null, $context = null, $zdt = null, $nodeGroup = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestDeployarchivePost'][0])
    {
        list($response) = $this->environmentDeploymentRestDeployarchivePostWithHttpInfo($fileName, $envName, $fileUrl, $delay, $context, $zdt, $nodeGroup, $hooks, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestDeployarchivePostWithHttpInfo
     *
     * @param  string $fileName (required)
     * @param  string $envName (required)
     * @param  string $fileUrl (required)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  bool $zdt (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployarchivePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestDeployarchivePostWithHttpInfo($fileName, $envName, $fileUrl, $delay = null, $context = null, $zdt = null, $nodeGroup = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestDeployarchivePost'][0])
    {
        $request = $this->environmentDeploymentRestDeployarchivePostRequest($fileName, $envName, $fileUrl, $delay, $context, $zdt, $nodeGroup, $hooks, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestDeployarchivePostAsync
     *
     * @param  string $fileName (required)
     * @param  string $envName (required)
     * @param  string $fileUrl (required)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  bool $zdt (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployarchivePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestDeployarchivePostAsync($fileName, $envName, $fileUrl, $delay = null, $context = null, $zdt = null, $nodeGroup = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestDeployarchivePost'][0])
    {
        return $this->environmentDeploymentRestDeployarchivePostAsyncWithHttpInfo($fileName, $envName, $fileUrl, $delay, $context, $zdt, $nodeGroup, $hooks, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestDeployarchivePostAsyncWithHttpInfo
     *
     * @param  string $fileName (required)
     * @param  string $envName (required)
     * @param  string $fileUrl (required)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  bool $zdt (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployarchivePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestDeployarchivePostAsyncWithHttpInfo($fileName, $envName, $fileUrl, $delay = null, $context = null, $zdt = null, $nodeGroup = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestDeployarchivePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeSSHResponses';
        $request = $this->environmentDeploymentRestDeployarchivePostRequest($fileName, $envName, $fileUrl, $delay, $context, $zdt, $nodeGroup, $hooks, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestDeployarchivePost'
     *
     * @param  string $fileName (required)
     * @param  string $envName (required)
     * @param  string $fileUrl (required)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  bool $zdt (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployarchivePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestDeployarchivePostRequest($fileName, $envName, $fileUrl, $delay = null, $context = null, $zdt = null, $nodeGroup = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestDeployarchivePost'][0])
    {

        // verify the required parameter 'fileName' is set
        if ($fileName === null || (is_array($fileName) && count($fileName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileName when calling environmentDeploymentRestDeployarchivePost'
            );
        }
        if (strlen($fileName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$fileName" when calling DeploymentServiceApi.environmentDeploymentRestDeployarchivePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $fileName)) {
            throw new \InvalidArgumentException("invalid value for \"fileName\" when calling DeploymentServiceApi.environmentDeploymentRestDeployarchivePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestDeployarchivePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestDeployarchivePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestDeployarchivePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'fileUrl' is set
        if ($fileUrl === null || (is_array($fileUrl) && count($fileUrl) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileUrl when calling environmentDeploymentRestDeployarchivePost'
            );
        }
        if (strlen($fileUrl) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$fileUrl" when calling DeploymentServiceApi.environmentDeploymentRestDeployarchivePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $fileUrl)) {
            throw new \InvalidArgumentException("invalid value for \"fileUrl\" when calling DeploymentServiceApi.environmentDeploymentRestDeployarchivePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling DeploymentServiceApi.environmentDeploymentRestDeployarchivePost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling DeploymentServiceApi.environmentDeploymentRestDeployarchivePost, must be bigger than or equal to -2147483648.');
        }
        
        if ($context !== null && strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling DeploymentServiceApi.environmentDeploymentRestDeployarchivePost, must be smaller than or equal to 2147483647.');
        }
        if ($context !== null && !preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling DeploymentServiceApi.environmentDeploymentRestDeployarchivePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling DeploymentServiceApi.environmentDeploymentRestDeployarchivePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling DeploymentServiceApi.environmentDeploymentRestDeployarchivePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($hooks !== null && strlen($hooks) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$hooks" when calling DeploymentServiceApi.environmentDeploymentRestDeployarchivePost, must be smaller than or equal to 2147483647.');
        }
        if ($hooks !== null && !preg_match("/(.*){0,2147483647}/", $hooks)) {
            throw new \InvalidArgumentException("invalid value for \"hooks\" when calling DeploymentServiceApi.environmentDeploymentRestDeployarchivePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/deployment/rest/deployarchive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($fileName !== null) {
            $formParams['fileName'] = ObjectSerializer::toFormValue($fileName);
        }
        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($fileUrl !== null) {
            $formParams['fileUrl'] = ObjectSerializer::toFormValue($fileUrl);
        }
        // form params
        if ($zdt !== null) {
            $formParams['zdt'] = ObjectSerializer::toFormValue($zdt);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($hooks !== null) {
            $formParams['hooks'] = ObjectSerializer::toFormValue($hooks);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestDeployprojectPost
     *
     * @param  string $envName envName (required)
     * @param  string $project project (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentDeploymentRestDeployprojectPost($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestDeployprojectPost'][0])
    {
        list($response) = $this->environmentDeploymentRestDeployprojectPostWithHttpInfo($envName, $project, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestDeployprojectPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestDeployprojectPostWithHttpInfo($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestDeployprojectPost'][0])
    {
        $request = $this->environmentDeploymentRestDeployprojectPostRequest($envName, $project, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestDeployprojectPostAsync
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestDeployprojectPostAsync($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestDeployprojectPost'][0])
    {
        return $this->environmentDeploymentRestDeployprojectPostAsyncWithHttpInfo($envName, $project, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestDeployprojectPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestDeployprojectPostAsyncWithHttpInfo($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestDeployprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentDeploymentRestDeployprojectPostRequest($envName, $project, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestDeployprojectPost'
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestDeployprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestDeployprojectPostRequest($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestDeployprojectPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestDeployprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestDeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestDeployprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling environmentDeploymentRestDeployprojectPost'
            );
        }
        if (strlen($project) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$project" when calling DeploymentServiceApi.environmentDeploymentRestDeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $project)) {
            throw new \InvalidArgumentException("invalid value for \"project\" when calling DeploymentServiceApi.environmentDeploymentRestDeployprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentDeploymentRestDeployprojectPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestDeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestDeployprojectPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/deployment/rest/deployproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($project !== null) {
            $formParams['project'] = ObjectSerializer::toFormValue($project);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestEditbuildprojectPost
     *
     * @param  string $envName envName (required)
     * @param  string $project project (required)
     * @param  int $nodeId nodeId (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings settings (optional)
     * @param  string $repo repo (optional)
     * @param  string $name name (optional)
     * @param  string $hooks hooks (optional)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestAddbuildprojectPostRequestDeployment $deployment deployment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditbuildprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentDeploymentRestEditbuildprojectPost($envName, $project, $nodeId, $settings = null, $repo = null, $name = null, $hooks = null, $deployment = null, string $contentType = self::contentTypes['environmentDeploymentRestEditbuildprojectPost'][0])
    {
        list($response) = $this->environmentDeploymentRestEditbuildprojectPostWithHttpInfo($envName, $project, $nodeId, $settings, $repo, $name, $hooks, $deployment, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestEditbuildprojectPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  string $repo (optional)
     * @param  string $name (optional)
     * @param  string $hooks (optional)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestAddbuildprojectPostRequestDeployment $deployment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditbuildprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestEditbuildprojectPostWithHttpInfo($envName, $project, $nodeId, $settings = null, $repo = null, $name = null, $hooks = null, $deployment = null, string $contentType = self::contentTypes['environmentDeploymentRestEditbuildprojectPost'][0])
    {
        $request = $this->environmentDeploymentRestEditbuildprojectPostRequest($envName, $project, $nodeId, $settings, $repo, $name, $hooks, $deployment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestEditbuildprojectPostAsync
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  string $repo (optional)
     * @param  string $name (optional)
     * @param  string $hooks (optional)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestAddbuildprojectPostRequestDeployment $deployment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditbuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestEditbuildprojectPostAsync($envName, $project, $nodeId, $settings = null, $repo = null, $name = null, $hooks = null, $deployment = null, string $contentType = self::contentTypes['environmentDeploymentRestEditbuildprojectPost'][0])
    {
        return $this->environmentDeploymentRestEditbuildprojectPostAsyncWithHttpInfo($envName, $project, $nodeId, $settings, $repo, $name, $hooks, $deployment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestEditbuildprojectPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  string $repo (optional)
     * @param  string $name (optional)
     * @param  string $hooks (optional)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestAddbuildprojectPostRequestDeployment $deployment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditbuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestEditbuildprojectPostAsyncWithHttpInfo($envName, $project, $nodeId, $settings = null, $repo = null, $name = null, $hooks = null, $deployment = null, string $contentType = self::contentTypes['environmentDeploymentRestEditbuildprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentDeploymentRestEditbuildprojectPostRequest($envName, $project, $nodeId, $settings, $repo, $name, $hooks, $deployment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestEditbuildprojectPost'
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  string $repo (optional)
     * @param  string $name (optional)
     * @param  string $hooks (optional)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestAddbuildprojectPostRequestDeployment $deployment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditbuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestEditbuildprojectPostRequest($envName, $project, $nodeId, $settings = null, $repo = null, $name = null, $hooks = null, $deployment = null, string $contentType = self::contentTypes['environmentDeploymentRestEditbuildprojectPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestEditbuildprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestEditbuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestEditbuildprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling environmentDeploymentRestEditbuildprojectPost'
            );
        }
        if (strlen($project) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$project" when calling DeploymentServiceApi.environmentDeploymentRestEditbuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $project)) {
            throw new \InvalidArgumentException("invalid value for \"project\" when calling DeploymentServiceApi.environmentDeploymentRestEditbuildprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentDeploymentRestEditbuildprojectPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestEditbuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestEditbuildprojectPost, must be bigger than or equal to -2147483648.');
        }
        

        if ($repo !== null && strlen($repo) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$repo" when calling DeploymentServiceApi.environmentDeploymentRestEditbuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($repo !== null && !preg_match("/(.*){0,2147483647}/", $repo)) {
            throw new \InvalidArgumentException("invalid value for \"repo\" when calling DeploymentServiceApi.environmentDeploymentRestEditbuildprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($name !== null && strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling DeploymentServiceApi.environmentDeploymentRestEditbuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($name !== null && !preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling DeploymentServiceApi.environmentDeploymentRestEditbuildprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($hooks !== null && strlen($hooks) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$hooks" when calling DeploymentServiceApi.environmentDeploymentRestEditbuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($hooks !== null && !preg_match("/(.*){0,2147483647}/", $hooks)) {
            throw new \InvalidArgumentException("invalid value for \"hooks\" when calling DeploymentServiceApi.environmentDeploymentRestEditbuildprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        


        $resourcePath = '/environment/deployment/rest/editbuildproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($settings !== null) {
            $formParams['settings'] = ObjectSerializer::toFormValue($settings);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($repo !== null) {
            $formParams['repo'] = ObjectSerializer::toFormValue($repo);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($project !== null) {
            $formParams['project'] = ObjectSerializer::toFormValue($project);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($hooks !== null) {
            $formParams['hooks'] = ObjectSerializer::toFormValue($hooks);
        }
        // form params
        if ($deployment !== null) {
            $formParams['deployment'] = ObjectSerializer::toFormValue($deployment);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestEditprojectPost
     *
     * @param  string $envName envName (required)
     * @param  string $context context (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings settings (optional)
     * @param  int $delay delay (optional)
     * @param  string $newContext newContext (optional)
     * @param  string $repo repo (optional)
     * @param  string $hooks hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse
     */
    public function environmentDeploymentRestEditprojectPost($envName, $context, $nodeGroup, $settings = null, $delay = null, $newContext = null, $repo = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestEditprojectPost'][0])
    {
        list($response) = $this->environmentDeploymentRestEditprojectPostWithHttpInfo($envName, $context, $nodeGroup, $settings, $delay, $newContext, $repo, $hooks, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestEditprojectPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  int $delay (optional)
     * @param  string $newContext (optional)
     * @param  string $repo (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestEditprojectPostWithHttpInfo($envName, $context, $nodeGroup, $settings = null, $delay = null, $newContext = null, $repo = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestEditprojectPost'][0])
    {
        $request = $this->environmentDeploymentRestEditprojectPostRequest($envName, $context, $nodeGroup, $settings, $delay, $newContext, $repo, $hooks, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestEditprojectPostAsync
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  int $delay (optional)
     * @param  string $newContext (optional)
     * @param  string $repo (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestEditprojectPostAsync($envName, $context, $nodeGroup, $settings = null, $delay = null, $newContext = null, $repo = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestEditprojectPost'][0])
    {
        return $this->environmentDeploymentRestEditprojectPostAsyncWithHttpInfo($envName, $context, $nodeGroup, $settings, $delay, $newContext, $repo, $hooks, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestEditprojectPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  int $delay (optional)
     * @param  string $newContext (optional)
     * @param  string $repo (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestEditprojectPostAsyncWithHttpInfo($envName, $context, $nodeGroup, $settings = null, $delay = null, $newContext = null, $repo = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestEditprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse';
        $request = $this->environmentDeploymentRestEditprojectPostRequest($envName, $context, $nodeGroup, $settings, $delay, $newContext, $repo, $hooks, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestEditprojectPost'
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (required)
     * @param  \OpenAPI\Client\Model\EnvironmentDeploymentRestEditprojectPostRequestSettings $settings (optional)
     * @param  int $delay (optional)
     * @param  string $newContext (optional)
     * @param  string $repo (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestEditprojectPostRequest($envName, $context, $nodeGroup, $settings = null, $delay = null, $newContext = null, $repo = null, $hooks = null, string $contentType = self::contentTypes['environmentDeploymentRestEditprojectPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestEditprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling environmentDeploymentRestEditprojectPost'
            );
        }
        if (strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling DeploymentServiceApi.environmentDeploymentRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling DeploymentServiceApi.environmentDeploymentRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentDeploymentRestEditprojectPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling DeploymentServiceApi.environmentDeploymentRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling DeploymentServiceApi.environmentDeploymentRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling DeploymentServiceApi.environmentDeploymentRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling DeploymentServiceApi.environmentDeploymentRestEditprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($newContext !== null && strlen($newContext) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$newContext" when calling DeploymentServiceApi.environmentDeploymentRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($newContext !== null && !preg_match("/(.*){0,2147483647}/", $newContext)) {
            throw new \InvalidArgumentException("invalid value for \"newContext\" when calling DeploymentServiceApi.environmentDeploymentRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($repo !== null && strlen($repo) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$repo" when calling DeploymentServiceApi.environmentDeploymentRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($repo !== null && !preg_match("/(.*){0,2147483647}/", $repo)) {
            throw new \InvalidArgumentException("invalid value for \"repo\" when calling DeploymentServiceApi.environmentDeploymentRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($hooks !== null && strlen($hooks) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$hooks" when calling DeploymentServiceApi.environmentDeploymentRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($hooks !== null && !preg_match("/(.*){0,2147483647}/", $hooks)) {
            throw new \InvalidArgumentException("invalid value for \"hooks\" when calling DeploymentServiceApi.environmentDeploymentRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/deployment/rest/editproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($settings !== null) {
            $formParams['settings'] = ObjectSerializer::toFormValue($settings);
        }
        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($newContext !== null) {
            $formParams['newContext'] = ObjectSerializer::toFormValue($newContext);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($repo !== null) {
            $formParams['repo'] = ObjectSerializer::toFormValue($repo);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($hooks !== null) {
            $formParams['hooks'] = ObjectSerializer::toFormValue($hooks);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestEditrepoPost
     *
     * @param  int $id id (required)
     * @param  string $password password (optional)
     * @param  string $name name (optional)
     * @param  int $keyId keyId (optional)
     * @param  string $description description (optional)
     * @param  string $type type (optional)
     * @param  string $login login (optional)
     * @param  string $branch branch (optional)
     * @param  string $url url (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditrepoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentDeploymentRestEditrepoPost($id, $password = null, $name = null, $keyId = null, $description = null, $type = null, $login = null, $branch = null, $url = null, string $contentType = self::contentTypes['environmentDeploymentRestEditrepoPost'][0])
    {
        list($response) = $this->environmentDeploymentRestEditrepoPostWithHttpInfo($id, $password, $name, $keyId, $description, $type, $login, $branch, $url, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestEditrepoPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $password (optional)
     * @param  string $name (optional)
     * @param  int $keyId (optional)
     * @param  string $description (optional)
     * @param  string $type (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $url (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditrepoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestEditrepoPostWithHttpInfo($id, $password = null, $name = null, $keyId = null, $description = null, $type = null, $login = null, $branch = null, $url = null, string $contentType = self::contentTypes['environmentDeploymentRestEditrepoPost'][0])
    {
        $request = $this->environmentDeploymentRestEditrepoPostRequest($id, $password, $name, $keyId, $description, $type, $login, $branch, $url, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestEditrepoPostAsync
     *
     * @param  int $id (required)
     * @param  string $password (optional)
     * @param  string $name (optional)
     * @param  int $keyId (optional)
     * @param  string $description (optional)
     * @param  string $type (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $url (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditrepoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestEditrepoPostAsync($id, $password = null, $name = null, $keyId = null, $description = null, $type = null, $login = null, $branch = null, $url = null, string $contentType = self::contentTypes['environmentDeploymentRestEditrepoPost'][0])
    {
        return $this->environmentDeploymentRestEditrepoPostAsyncWithHttpInfo($id, $password, $name, $keyId, $description, $type, $login, $branch, $url, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestEditrepoPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $password (optional)
     * @param  string $name (optional)
     * @param  int $keyId (optional)
     * @param  string $description (optional)
     * @param  string $type (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $url (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditrepoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestEditrepoPostAsyncWithHttpInfo($id, $password = null, $name = null, $keyId = null, $description = null, $type = null, $login = null, $branch = null, $url = null, string $contentType = self::contentTypes['environmentDeploymentRestEditrepoPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentDeploymentRestEditrepoPostRequest($id, $password, $name, $keyId, $description, $type, $login, $branch, $url, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestEditrepoPost'
     *
     * @param  int $id (required)
     * @param  string $password (optional)
     * @param  string $name (optional)
     * @param  int $keyId (optional)
     * @param  string $description (optional)
     * @param  string $type (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $url (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestEditrepoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestEditrepoPostRequest($id, $password = null, $name = null, $keyId = null, $description = null, $type = null, $login = null, $branch = null, $url = null, string $contentType = self::contentTypes['environmentDeploymentRestEditrepoPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling environmentDeploymentRestEditrepoPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($name !== null && strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($name !== null && !preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($keyId !== null && $keyId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$keyId" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($keyId !== null && $keyId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$keyId" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($description !== null && strlen($description) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$description" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($description !== null && !preg_match("/(.*){0,2147483647}/", $description)) {
            throw new \InvalidArgumentException("invalid value for \"description\" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($type !== null && strlen($type) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$type" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($type !== null && !preg_match("/(.*){0,2147483647}/", $type)) {
            throw new \InvalidArgumentException("invalid value for \"type\" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($login !== null && strlen($login) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$login" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($login !== null && !preg_match("/(.*){0,2147483647}/", $login)) {
            throw new \InvalidArgumentException("invalid value for \"login\" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($branch !== null && strlen($branch) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$branch" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($branch !== null && !preg_match("/(.*){0,2147483647}/", $branch)) {
            throw new \InvalidArgumentException("invalid value for \"branch\" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($url !== null && strlen($url) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$url" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($url !== null && !preg_match("/(.*){0,2147483647}/", $url)) {
            throw new \InvalidArgumentException("invalid value for \"url\" when calling DeploymentServiceApi.environmentDeploymentRestEditrepoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/deployment/rest/editrepo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($keyId !== null) {
            $formParams['keyId'] = ObjectSerializer::toFormValue($keyId);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($login !== null) {
            $formParams['login'] = ObjectSerializer::toFormValue($login);
        }
        // form params
        if ($branch !== null) {
            $formParams['branch'] = ObjectSerializer::toFormValue($branch);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestGetbuildprojectinfoPost
     *
     * @param  string $envName envName (required)
     * @param  string $project project (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetbuildprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse
     */
    public function environmentDeploymentRestGetbuildprojectinfoPost($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestGetbuildprojectinfoPost'][0])
    {
        list($response) = $this->environmentDeploymentRestGetbuildprojectinfoPostWithHttpInfo($envName, $project, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestGetbuildprojectinfoPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetbuildprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestGetbuildprojectinfoPostWithHttpInfo($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestGetbuildprojectinfoPost'][0])
    {
        $request = $this->environmentDeploymentRestGetbuildprojectinfoPostRequest($envName, $project, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestGetbuildprojectinfoPostAsync
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetbuildprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestGetbuildprojectinfoPostAsync($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestGetbuildprojectinfoPost'][0])
    {
        return $this->environmentDeploymentRestGetbuildprojectinfoPostAsyncWithHttpInfo($envName, $project, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestGetbuildprojectinfoPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetbuildprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestGetbuildprojectinfoPostAsyncWithHttpInfo($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestGetbuildprojectinfoPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponse';
        $request = $this->environmentDeploymentRestGetbuildprojectinfoPostRequest($envName, $project, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestGetbuildprojectinfoPost'
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetbuildprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestGetbuildprojectinfoPostRequest($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestGetbuildprojectinfoPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestGetbuildprojectinfoPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestGetbuildprojectinfoPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestGetbuildprojectinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling environmentDeploymentRestGetbuildprojectinfoPost'
            );
        }
        if (strlen($project) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$project" when calling DeploymentServiceApi.environmentDeploymentRestGetbuildprojectinfoPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $project)) {
            throw new \InvalidArgumentException("invalid value for \"project\" when calling DeploymentServiceApi.environmentDeploymentRestGetbuildprojectinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentDeploymentRestGetbuildprojectinfoPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestGetbuildprojectinfoPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestGetbuildprojectinfoPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/deployment/rest/getbuildprojectinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($project !== null) {
            $formParams['project'] = ObjectSerializer::toFormValue($project);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestGetbuildprojectsPost
     *
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetbuildprojectsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponses
     */
    public function environmentDeploymentRestGetbuildprojectsPost($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestGetbuildprojectsPost'][0])
    {
        list($response) = $this->environmentDeploymentRestGetbuildprojectsPostWithHttpInfo($envName, $nodeGroup, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestGetbuildprojectsPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetbuildprojectsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestGetbuildprojectsPostWithHttpInfo($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestGetbuildprojectsPost'][0])
    {
        $request = $this->environmentDeploymentRestGetbuildprojectsPostRequest($envName, $nodeGroup, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestGetbuildprojectsPostAsync
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetbuildprojectsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestGetbuildprojectsPostAsync($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestGetbuildprojectsPost'][0])
    {
        return $this->environmentDeploymentRestGetbuildprojectsPostAsyncWithHttpInfo($envName, $nodeGroup, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestGetbuildprojectsPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetbuildprojectsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestGetbuildprojectsPostAsyncWithHttpInfo($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestGetbuildprojectsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentBuildProjectResponses';
        $request = $this->environmentDeploymentRestGetbuildprojectsPostRequest($envName, $nodeGroup, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestGetbuildprojectsPost'
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetbuildprojectsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestGetbuildprojectsPostRequest($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestGetbuildprojectsPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestGetbuildprojectsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestGetbuildprojectsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestGetbuildprojectsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling DeploymentServiceApi.environmentDeploymentRestGetbuildprojectsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling DeploymentServiceApi.environmentDeploymentRestGetbuildprojectsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestGetbuildprojectsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestGetbuildprojectsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/deployment/rest/getbuildprojects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestGetdeploymentsPost
     *
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetdeploymentsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentDeploymentRestGetdeploymentsPost($envName, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestGetdeploymentsPost'][0])
    {
        list($response) = $this->environmentDeploymentRestGetdeploymentsPostWithHttpInfo($envName, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestGetdeploymentsPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetdeploymentsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestGetdeploymentsPostWithHttpInfo($envName, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestGetdeploymentsPost'][0])
    {
        $request = $this->environmentDeploymentRestGetdeploymentsPostRequest($envName, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestGetdeploymentsPostAsync
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetdeploymentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestGetdeploymentsPostAsync($envName, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestGetdeploymentsPost'][0])
    {
        return $this->environmentDeploymentRestGetdeploymentsPostAsyncWithHttpInfo($envName, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestGetdeploymentsPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetdeploymentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestGetdeploymentsPostAsyncWithHttpInfo($envName, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestGetdeploymentsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentDeploymentRestGetdeploymentsPostRequest($envName, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestGetdeploymentsPost'
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetdeploymentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestGetdeploymentsPostRequest($envName, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestGetdeploymentsPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestGetdeploymentsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestGetdeploymentsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestGetdeploymentsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentDeploymentRestGetdeploymentsPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling DeploymentServiceApi.environmentDeploymentRestGetdeploymentsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling DeploymentServiceApi.environmentDeploymentRestGetdeploymentsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/deployment/rest/getdeployments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestGethooksPost
     *
     * @param  string $envName envName (required)
     * @param  string $context context (optional)
     * @param  string $project project (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGethooksPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentDeploymentRestGethooksPost($envName, $context = null, $project = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestGethooksPost'][0])
    {
        list($response) = $this->environmentDeploymentRestGethooksPostWithHttpInfo($envName, $context, $project, $nodeGroup, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestGethooksPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (optional)
     * @param  string $project (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGethooksPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestGethooksPostWithHttpInfo($envName, $context = null, $project = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestGethooksPost'][0])
    {
        $request = $this->environmentDeploymentRestGethooksPostRequest($envName, $context, $project, $nodeGroup, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestGethooksPostAsync
     *
     * @param  string $envName (required)
     * @param  string $context (optional)
     * @param  string $project (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGethooksPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestGethooksPostAsync($envName, $context = null, $project = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestGethooksPost'][0])
    {
        return $this->environmentDeploymentRestGethooksPostAsyncWithHttpInfo($envName, $context, $project, $nodeGroup, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestGethooksPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (optional)
     * @param  string $project (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGethooksPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestGethooksPostAsyncWithHttpInfo($envName, $context = null, $project = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestGethooksPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentDeploymentRestGethooksPostRequest($envName, $context, $project, $nodeGroup, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestGethooksPost'
     *
     * @param  string $envName (required)
     * @param  string $context (optional)
     * @param  string $project (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGethooksPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestGethooksPostRequest($envName, $context = null, $project = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestGethooksPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestGethooksPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestGethooksPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestGethooksPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($context !== null && strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling DeploymentServiceApi.environmentDeploymentRestGethooksPost, must be smaller than or equal to 2147483647.');
        }
        if ($context !== null && !preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling DeploymentServiceApi.environmentDeploymentRestGethooksPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($project !== null && strlen($project) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$project" when calling DeploymentServiceApi.environmentDeploymentRestGethooksPost, must be smaller than or equal to 2147483647.');
        }
        if ($project !== null && !preg_match("/(.*){0,2147483647}/", $project)) {
            throw new \InvalidArgumentException("invalid value for \"project\" when calling DeploymentServiceApi.environmentDeploymentRestGethooksPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling DeploymentServiceApi.environmentDeploymentRestGethooksPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling DeploymentServiceApi.environmentDeploymentRestGethooksPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestGethooksPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestGethooksPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/deployment/rest/gethooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($project !== null) {
            $formParams['project'] = ObjectSerializer::toFormValue($project);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestGetprojectinfoPost
     *
     * @param  string $envName envName (required)
     * @param  string $context context (required)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse
     */
    public function environmentDeploymentRestGetprojectinfoPost($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentDeploymentRestGetprojectinfoPost'][0])
    {
        list($response) = $this->environmentDeploymentRestGetprojectinfoPostWithHttpInfo($envName, $context, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestGetprojectinfoPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestGetprojectinfoPostWithHttpInfo($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentDeploymentRestGetprojectinfoPost'][0])
    {
        $request = $this->environmentDeploymentRestGetprojectinfoPostRequest($envName, $context, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestGetprojectinfoPostAsync
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestGetprojectinfoPostAsync($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentDeploymentRestGetprojectinfoPost'][0])
    {
        return $this->environmentDeploymentRestGetprojectinfoPostAsyncWithHttpInfo($envName, $context, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestGetprojectinfoPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestGetprojectinfoPostAsyncWithHttpInfo($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentDeploymentRestGetprojectinfoPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseDeploymentVcsProjectResponse';
        $request = $this->environmentDeploymentRestGetprojectinfoPostRequest($envName, $context, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestGetprojectinfoPost'
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestGetprojectinfoPostRequest($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentDeploymentRestGetprojectinfoPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestGetprojectinfoPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestGetprojectinfoPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestGetprojectinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling environmentDeploymentRestGetprojectinfoPost'
            );
        }
        if (strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling DeploymentServiceApi.environmentDeploymentRestGetprojectinfoPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling DeploymentServiceApi.environmentDeploymentRestGetprojectinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling DeploymentServiceApi.environmentDeploymentRestGetprojectinfoPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling DeploymentServiceApi.environmentDeploymentRestGetprojectinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/deployment/rest/getprojectinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestGetreposPost
     *
     * @param  int $id id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetreposPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentDeploymentRestGetreposPost($id = null, string $contentType = self::contentTypes['environmentDeploymentRestGetreposPost'][0])
    {
        list($response) = $this->environmentDeploymentRestGetreposPostWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestGetreposPostWithHttpInfo
     *
     * @param  int $id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetreposPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestGetreposPostWithHttpInfo($id = null, string $contentType = self::contentTypes['environmentDeploymentRestGetreposPost'][0])
    {
        $request = $this->environmentDeploymentRestGetreposPostRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestGetreposPostAsync
     *
     * @param  int $id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetreposPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestGetreposPostAsync($id = null, string $contentType = self::contentTypes['environmentDeploymentRestGetreposPost'][0])
    {
        return $this->environmentDeploymentRestGetreposPostAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestGetreposPostAsyncWithHttpInfo
     *
     * @param  int $id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetreposPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestGetreposPostAsyncWithHttpInfo($id = null, string $contentType = self::contentTypes['environmentDeploymentRestGetreposPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentDeploymentRestGetreposPostRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestGetreposPost'
     *
     * @param  int $id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestGetreposPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestGetreposPostRequest($id = null, string $contentType = self::contentTypes['environmentDeploymentRestGetreposPost'][0])
    {

        if ($id !== null && $id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling DeploymentServiceApi.environmentDeploymentRestGetreposPost, must be smaller than or equal to 2147483647.');
        }
        if ($id !== null && $id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling DeploymentServiceApi.environmentDeploymentRestGetreposPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/deployment/rest/getrepos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestRemovebuildprojectPost
     *
     * @param  string $envName envName (required)
     * @param  string $project project (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRemovebuildprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentDeploymentRestRemovebuildprojectPost($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestRemovebuildprojectPost'][0])
    {
        list($response) = $this->environmentDeploymentRestRemovebuildprojectPostWithHttpInfo($envName, $project, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestRemovebuildprojectPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRemovebuildprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestRemovebuildprojectPostWithHttpInfo($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestRemovebuildprojectPost'][0])
    {
        $request = $this->environmentDeploymentRestRemovebuildprojectPostRequest($envName, $project, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestRemovebuildprojectPostAsync
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRemovebuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestRemovebuildprojectPostAsync($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestRemovebuildprojectPost'][0])
    {
        return $this->environmentDeploymentRestRemovebuildprojectPostAsyncWithHttpInfo($envName, $project, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestRemovebuildprojectPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRemovebuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestRemovebuildprojectPostAsyncWithHttpInfo($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestRemovebuildprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentDeploymentRestRemovebuildprojectPostRequest($envName, $project, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestRemovebuildprojectPost'
     *
     * @param  string $envName (required)
     * @param  string $project (required)
     * @param  int $nodeId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRemovebuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestRemovebuildprojectPostRequest($envName, $project, $nodeId, string $contentType = self::contentTypes['environmentDeploymentRestRemovebuildprojectPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestRemovebuildprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestRemovebuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestRemovebuildprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'project' is set
        if ($project === null || (is_array($project) && count($project) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project when calling environmentDeploymentRestRemovebuildprojectPost'
            );
        }
        if (strlen($project) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$project" when calling DeploymentServiceApi.environmentDeploymentRestRemovebuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $project)) {
            throw new \InvalidArgumentException("invalid value for \"project\" when calling DeploymentServiceApi.environmentDeploymentRestRemovebuildprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentDeploymentRestRemovebuildprojectPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestRemovebuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestRemovebuildprojectPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/deployment/rest/removebuildproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($project !== null) {
            $formParams['project'] = ObjectSerializer::toFormValue($project);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestRemoverepoPost
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRemoverepoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentDeploymentRestRemoverepoPost($id, string $contentType = self::contentTypes['environmentDeploymentRestRemoverepoPost'][0])
    {
        list($response) = $this->environmentDeploymentRestRemoverepoPostWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestRemoverepoPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRemoverepoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestRemoverepoPostWithHttpInfo($id, string $contentType = self::contentTypes['environmentDeploymentRestRemoverepoPost'][0])
    {
        $request = $this->environmentDeploymentRestRemoverepoPostRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestRemoverepoPostAsync
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRemoverepoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestRemoverepoPostAsync($id, string $contentType = self::contentTypes['environmentDeploymentRestRemoverepoPost'][0])
    {
        return $this->environmentDeploymentRestRemoverepoPostAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestRemoverepoPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRemoverepoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestRemoverepoPostAsyncWithHttpInfo($id, string $contentType = self::contentTypes['environmentDeploymentRestRemoverepoPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentDeploymentRestRemoverepoPostRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestRemoverepoPost'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRemoverepoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestRemoverepoPostRequest($id, string $contentType = self::contentTypes['environmentDeploymentRestRemoverepoPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling environmentDeploymentRestRemoverepoPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling DeploymentServiceApi.environmentDeploymentRestRemoverepoPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling DeploymentServiceApi.environmentDeploymentRestRemoverepoPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/deployment/rest/removerepo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestRenamecontextPost
     *
     * @param  string $oldContext oldContext (required)
     * @param  string $newContext newContext (required)
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRenamecontextPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentDeploymentRestRenamecontextPost($oldContext, $newContext, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestRenamecontextPost'][0])
    {
        list($response) = $this->environmentDeploymentRestRenamecontextPostWithHttpInfo($oldContext, $newContext, $envName, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestRenamecontextPostWithHttpInfo
     *
     * @param  string $oldContext (required)
     * @param  string $newContext (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRenamecontextPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestRenamecontextPostWithHttpInfo($oldContext, $newContext, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestRenamecontextPost'][0])
    {
        $request = $this->environmentDeploymentRestRenamecontextPostRequest($oldContext, $newContext, $envName, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestRenamecontextPostAsync
     *
     * @param  string $oldContext (required)
     * @param  string $newContext (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRenamecontextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestRenamecontextPostAsync($oldContext, $newContext, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestRenamecontextPost'][0])
    {
        return $this->environmentDeploymentRestRenamecontextPostAsyncWithHttpInfo($oldContext, $newContext, $envName, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestRenamecontextPostAsyncWithHttpInfo
     *
     * @param  string $oldContext (required)
     * @param  string $newContext (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRenamecontextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestRenamecontextPostAsyncWithHttpInfo($oldContext, $newContext, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestRenamecontextPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentDeploymentRestRenamecontextPostRequest($oldContext, $newContext, $envName, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestRenamecontextPost'
     *
     * @param  string $oldContext (required)
     * @param  string $newContext (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestRenamecontextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestRenamecontextPostRequest($oldContext, $newContext, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestRenamecontextPost'][0])
    {

        // verify the required parameter 'oldContext' is set
        if ($oldContext === null || (is_array($oldContext) && count($oldContext) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oldContext when calling environmentDeploymentRestRenamecontextPost'
            );
        }
        if (strlen($oldContext) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$oldContext" when calling DeploymentServiceApi.environmentDeploymentRestRenamecontextPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $oldContext)) {
            throw new \InvalidArgumentException("invalid value for \"oldContext\" when calling DeploymentServiceApi.environmentDeploymentRestRenamecontextPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'newContext' is set
        if ($newContext === null || (is_array($newContext) && count($newContext) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newContext when calling environmentDeploymentRestRenamecontextPost'
            );
        }
        if (strlen($newContext) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$newContext" when calling DeploymentServiceApi.environmentDeploymentRestRenamecontextPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $newContext)) {
            throw new \InvalidArgumentException("invalid value for \"newContext\" when calling DeploymentServiceApi.environmentDeploymentRestRenamecontextPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestRenamecontextPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestRenamecontextPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestRenamecontextPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentDeploymentRestRenamecontextPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling DeploymentServiceApi.environmentDeploymentRestRenamecontextPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling DeploymentServiceApi.environmentDeploymentRestRenamecontextPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/deployment/rest/renamecontext';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($oldContext !== null) {
            $formParams['oldContext'] = ObjectSerializer::toFormValue($oldContext);
        }
        // form params
        if ($newContext !== null) {
            $formParams['newContext'] = ObjectSerializer::toFormValue($newContext);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestUndeployPost
     *
     * @param  string $envName envName (required)
     * @param  string $context context (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestUndeployPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentDeploymentRestUndeployPost($envName, $context, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestUndeployPost'][0])
    {
        list($response) = $this->environmentDeploymentRestUndeployPostWithHttpInfo($envName, $context, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestUndeployPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestUndeployPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestUndeployPostWithHttpInfo($envName, $context, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestUndeployPost'][0])
    {
        $request = $this->environmentDeploymentRestUndeployPostRequest($envName, $context, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestUndeployPostAsync
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestUndeployPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestUndeployPostAsync($envName, $context, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestUndeployPost'][0])
    {
        return $this->environmentDeploymentRestUndeployPostAsyncWithHttpInfo($envName, $context, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestUndeployPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestUndeployPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestUndeployPostAsyncWithHttpInfo($envName, $context, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestUndeployPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentDeploymentRestUndeployPostRequest($envName, $context, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestUndeployPost'
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestUndeployPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestUndeployPostRequest($envName, $context, $nodeGroup, string $contentType = self::contentTypes['environmentDeploymentRestUndeployPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestUndeployPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestUndeployPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestUndeployPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling environmentDeploymentRestUndeployPost'
            );
        }
        if (strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling DeploymentServiceApi.environmentDeploymentRestUndeployPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling DeploymentServiceApi.environmentDeploymentRestUndeployPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentDeploymentRestUndeployPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling DeploymentServiceApi.environmentDeploymentRestUndeployPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling DeploymentServiceApi.environmentDeploymentRestUndeployPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/deployment/rest/undeploy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentDeploymentRestUpdatePost
     *
     * @param  string $envName envName (required)
     * @param  int $delay delay (optional)
     * @param  string $context context (optional)
     * @param  string $project project (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse
     */
    public function environmentDeploymentRestUpdatePost($envName, $delay = null, $context = null, $project = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestUpdatePost'][0])
    {
        list($response) = $this->environmentDeploymentRestUpdatePostWithHttpInfo($envName, $delay, $context, $project, $nodeGroup, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentDeploymentRestUpdatePostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $project (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentDeploymentRestUpdatePostWithHttpInfo($envName, $delay = null, $context = null, $project = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestUpdatePost'][0])
    {
        $request = $this->environmentDeploymentRestUpdatePostRequest($envName, $delay, $context, $project, $nodeGroup, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentDeploymentRestUpdatePostAsync
     *
     * @param  string $envName (required)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $project (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestUpdatePostAsync($envName, $delay = null, $context = null, $project = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestUpdatePost'][0])
    {
        return $this->environmentDeploymentRestUpdatePostAsyncWithHttpInfo($envName, $delay, $context, $project, $nodeGroup, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentDeploymentRestUpdatePostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $project (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentDeploymentRestUpdatePostAsyncWithHttpInfo($envName, $delay = null, $context = null, $project = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestUpdatePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse';
        $request = $this->environmentDeploymentRestUpdatePostRequest($envName, $delay, $context, $project, $nodeGroup, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentDeploymentRestUpdatePost'
     *
     * @param  string $envName (required)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $project (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentDeploymentRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentDeploymentRestUpdatePostRequest($envName, $delay = null, $context = null, $project = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentDeploymentRestUpdatePost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentDeploymentRestUpdatePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling DeploymentServiceApi.environmentDeploymentRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling DeploymentServiceApi.environmentDeploymentRestUpdatePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling DeploymentServiceApi.environmentDeploymentRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling DeploymentServiceApi.environmentDeploymentRestUpdatePost, must be bigger than or equal to -2147483648.');
        }
        
        if ($context !== null && strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling DeploymentServiceApi.environmentDeploymentRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if ($context !== null && !preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling DeploymentServiceApi.environmentDeploymentRestUpdatePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($project !== null && strlen($project) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$project" when calling DeploymentServiceApi.environmentDeploymentRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if ($project !== null && !preg_match("/(.*){0,2147483647}/", $project)) {
            throw new \InvalidArgumentException("invalid value for \"project\" when calling DeploymentServiceApi.environmentDeploymentRestUpdatePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling DeploymentServiceApi.environmentDeploymentRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling DeploymentServiceApi.environmentDeploymentRestUpdatePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling DeploymentServiceApi.environmentDeploymentRestUpdatePost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/deployment/rest/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($project !== null) {
            $formParams['project'] = ObjectSerializer::toFormValue($project);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
