<?php
/**
 * VcsServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * VcsServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VcsServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'environmentVcsRestCreateprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentVcsRestDeleteprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentVcsRestEditprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentVcsRestGetprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentVcsRestUpdatePost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation environmentVcsRestCreateprojectPost
     *
     * @param  string $type type (required)
     * @param  string $url url (required)
     * @param  string $envName envName (required)
     * @param  string $context context (required)
     * @param  int $keyId keyId (optional)
     * @param  bool $zdt zdt (optional)
     * @param  string $login login (optional)
     * @param  string $branch branch (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  bool $autoupdate autoupdate (optional)
     * @param  string $password password (optional)
     * @param  int $delay delay (optional)
     * @param  bool $autoResolveConflict autoResolveConflict (optional)
     * @param  string $repoHash repoHash (optional)
     * @param  string $interval interval (optional)
     * @param  bool $updateNow updateNow (optional)
     * @param  string $hooks hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestCreateprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse
     */
    public function environmentVcsRestCreateprojectPost($type, $url, $envName, $context, $keyId = null, $zdt = null, $login = null, $branch = null, $nodeGroup = null, $autoupdate = null, $password = null, $delay = null, $autoResolveConflict = null, $repoHash = null, $interval = null, $updateNow = null, $hooks = null, string $contentType = self::contentTypes['environmentVcsRestCreateprojectPost'][0])
    {
        list($response) = $this->environmentVcsRestCreateprojectPostWithHttpInfo($type, $url, $envName, $context, $keyId, $zdt, $login, $branch, $nodeGroup, $autoupdate, $password, $delay, $autoResolveConflict, $repoHash, $interval, $updateNow, $hooks, $contentType);
        return $response;
    }

    /**
     * Operation environmentVcsRestCreateprojectPostWithHttpInfo
     *
     * @param  string $type (required)
     * @param  string $url (required)
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  int $keyId (optional)
     * @param  bool $zdt (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $nodeGroup (optional)
     * @param  bool $autoupdate (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  bool $autoResolveConflict (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  bool $updateNow (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestCreateprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentVcsRestCreateprojectPostWithHttpInfo($type, $url, $envName, $context, $keyId = null, $zdt = null, $login = null, $branch = null, $nodeGroup = null, $autoupdate = null, $password = null, $delay = null, $autoResolveConflict = null, $repoHash = null, $interval = null, $updateNow = null, $hooks = null, string $contentType = self::contentTypes['environmentVcsRestCreateprojectPost'][0])
    {
        $request = $this->environmentVcsRestCreateprojectPostRequest($type, $url, $envName, $context, $keyId, $zdt, $login, $branch, $nodeGroup, $autoupdate, $password, $delay, $autoResolveConflict, $repoHash, $interval, $updateNow, $hooks, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentVcsRestCreateprojectPostAsync
     *
     * @param  string $type (required)
     * @param  string $url (required)
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  int $keyId (optional)
     * @param  bool $zdt (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $nodeGroup (optional)
     * @param  bool $autoupdate (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  bool $autoResolveConflict (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  bool $updateNow (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestCreateprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentVcsRestCreateprojectPostAsync($type, $url, $envName, $context, $keyId = null, $zdt = null, $login = null, $branch = null, $nodeGroup = null, $autoupdate = null, $password = null, $delay = null, $autoResolveConflict = null, $repoHash = null, $interval = null, $updateNow = null, $hooks = null, string $contentType = self::contentTypes['environmentVcsRestCreateprojectPost'][0])
    {
        return $this->environmentVcsRestCreateprojectPostAsyncWithHttpInfo($type, $url, $envName, $context, $keyId, $zdt, $login, $branch, $nodeGroup, $autoupdate, $password, $delay, $autoResolveConflict, $repoHash, $interval, $updateNow, $hooks, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentVcsRestCreateprojectPostAsyncWithHttpInfo
     *
     * @param  string $type (required)
     * @param  string $url (required)
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  int $keyId (optional)
     * @param  bool $zdt (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $nodeGroup (optional)
     * @param  bool $autoupdate (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  bool $autoResolveConflict (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  bool $updateNow (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestCreateprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentVcsRestCreateprojectPostAsyncWithHttpInfo($type, $url, $envName, $context, $keyId = null, $zdt = null, $login = null, $branch = null, $nodeGroup = null, $autoupdate = null, $password = null, $delay = null, $autoResolveConflict = null, $repoHash = null, $interval = null, $updateNow = null, $hooks = null, string $contentType = self::contentTypes['environmentVcsRestCreateprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse';
        $request = $this->environmentVcsRestCreateprojectPostRequest($type, $url, $envName, $context, $keyId, $zdt, $login, $branch, $nodeGroup, $autoupdate, $password, $delay, $autoResolveConflict, $repoHash, $interval, $updateNow, $hooks, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentVcsRestCreateprojectPost'
     *
     * @param  string $type (required)
     * @param  string $url (required)
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  int $keyId (optional)
     * @param  bool $zdt (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $nodeGroup (optional)
     * @param  bool $autoupdate (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  bool $autoResolveConflict (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  bool $updateNow (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestCreateprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentVcsRestCreateprojectPostRequest($type, $url, $envName, $context, $keyId = null, $zdt = null, $login = null, $branch = null, $nodeGroup = null, $autoupdate = null, $password = null, $delay = null, $autoResolveConflict = null, $repoHash = null, $interval = null, $updateNow = null, $hooks = null, string $contentType = self::contentTypes['environmentVcsRestCreateprojectPost'][0])
    {

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling environmentVcsRestCreateprojectPost'
            );
        }
        if (strlen($type) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$type" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $type)) {
            throw new \InvalidArgumentException("invalid value for \"type\" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling environmentVcsRestCreateprojectPost'
            );
        }
        if (strlen($url) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$url" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $url)) {
            throw new \InvalidArgumentException("invalid value for \"url\" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentVcsRestCreateprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling environmentVcsRestCreateprojectPost'
            );
        }
        if (strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($keyId !== null && $keyId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$keyId" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($keyId !== null && $keyId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$keyId" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be bigger than or equal to -2147483648.');
        }
        

        if ($login !== null && strlen($login) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$login" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($login !== null && !preg_match("/(.*){0,2147483647}/", $login)) {
            throw new \InvalidArgumentException("invalid value for \"login\" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($branch !== null && strlen($branch) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$branch" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($branch !== null && !preg_match("/(.*){0,2147483647}/", $branch)) {
            throw new \InvalidArgumentException("invalid value for \"branch\" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be bigger than or equal to -2147483648.');
        }
        

        if ($repoHash !== null && strlen($repoHash) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$repoHash" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($repoHash !== null && !preg_match("/(.*){0,2147483647}/", $repoHash)) {
            throw new \InvalidArgumentException("invalid value for \"repoHash\" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($interval !== null && strlen($interval) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$interval" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($interval !== null && !preg_match("/(.*){0,2147483647}/", $interval)) {
            throw new \InvalidArgumentException("invalid value for \"interval\" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($hooks !== null && strlen($hooks) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$hooks" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($hooks !== null && !preg_match("/(.*){0,2147483647}/", $hooks)) {
            throw new \InvalidArgumentException("invalid value for \"hooks\" when calling VcsServiceApi.environmentVcsRestCreateprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/vcs/rest/createproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($keyId !== null) {
            $formParams['keyId'] = ObjectSerializer::toFormValue($keyId);
        }
        // form params
        if ($zdt !== null) {
            $formParams['zdt'] = ObjectSerializer::toFormValue($zdt);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($login !== null) {
            $formParams['login'] = ObjectSerializer::toFormValue($login);
        }
        // form params
        if ($branch !== null) {
            $formParams['branch'] = ObjectSerializer::toFormValue($branch);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // form params
        if ($autoupdate !== null) {
            $formParams['autoupdate'] = ObjectSerializer::toFormValue($autoupdate);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($autoResolveConflict !== null) {
            $formParams['autoResolveConflict'] = ObjectSerializer::toFormValue($autoResolveConflict);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($repoHash !== null) {
            $formParams['repoHash'] = ObjectSerializer::toFormValue($repoHash);
        }
        // form params
        if ($interval !== null) {
            $formParams['interval'] = ObjectSerializer::toFormValue($interval);
        }
        // form params
        if ($updateNow !== null) {
            $formParams['updateNow'] = ObjectSerializer::toFormValue($updateNow);
        }
        // form params
        if ($hooks !== null) {
            $formParams['hooks'] = ObjectSerializer::toFormValue($hooks);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentVcsRestDeleteprojectPost
     *
     * @param  string $envName envName (required)
     * @param  string $context context (required)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestDeleteprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse
     */
    public function environmentVcsRestDeleteprojectPost($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentVcsRestDeleteprojectPost'][0])
    {
        list($response) = $this->environmentVcsRestDeleteprojectPostWithHttpInfo($envName, $context, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentVcsRestDeleteprojectPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestDeleteprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentVcsRestDeleteprojectPostWithHttpInfo($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentVcsRestDeleteprojectPost'][0])
    {
        $request = $this->environmentVcsRestDeleteprojectPostRequest($envName, $context, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentVcsRestDeleteprojectPostAsync
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestDeleteprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentVcsRestDeleteprojectPostAsync($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentVcsRestDeleteprojectPost'][0])
    {
        return $this->environmentVcsRestDeleteprojectPostAsyncWithHttpInfo($envName, $context, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentVcsRestDeleteprojectPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestDeleteprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentVcsRestDeleteprojectPostAsyncWithHttpInfo($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentVcsRestDeleteprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse';
        $request = $this->environmentVcsRestDeleteprojectPostRequest($envName, $context, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentVcsRestDeleteprojectPost'
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestDeleteprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentVcsRestDeleteprojectPostRequest($envName, $context, $nodeGroup = null, string $contentType = self::contentTypes['environmentVcsRestDeleteprojectPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentVcsRestDeleteprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling VcsServiceApi.environmentVcsRestDeleteprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling VcsServiceApi.environmentVcsRestDeleteprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling environmentVcsRestDeleteprojectPost'
            );
        }
        if (strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling VcsServiceApi.environmentVcsRestDeleteprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling VcsServiceApi.environmentVcsRestDeleteprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling VcsServiceApi.environmentVcsRestDeleteprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling VcsServiceApi.environmentVcsRestDeleteprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/vcs/rest/deleteproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentVcsRestEditprojectPost
     *
     * @param  string $oldcontext oldcontext (required)
     * @param  bool $zdt zdt (required)
     * @param  string $type type (required)
     * @param  string $url url (required)
     * @param  bool $autoupdate autoupdate (required)
     * @param  bool $autoResolveConflict autoResolveConflict (required)
     * @param  string $envName envName (required)
     * @param  string $newcontext newcontext (required)
     * @param  int $keyId keyId (optional)
     * @param  string $login login (optional)
     * @param  string $branch branch (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $password password (optional)
     * @param  int $delay delay (optional)
     * @param  string $repoHash repoHash (optional)
     * @param  string $interval interval (optional)
     * @param  string $hooks hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse
     */
    public function environmentVcsRestEditprojectPost($oldcontext, $zdt, $type, $url, $autoupdate, $autoResolveConflict, $envName, $newcontext, $keyId = null, $login = null, $branch = null, $nodeGroup = null, $password = null, $delay = null, $repoHash = null, $interval = null, $hooks = null, string $contentType = self::contentTypes['environmentVcsRestEditprojectPost'][0])
    {
        list($response) = $this->environmentVcsRestEditprojectPostWithHttpInfo($oldcontext, $zdt, $type, $url, $autoupdate, $autoResolveConflict, $envName, $newcontext, $keyId, $login, $branch, $nodeGroup, $password, $delay, $repoHash, $interval, $hooks, $contentType);
        return $response;
    }

    /**
     * Operation environmentVcsRestEditprojectPostWithHttpInfo
     *
     * @param  string $oldcontext (required)
     * @param  bool $zdt (required)
     * @param  string $type (required)
     * @param  string $url (required)
     * @param  bool $autoupdate (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $newcontext (required)
     * @param  int $keyId (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentVcsRestEditprojectPostWithHttpInfo($oldcontext, $zdt, $type, $url, $autoupdate, $autoResolveConflict, $envName, $newcontext, $keyId = null, $login = null, $branch = null, $nodeGroup = null, $password = null, $delay = null, $repoHash = null, $interval = null, $hooks = null, string $contentType = self::contentTypes['environmentVcsRestEditprojectPost'][0])
    {
        $request = $this->environmentVcsRestEditprojectPostRequest($oldcontext, $zdt, $type, $url, $autoupdate, $autoResolveConflict, $envName, $newcontext, $keyId, $login, $branch, $nodeGroup, $password, $delay, $repoHash, $interval, $hooks, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentVcsRestEditprojectPostAsync
     *
     * @param  string $oldcontext (required)
     * @param  bool $zdt (required)
     * @param  string $type (required)
     * @param  string $url (required)
     * @param  bool $autoupdate (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $newcontext (required)
     * @param  int $keyId (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentVcsRestEditprojectPostAsync($oldcontext, $zdt, $type, $url, $autoupdate, $autoResolveConflict, $envName, $newcontext, $keyId = null, $login = null, $branch = null, $nodeGroup = null, $password = null, $delay = null, $repoHash = null, $interval = null, $hooks = null, string $contentType = self::contentTypes['environmentVcsRestEditprojectPost'][0])
    {
        return $this->environmentVcsRestEditprojectPostAsyncWithHttpInfo($oldcontext, $zdt, $type, $url, $autoupdate, $autoResolveConflict, $envName, $newcontext, $keyId, $login, $branch, $nodeGroup, $password, $delay, $repoHash, $interval, $hooks, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentVcsRestEditprojectPostAsyncWithHttpInfo
     *
     * @param  string $oldcontext (required)
     * @param  bool $zdt (required)
     * @param  string $type (required)
     * @param  string $url (required)
     * @param  bool $autoupdate (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $newcontext (required)
     * @param  int $keyId (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentVcsRestEditprojectPostAsyncWithHttpInfo($oldcontext, $zdt, $type, $url, $autoupdate, $autoResolveConflict, $envName, $newcontext, $keyId = null, $login = null, $branch = null, $nodeGroup = null, $password = null, $delay = null, $repoHash = null, $interval = null, $hooks = null, string $contentType = self::contentTypes['environmentVcsRestEditprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse';
        $request = $this->environmentVcsRestEditprojectPostRequest($oldcontext, $zdt, $type, $url, $autoupdate, $autoResolveConflict, $envName, $newcontext, $keyId, $login, $branch, $nodeGroup, $password, $delay, $repoHash, $interval, $hooks, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentVcsRestEditprojectPost'
     *
     * @param  string $oldcontext (required)
     * @param  bool $zdt (required)
     * @param  string $type (required)
     * @param  string $url (required)
     * @param  bool $autoupdate (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $newcontext (required)
     * @param  int $keyId (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentVcsRestEditprojectPostRequest($oldcontext, $zdt, $type, $url, $autoupdate, $autoResolveConflict, $envName, $newcontext, $keyId = null, $login = null, $branch = null, $nodeGroup = null, $password = null, $delay = null, $repoHash = null, $interval = null, $hooks = null, string $contentType = self::contentTypes['environmentVcsRestEditprojectPost'][0])
    {

        // verify the required parameter 'oldcontext' is set
        if ($oldcontext === null || (is_array($oldcontext) && count($oldcontext) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oldcontext when calling environmentVcsRestEditprojectPost'
            );
        }
        if (strlen($oldcontext) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$oldcontext" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $oldcontext)) {
            throw new \InvalidArgumentException("invalid value for \"oldcontext\" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'zdt' is set
        if ($zdt === null || (is_array($zdt) && count($zdt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zdt when calling environmentVcsRestEditprojectPost'
            );
        }

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling environmentVcsRestEditprojectPost'
            );
        }
        if (strlen($type) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$type" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $type)) {
            throw new \InvalidArgumentException("invalid value for \"type\" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling environmentVcsRestEditprojectPost'
            );
        }
        if (strlen($url) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$url" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $url)) {
            throw new \InvalidArgumentException("invalid value for \"url\" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'autoupdate' is set
        if ($autoupdate === null || (is_array($autoupdate) && count($autoupdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $autoupdate when calling environmentVcsRestEditprojectPost'
            );
        }

        // verify the required parameter 'autoResolveConflict' is set
        if ($autoResolveConflict === null || (is_array($autoResolveConflict) && count($autoResolveConflict) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $autoResolveConflict when calling environmentVcsRestEditprojectPost'
            );
        }

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentVcsRestEditprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'newcontext' is set
        if ($newcontext === null || (is_array($newcontext) && count($newcontext) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newcontext when calling environmentVcsRestEditprojectPost'
            );
        }
        if (strlen($newcontext) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$newcontext" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $newcontext)) {
            throw new \InvalidArgumentException("invalid value for \"newcontext\" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($keyId !== null && $keyId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$keyId" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($keyId !== null && $keyId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$keyId" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($login !== null && strlen($login) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$login" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($login !== null && !preg_match("/(.*){0,2147483647}/", $login)) {
            throw new \InvalidArgumentException("invalid value for \"login\" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($branch !== null && strlen($branch) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$branch" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($branch !== null && !preg_match("/(.*){0,2147483647}/", $branch)) {
            throw new \InvalidArgumentException("invalid value for \"branch\" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($repoHash !== null && strlen($repoHash) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$repoHash" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($repoHash !== null && !preg_match("/(.*){0,2147483647}/", $repoHash)) {
            throw new \InvalidArgumentException("invalid value for \"repoHash\" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($interval !== null && strlen($interval) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$interval" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($interval !== null && !preg_match("/(.*){0,2147483647}/", $interval)) {
            throw new \InvalidArgumentException("invalid value for \"interval\" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($hooks !== null && strlen($hooks) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$hooks" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($hooks !== null && !preg_match("/(.*){0,2147483647}/", $hooks)) {
            throw new \InvalidArgumentException("invalid value for \"hooks\" when calling VcsServiceApi.environmentVcsRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/vcs/rest/editproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($keyId !== null) {
            $formParams['keyId'] = ObjectSerializer::toFormValue($keyId);
        }
        // form params
        if ($oldcontext !== null) {
            $formParams['oldcontext'] = ObjectSerializer::toFormValue($oldcontext);
        }
        // form params
        if ($zdt !== null) {
            $formParams['zdt'] = ObjectSerializer::toFormValue($zdt);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($login !== null) {
            $formParams['login'] = ObjectSerializer::toFormValue($login);
        }
        // form params
        if ($branch !== null) {
            $formParams['branch'] = ObjectSerializer::toFormValue($branch);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // form params
        if ($autoupdate !== null) {
            $formParams['autoupdate'] = ObjectSerializer::toFormValue($autoupdate);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($autoResolveConflict !== null) {
            $formParams['autoResolveConflict'] = ObjectSerializer::toFormValue($autoResolveConflict);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($repoHash !== null) {
            $formParams['repoHash'] = ObjectSerializer::toFormValue($repoHash);
        }
        // form params
        if ($interval !== null) {
            $formParams['interval'] = ObjectSerializer::toFormValue($interval);
        }
        // form params
        if ($hooks !== null) {
            $formParams['hooks'] = ObjectSerializer::toFormValue($hooks);
        }
        // form params
        if ($newcontext !== null) {
            $formParams['newcontext'] = ObjectSerializer::toFormValue($newcontext);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentVcsRestGetprojectPost
     *
     * @param  string $envName envName (required)
     * @param  string $context context (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestGetprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse
     */
    public function environmentVcsRestGetprojectPost($envName, $context = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentVcsRestGetprojectPost'][0])
    {
        list($response) = $this->environmentVcsRestGetprojectPostWithHttpInfo($envName, $context, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentVcsRestGetprojectPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestGetprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentVcsRestGetprojectPostWithHttpInfo($envName, $context = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentVcsRestGetprojectPost'][0])
    {
        $request = $this->environmentVcsRestGetprojectPostRequest($envName, $context, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentVcsRestGetprojectPostAsync
     *
     * @param  string $envName (required)
     * @param  string $context (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestGetprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentVcsRestGetprojectPostAsync($envName, $context = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentVcsRestGetprojectPost'][0])
    {
        return $this->environmentVcsRestGetprojectPostAsyncWithHttpInfo($envName, $context, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentVcsRestGetprojectPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestGetprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentVcsRestGetprojectPostAsyncWithHttpInfo($envName, $context = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentVcsRestGetprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsResponse';
        $request = $this->environmentVcsRestGetprojectPostRequest($envName, $context, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentVcsRestGetprojectPost'
     *
     * @param  string $envName (required)
     * @param  string $context (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestGetprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentVcsRestGetprojectPostRequest($envName, $context = null, $nodeGroup = null, string $contentType = self::contentTypes['environmentVcsRestGetprojectPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentVcsRestGetprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling VcsServiceApi.environmentVcsRestGetprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling VcsServiceApi.environmentVcsRestGetprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($context !== null && strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling VcsServiceApi.environmentVcsRestGetprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($context !== null && !preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling VcsServiceApi.environmentVcsRestGetprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling VcsServiceApi.environmentVcsRestGetprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling VcsServiceApi.environmentVcsRestGetprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/vcs/rest/getproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentVcsRestUpdatePost
     *
     * @param  string $envName envName (required)
     * @param  string $context context (required)
     * @param  int $delay delay (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse
     */
    public function environmentVcsRestUpdatePost($envName, $context, $delay = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentVcsRestUpdatePost'][0])
    {
        list($response) = $this->environmentVcsRestUpdatePostWithHttpInfo($envName, $context, $delay, $nodeGroup, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentVcsRestUpdatePostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  int $delay (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentVcsRestUpdatePostWithHttpInfo($envName, $context, $delay = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentVcsRestUpdatePost'][0])
    {
        $request = $this->environmentVcsRestUpdatePostRequest($envName, $context, $delay, $nodeGroup, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentVcsRestUpdatePostAsync
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  int $delay (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentVcsRestUpdatePostAsync($envName, $context, $delay = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentVcsRestUpdatePost'][0])
    {
        return $this->environmentVcsRestUpdatePostAsyncWithHttpInfo($envName, $context, $delay, $nodeGroup, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentVcsRestUpdatePostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  int $delay (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentVcsRestUpdatePostAsyncWithHttpInfo($envName, $context, $delay = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentVcsRestUpdatePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseVcsUpdateResponse';
        $request = $this->environmentVcsRestUpdatePostRequest($envName, $context, $delay, $nodeGroup, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentVcsRestUpdatePost'
     *
     * @param  string $envName (required)
     * @param  string $context (required)
     * @param  int $delay (optional)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentVcsRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentVcsRestUpdatePostRequest($envName, $context, $delay = null, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentVcsRestUpdatePost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentVcsRestUpdatePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling VcsServiceApi.environmentVcsRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling VcsServiceApi.environmentVcsRestUpdatePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling environmentVcsRestUpdatePost'
            );
        }
        if (strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling VcsServiceApi.environmentVcsRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling VcsServiceApi.environmentVcsRestUpdatePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling VcsServiceApi.environmentVcsRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling VcsServiceApi.environmentVcsRestUpdatePost, must be bigger than or equal to -2147483648.');
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling VcsServiceApi.environmentVcsRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling VcsServiceApi.environmentVcsRestUpdatePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling VcsServiceApi.environmentVcsRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling VcsServiceApi.environmentVcsRestUpdatePost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/vcs/rest/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
