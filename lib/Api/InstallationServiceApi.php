<?php
/**
 * InstallationServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * InstallationServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InstallationServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'marketplaceInstallationRestExecuteactionPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceInstallationRestGetenvappidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceInstallationRestGetinfoPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceInstallationRestGetlistPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceInstallationRestGetscriptingappidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceInstallationRestGetsettingsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceInstallationRestUninstallPost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation marketplaceInstallationRestExecuteactionPost
     *
     * @param  string $appUniqueName appUniqueName (required)
     * @param  string $action action (optional)
     * @param  string $settingsId settingsId (optional)
     * @param  string $params params (optional)
     * @param  string $lang lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestExecuteactionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse
     */
    public function marketplaceInstallationRestExecuteactionPost($appUniqueName, $action = null, $settingsId = null, $params = null, $lang = null, string $contentType = self::contentTypes['marketplaceInstallationRestExecuteactionPost'][0])
    {
        list($response) = $this->marketplaceInstallationRestExecuteactionPostWithHttpInfo($appUniqueName, $action, $settingsId, $params, $lang, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceInstallationRestExecuteactionPostWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  string $action (optional)
     * @param  string $settingsId (optional)
     * @param  string $params (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestExecuteactionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceInstallationRestExecuteactionPostWithHttpInfo($appUniqueName, $action = null, $settingsId = null, $params = null, $lang = null, string $contentType = self::contentTypes['marketplaceInstallationRestExecuteactionPost'][0])
    {
        $request = $this->marketplaceInstallationRestExecuteactionPostRequest($appUniqueName, $action, $settingsId, $params, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceInstallationRestExecuteactionPostAsync
     *
     * @param  string $appUniqueName (required)
     * @param  string $action (optional)
     * @param  string $settingsId (optional)
     * @param  string $params (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestExecuteactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceInstallationRestExecuteactionPostAsync($appUniqueName, $action = null, $settingsId = null, $params = null, $lang = null, string $contentType = self::contentTypes['marketplaceInstallationRestExecuteactionPost'][0])
    {
        return $this->marketplaceInstallationRestExecuteactionPostAsyncWithHttpInfo($appUniqueName, $action, $settingsId, $params, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceInstallationRestExecuteactionPostAsyncWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  string $action (optional)
     * @param  string $settingsId (optional)
     * @param  string $params (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestExecuteactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceInstallationRestExecuteactionPostAsyncWithHttpInfo($appUniqueName, $action = null, $settingsId = null, $params = null, $lang = null, string $contentType = self::contentTypes['marketplaceInstallationRestExecuteactionPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse';
        $request = $this->marketplaceInstallationRestExecuteactionPostRequest($appUniqueName, $action, $settingsId, $params, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceInstallationRestExecuteactionPost'
     *
     * @param  string $appUniqueName (required)
     * @param  string $action (optional)
     * @param  string $settingsId (optional)
     * @param  string $params (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestExecuteactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceInstallationRestExecuteactionPostRequest($appUniqueName, $action = null, $settingsId = null, $params = null, $lang = null, string $contentType = self::contentTypes['marketplaceInstallationRestExecuteactionPost'][0])
    {

        // verify the required parameter 'appUniqueName' is set
        if ($appUniqueName === null || (is_array($appUniqueName) && count($appUniqueName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appUniqueName when calling marketplaceInstallationRestExecuteactionPost'
            );
        }
        if (strlen($appUniqueName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$appUniqueName" when calling InstallationServiceApi.marketplaceInstallationRestExecuteactionPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $appUniqueName)) {
            throw new \InvalidArgumentException("invalid value for \"appUniqueName\" when calling InstallationServiceApi.marketplaceInstallationRestExecuteactionPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($action !== null && strlen($action) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$action" when calling InstallationServiceApi.marketplaceInstallationRestExecuteactionPost, must be smaller than or equal to 2147483647.');
        }
        if ($action !== null && !preg_match("/(.*){0,2147483647}/", $action)) {
            throw new \InvalidArgumentException("invalid value for \"action\" when calling InstallationServiceApi.marketplaceInstallationRestExecuteactionPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($settingsId !== null && strlen($settingsId) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$settingsId" when calling InstallationServiceApi.marketplaceInstallationRestExecuteactionPost, must be smaller than or equal to 2147483647.');
        }
        if ($settingsId !== null && !preg_match("/(.*){0,2147483647}/", $settingsId)) {
            throw new \InvalidArgumentException("invalid value for \"settingsId\" when calling InstallationServiceApi.marketplaceInstallationRestExecuteactionPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($params !== null && strlen($params) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$params" when calling InstallationServiceApi.marketplaceInstallationRestExecuteactionPost, must be smaller than or equal to 2147483647.');
        }
        if ($params !== null && !preg_match("/(.*){0,2147483647}/", $params)) {
            throw new \InvalidArgumentException("invalid value for \"params\" when calling InstallationServiceApi.marketplaceInstallationRestExecuteactionPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($lang !== null && strlen($lang) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$lang" when calling InstallationServiceApi.marketplaceInstallationRestExecuteactionPost, must be smaller than or equal to 2147483647.');
        }
        if ($lang !== null && !preg_match("/(.*){0,2147483647}/", $lang)) {
            throw new \InvalidArgumentException("invalid value for \"lang\" when calling InstallationServiceApi.marketplaceInstallationRestExecuteactionPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/marketplace/installation/rest/executeaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($appUniqueName !== null) {
            $formParams['appUniqueName'] = ObjectSerializer::toFormValue($appUniqueName);
        }
        // form params
        if ($action !== null) {
            $formParams['action'] = ObjectSerializer::toFormValue($action);
        }
        // form params
        if ($settingsId !== null) {
            $formParams['settingsId'] = ObjectSerializer::toFormValue($settingsId);
        }
        // form params
        if ($params !== null) {
            $formParams['params'] = ObjectSerializer::toFormValue($params);
        }
        // form params
        if ($lang !== null) {
            $formParams['lang'] = ObjectSerializer::toFormValue($lang);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceInstallationRestGetenvappidPost
     *
     * @param  string $appUniqueName appUniqueName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetenvappidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse
     */
    public function marketplaceInstallationRestGetenvappidPost($appUniqueName, string $contentType = self::contentTypes['marketplaceInstallationRestGetenvappidPost'][0])
    {
        list($response) = $this->marketplaceInstallationRestGetenvappidPostWithHttpInfo($appUniqueName, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceInstallationRestGetenvappidPostWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetenvappidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceInstallationRestGetenvappidPostWithHttpInfo($appUniqueName, string $contentType = self::contentTypes['marketplaceInstallationRestGetenvappidPost'][0])
    {
        $request = $this->marketplaceInstallationRestGetenvappidPostRequest($appUniqueName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceInstallationRestGetenvappidPostAsync
     *
     * @param  string $appUniqueName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetenvappidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceInstallationRestGetenvappidPostAsync($appUniqueName, string $contentType = self::contentTypes['marketplaceInstallationRestGetenvappidPost'][0])
    {
        return $this->marketplaceInstallationRestGetenvappidPostAsyncWithHttpInfo($appUniqueName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceInstallationRestGetenvappidPostAsyncWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetenvappidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceInstallationRestGetenvappidPostAsyncWithHttpInfo($appUniqueName, string $contentType = self::contentTypes['marketplaceInstallationRestGetenvappidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse';
        $request = $this->marketplaceInstallationRestGetenvappidPostRequest($appUniqueName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceInstallationRestGetenvappidPost'
     *
     * @param  string $appUniqueName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetenvappidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceInstallationRestGetenvappidPostRequest($appUniqueName, string $contentType = self::contentTypes['marketplaceInstallationRestGetenvappidPost'][0])
    {

        // verify the required parameter 'appUniqueName' is set
        if ($appUniqueName === null || (is_array($appUniqueName) && count($appUniqueName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appUniqueName when calling marketplaceInstallationRestGetenvappidPost'
            );
        }
        if (strlen($appUniqueName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$appUniqueName" when calling InstallationServiceApi.marketplaceInstallationRestGetenvappidPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $appUniqueName)) {
            throw new \InvalidArgumentException("invalid value for \"appUniqueName\" when calling InstallationServiceApi.marketplaceInstallationRestGetenvappidPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/marketplace/installation/rest/getenvappid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($appUniqueName !== null) {
            $formParams['appUniqueName'] = ObjectSerializer::toFormValue($appUniqueName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceInstallationRestGetinfoPost
     *
     * @param  string $appUniqueName appUniqueName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse
     */
    public function marketplaceInstallationRestGetinfoPost($appUniqueName, string $contentType = self::contentTypes['marketplaceInstallationRestGetinfoPost'][0])
    {
        list($response) = $this->marketplaceInstallationRestGetinfoPostWithHttpInfo($appUniqueName, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceInstallationRestGetinfoPostWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceInstallationRestGetinfoPostWithHttpInfo($appUniqueName, string $contentType = self::contentTypes['marketplaceInstallationRestGetinfoPost'][0])
    {
        $request = $this->marketplaceInstallationRestGetinfoPostRequest($appUniqueName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceInstallationRestGetinfoPostAsync
     *
     * @param  string $appUniqueName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceInstallationRestGetinfoPostAsync($appUniqueName, string $contentType = self::contentTypes['marketplaceInstallationRestGetinfoPost'][0])
    {
        return $this->marketplaceInstallationRestGetinfoPostAsyncWithHttpInfo($appUniqueName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceInstallationRestGetinfoPostAsyncWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceInstallationRestGetinfoPostAsyncWithHttpInfo($appUniqueName, string $contentType = self::contentTypes['marketplaceInstallationRestGetinfoPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse';
        $request = $this->marketplaceInstallationRestGetinfoPostRequest($appUniqueName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceInstallationRestGetinfoPost'
     *
     * @param  string $appUniqueName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceInstallationRestGetinfoPostRequest($appUniqueName, string $contentType = self::contentTypes['marketplaceInstallationRestGetinfoPost'][0])
    {

        // verify the required parameter 'appUniqueName' is set
        if ($appUniqueName === null || (is_array($appUniqueName) && count($appUniqueName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appUniqueName when calling marketplaceInstallationRestGetinfoPost'
            );
        }
        if (strlen($appUniqueName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$appUniqueName" when calling InstallationServiceApi.marketplaceInstallationRestGetinfoPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $appUniqueName)) {
            throw new \InvalidArgumentException("invalid value for \"appUniqueName\" when calling InstallationServiceApi.marketplaceInstallationRestGetinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/marketplace/installation/rest/getinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($appUniqueName !== null) {
            $formParams['appUniqueName'] = ObjectSerializer::toFormValue($appUniqueName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceInstallationRestGetlistPost
     *
     * @param  string $search search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse
     */
    public function marketplaceInstallationRestGetlistPost($search = null, string $contentType = self::contentTypes['marketplaceInstallationRestGetlistPost'][0])
    {
        list($response) = $this->marketplaceInstallationRestGetlistPostWithHttpInfo($search, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceInstallationRestGetlistPostWithHttpInfo
     *
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceInstallationRestGetlistPostWithHttpInfo($search = null, string $contentType = self::contentTypes['marketplaceInstallationRestGetlistPost'][0])
    {
        $request = $this->marketplaceInstallationRestGetlistPostRequest($search, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceInstallationRestGetlistPostAsync
     *
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceInstallationRestGetlistPostAsync($search = null, string $contentType = self::contentTypes['marketplaceInstallationRestGetlistPost'][0])
    {
        return $this->marketplaceInstallationRestGetlistPostAsyncWithHttpInfo($search, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceInstallationRestGetlistPostAsyncWithHttpInfo
     *
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceInstallationRestGetlistPostAsyncWithHttpInfo($search = null, string $contentType = self::contentTypes['marketplaceInstallationRestGetlistPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse';
        $request = $this->marketplaceInstallationRestGetlistPostRequest($search, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceInstallationRestGetlistPost'
     *
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceInstallationRestGetlistPostRequest($search = null, string $contentType = self::contentTypes['marketplaceInstallationRestGetlistPost'][0])
    {

        if ($search !== null && strlen($search) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$search" when calling InstallationServiceApi.marketplaceInstallationRestGetlistPost, must be smaller than or equal to 2147483647.');
        }
        if ($search !== null && !preg_match("/(.*){0,2147483647}/", $search)) {
            throw new \InvalidArgumentException("invalid value for \"search\" when calling InstallationServiceApi.marketplaceInstallationRestGetlistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/marketplace/installation/rest/getlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($search !== null) {
            $formParams['search'] = ObjectSerializer::toFormValue($search);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceInstallationRestGetscriptingappidPost
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetscriptingappidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse
     */
    public function marketplaceInstallationRestGetscriptingappidPost(string $contentType = self::contentTypes['marketplaceInstallationRestGetscriptingappidPost'][0])
    {
        list($response) = $this->marketplaceInstallationRestGetscriptingappidPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation marketplaceInstallationRestGetscriptingappidPostWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetscriptingappidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceInstallationRestGetscriptingappidPostWithHttpInfo(string $contentType = self::contentTypes['marketplaceInstallationRestGetscriptingappidPost'][0])
    {
        $request = $this->marketplaceInstallationRestGetscriptingappidPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceInstallationRestGetscriptingappidPostAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetscriptingappidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceInstallationRestGetscriptingappidPostAsync(string $contentType = self::contentTypes['marketplaceInstallationRestGetscriptingappidPost'][0])
    {
        return $this->marketplaceInstallationRestGetscriptingappidPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceInstallationRestGetscriptingappidPostAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetscriptingappidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceInstallationRestGetscriptingappidPostAsyncWithHttpInfo(string $contentType = self::contentTypes['marketplaceInstallationRestGetscriptingappidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse';
        $request = $this->marketplaceInstallationRestGetscriptingappidPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceInstallationRestGetscriptingappidPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetscriptingappidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceInstallationRestGetscriptingappidPostRequest(string $contentType = self::contentTypes['marketplaceInstallationRestGetscriptingappidPost'][0])
    {


        $resourcePath = '/marketplace/installation/rest/getscriptingappid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceInstallationRestGetsettingsPost
     *
     * @param  string $appUniqueName appUniqueName (required)
     * @param  string $settingsId settingsId (optional)
     * @param  string $lang lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetsettingsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseSettingsResponse
     */
    public function marketplaceInstallationRestGetsettingsPost($appUniqueName, $settingsId = null, $lang = null, string $contentType = self::contentTypes['marketplaceInstallationRestGetsettingsPost'][0])
    {
        list($response) = $this->marketplaceInstallationRestGetsettingsPostWithHttpInfo($appUniqueName, $settingsId, $lang, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceInstallationRestGetsettingsPostWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  string $settingsId (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetsettingsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceInstallationRestGetsettingsPostWithHttpInfo($appUniqueName, $settingsId = null, $lang = null, string $contentType = self::contentTypes['marketplaceInstallationRestGetsettingsPost'][0])
    {
        $request = $this->marketplaceInstallationRestGetsettingsPostRequest($appUniqueName, $settingsId, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseSettingsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceInstallationRestGetsettingsPostAsync
     *
     * @param  string $appUniqueName (required)
     * @param  string $settingsId (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetsettingsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceInstallationRestGetsettingsPostAsync($appUniqueName, $settingsId = null, $lang = null, string $contentType = self::contentTypes['marketplaceInstallationRestGetsettingsPost'][0])
    {
        return $this->marketplaceInstallationRestGetsettingsPostAsyncWithHttpInfo($appUniqueName, $settingsId, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceInstallationRestGetsettingsPostAsyncWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  string $settingsId (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetsettingsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceInstallationRestGetsettingsPostAsyncWithHttpInfo($appUniqueName, $settingsId = null, $lang = null, string $contentType = self::contentTypes['marketplaceInstallationRestGetsettingsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseSettingsResponse';
        $request = $this->marketplaceInstallationRestGetsettingsPostRequest($appUniqueName, $settingsId, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceInstallationRestGetsettingsPost'
     *
     * @param  string $appUniqueName (required)
     * @param  string $settingsId (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestGetsettingsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceInstallationRestGetsettingsPostRequest($appUniqueName, $settingsId = null, $lang = null, string $contentType = self::contentTypes['marketplaceInstallationRestGetsettingsPost'][0])
    {

        // verify the required parameter 'appUniqueName' is set
        if ($appUniqueName === null || (is_array($appUniqueName) && count($appUniqueName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appUniqueName when calling marketplaceInstallationRestGetsettingsPost'
            );
        }
        if (strlen($appUniqueName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$appUniqueName" when calling InstallationServiceApi.marketplaceInstallationRestGetsettingsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $appUniqueName)) {
            throw new \InvalidArgumentException("invalid value for \"appUniqueName\" when calling InstallationServiceApi.marketplaceInstallationRestGetsettingsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($settingsId !== null && strlen($settingsId) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$settingsId" when calling InstallationServiceApi.marketplaceInstallationRestGetsettingsPost, must be smaller than or equal to 2147483647.');
        }
        if ($settingsId !== null && !preg_match("/(.*){0,2147483647}/", $settingsId)) {
            throw new \InvalidArgumentException("invalid value for \"settingsId\" when calling InstallationServiceApi.marketplaceInstallationRestGetsettingsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($lang !== null && strlen($lang) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$lang" when calling InstallationServiceApi.marketplaceInstallationRestGetsettingsPost, must be smaller than or equal to 2147483647.');
        }
        if ($lang !== null && !preg_match("/(.*){0,2147483647}/", $lang)) {
            throw new \InvalidArgumentException("invalid value for \"lang\" when calling InstallationServiceApi.marketplaceInstallationRestGetsettingsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/marketplace/installation/rest/getsettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($appUniqueName !== null) {
            $formParams['appUniqueName'] = ObjectSerializer::toFormValue($appUniqueName);
        }
        // form params
        if ($settingsId !== null) {
            $formParams['settingsId'] = ObjectSerializer::toFormValue($settingsId);
        }
        // form params
        if ($lang !== null) {
            $formParams['lang'] = ObjectSerializer::toFormValue($lang);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceInstallationRestUninstallPost
     *
     * @param  string $appUniqueName appUniqueName (required)
     * @param  bool $force force (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestUninstallPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse
     */
    public function marketplaceInstallationRestUninstallPost($appUniqueName, $force = null, string $contentType = self::contentTypes['marketplaceInstallationRestUninstallPost'][0])
    {
        list($response) = $this->marketplaceInstallationRestUninstallPostWithHttpInfo($appUniqueName, $force, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceInstallationRestUninstallPostWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  bool $force (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestUninstallPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceInstallationRestUninstallPostWithHttpInfo($appUniqueName, $force = null, string $contentType = self::contentTypes['marketplaceInstallationRestUninstallPost'][0])
    {
        $request = $this->marketplaceInstallationRestUninstallPostRequest($appUniqueName, $force, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceInstallationRestUninstallPostAsync
     *
     * @param  string $appUniqueName (required)
     * @param  bool $force (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestUninstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceInstallationRestUninstallPostAsync($appUniqueName, $force = null, string $contentType = self::contentTypes['marketplaceInstallationRestUninstallPost'][0])
    {
        return $this->marketplaceInstallationRestUninstallPostAsyncWithHttpInfo($appUniqueName, $force, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceInstallationRestUninstallPostAsyncWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  bool $force (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestUninstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceInstallationRestUninstallPostAsyncWithHttpInfo($appUniqueName, $force = null, string $contentType = self::contentTypes['marketplaceInstallationRestUninstallPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse';
        $request = $this->marketplaceInstallationRestUninstallPostRequest($appUniqueName, $force, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceInstallationRestUninstallPost'
     *
     * @param  string $appUniqueName (required)
     * @param  bool $force (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceInstallationRestUninstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceInstallationRestUninstallPostRequest($appUniqueName, $force = null, string $contentType = self::contentTypes['marketplaceInstallationRestUninstallPost'][0])
    {

        // verify the required parameter 'appUniqueName' is set
        if ($appUniqueName === null || (is_array($appUniqueName) && count($appUniqueName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appUniqueName when calling marketplaceInstallationRestUninstallPost'
            );
        }
        if (strlen($appUniqueName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$appUniqueName" when calling InstallationServiceApi.marketplaceInstallationRestUninstallPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $appUniqueName)) {
            throw new \InvalidArgumentException("invalid value for \"appUniqueName\" when calling InstallationServiceApi.marketplaceInstallationRestUninstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        


        $resourcePath = '/marketplace/installation/rest/uninstall';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($appUniqueName !== null) {
            $formParams['appUniqueName'] = ObjectSerializer::toFormValue($appUniqueName);
        }
        // form params
        if ($force !== null) {
            $formParams['force'] = ObjectSerializer::toFormValue($force);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
