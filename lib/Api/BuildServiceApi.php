<?php
/**
 * BuildServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * BuildServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BuildServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'environmentBuildRestAddprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentBuildRestAddprojectwithcredsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentBuildRestAddprojectwithkeyPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentBuildRestBuilddeployprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentBuildRestBuildprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentBuildRestDeployprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentBuildRestEditprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentBuildRestGetprojectinfoPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentBuildRestGetprojectsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentBuildRestRemoveprojectPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentBuildRestUpdatePost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation environmentBuildRestAddprojectPost
     *
     * @param  bool $autoUpdate autoUpdate (required)
     * @param  string $type type (required)
     * @param  string $path path (required)
     * @param  bool $autoResolveConflict autoResolveConflict (required)
     * @param  string $envName envName (required)
     * @param  string $name name (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $targetNodeGroup targetNodeGroup (optional)
     * @param  bool $deployNow deployNow (optional)
     * @param  int $keyId keyId (optional)
     * @param  string $login login (optional)
     * @param  string $branch branch (optional)
     * @param  bool $isSequential isSequential (optional)
     * @param  string $password password (optional)
     * @param  int $delay delay (optional)
     * @param  string $context context (optional)
     * @param  string $repoHash repoHash (optional)
     * @param  string $interval interval (optional)
     * @param  string $workDir workDir (optional)
     * @param  string $hooks hooks (optional)
     * @param  string $targetEnv targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse
     */
    public function environmentBuildRestAddprojectPost($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $targetNodeGroup = null, $deployNow = null, $keyId = null, $login = null, $branch = null, $isSequential = null, $password = null, $delay = null, $context = null, $repoHash = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectPost'][0])
    {
        list($response) = $this->environmentBuildRestAddprojectPostWithHttpInfo($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $targetNodeGroup, $deployNow, $keyId, $login, $branch, $isSequential, $password, $delay, $context, $repoHash, $interval, $workDir, $hooks, $targetEnv, $contentType);
        return $response;
    }

    /**
     * Operation environmentBuildRestAddprojectPostWithHttpInfo
     *
     * @param  bool $autoUpdate (required)
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  string $targetNodeGroup (optional)
     * @param  bool $deployNow (optional)
     * @param  int $keyId (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  bool $isSequential (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentBuildRestAddprojectPostWithHttpInfo($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $targetNodeGroup = null, $deployNow = null, $keyId = null, $login = null, $branch = null, $isSequential = null, $password = null, $delay = null, $context = null, $repoHash = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectPost'][0])
    {
        $request = $this->environmentBuildRestAddprojectPostRequest($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $targetNodeGroup, $deployNow, $keyId, $login, $branch, $isSequential, $password, $delay, $context, $repoHash, $interval, $workDir, $hooks, $targetEnv, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentBuildRestAddprojectPostAsync
     *
     * @param  bool $autoUpdate (required)
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  string $targetNodeGroup (optional)
     * @param  bool $deployNow (optional)
     * @param  int $keyId (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  bool $isSequential (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestAddprojectPostAsync($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $targetNodeGroup = null, $deployNow = null, $keyId = null, $login = null, $branch = null, $isSequential = null, $password = null, $delay = null, $context = null, $repoHash = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectPost'][0])
    {
        return $this->environmentBuildRestAddprojectPostAsyncWithHttpInfo($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $targetNodeGroup, $deployNow, $keyId, $login, $branch, $isSequential, $password, $delay, $context, $repoHash, $interval, $workDir, $hooks, $targetEnv, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentBuildRestAddprojectPostAsyncWithHttpInfo
     *
     * @param  bool $autoUpdate (required)
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  string $targetNodeGroup (optional)
     * @param  bool $deployNow (optional)
     * @param  int $keyId (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  bool $isSequential (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestAddprojectPostAsyncWithHttpInfo($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $targetNodeGroup = null, $deployNow = null, $keyId = null, $login = null, $branch = null, $isSequential = null, $password = null, $delay = null, $context = null, $repoHash = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse';
        $request = $this->environmentBuildRestAddprojectPostRequest($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $targetNodeGroup, $deployNow, $keyId, $login, $branch, $isSequential, $password, $delay, $context, $repoHash, $interval, $workDir, $hooks, $targetEnv, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentBuildRestAddprojectPost'
     *
     * @param  bool $autoUpdate (required)
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  string $targetNodeGroup (optional)
     * @param  bool $deployNow (optional)
     * @param  int $keyId (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  bool $isSequential (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentBuildRestAddprojectPostRequest($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $targetNodeGroup = null, $deployNow = null, $keyId = null, $login = null, $branch = null, $isSequential = null, $password = null, $delay = null, $context = null, $repoHash = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectPost'][0])
    {

        // verify the required parameter 'autoUpdate' is set
        if ($autoUpdate === null || (is_array($autoUpdate) && count($autoUpdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $autoUpdate when calling environmentBuildRestAddprojectPost'
            );
        }

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling environmentBuildRestAddprojectPost'
            );
        }
        if (strlen($type) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$type" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $type)) {
            throw new \InvalidArgumentException("invalid value for \"type\" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentBuildRestAddprojectPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'autoResolveConflict' is set
        if ($autoResolveConflict === null || (is_array($autoResolveConflict) && count($autoResolveConflict) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $autoResolveConflict when calling environmentBuildRestAddprojectPost'
            );
        }

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentBuildRestAddprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling environmentBuildRestAddprojectPost'
            );
        }
        if (strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentBuildRestAddprojectPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($targetNodeGroup !== null && strlen($targetNodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$targetNodeGroup" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($targetNodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $targetNodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"targetNodeGroup\" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($keyId !== null && $keyId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$keyId" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($keyId !== null && $keyId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$keyId" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($login !== null && strlen($login) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$login" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($login !== null && !preg_match("/(.*){0,2147483647}/", $login)) {
            throw new \InvalidArgumentException("invalid value for \"login\" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($branch !== null && strlen($branch) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$branch" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($branch !== null && !preg_match("/(.*){0,2147483647}/", $branch)) {
            throw new \InvalidArgumentException("invalid value for \"branch\" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($context !== null && strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($context !== null && !preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($repoHash !== null && strlen($repoHash) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$repoHash" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($repoHash !== null && !preg_match("/(.*){0,2147483647}/", $repoHash)) {
            throw new \InvalidArgumentException("invalid value for \"repoHash\" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($interval !== null && strlen($interval) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$interval" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($interval !== null && !preg_match("/(.*){0,2147483647}/", $interval)) {
            throw new \InvalidArgumentException("invalid value for \"interval\" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($workDir !== null && strlen($workDir) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$workDir" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($workDir !== null && !preg_match("/(.*){0,2147483647}/", $workDir)) {
            throw new \InvalidArgumentException("invalid value for \"workDir\" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($hooks !== null && strlen($hooks) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$hooks" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($hooks !== null && !preg_match("/(.*){0,2147483647}/", $hooks)) {
            throw new \InvalidArgumentException("invalid value for \"hooks\" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($targetEnv !== null && strlen($targetEnv) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$targetEnv" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($targetEnv !== null && !preg_match("/(.*){0,2147483647}/", $targetEnv)) {
            throw new \InvalidArgumentException("invalid value for \"targetEnv\" when calling BuildServiceApi.environmentBuildRestAddprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/build/rest/addproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($targetNodeGroup !== null) {
            $formParams['targetNodeGroup'] = ObjectSerializer::toFormValue($targetNodeGroup);
        }
        // form params
        if ($autoUpdate !== null) {
            $formParams['autoUpdate'] = ObjectSerializer::toFormValue($autoUpdate);
        }
        // form params
        if ($deployNow !== null) {
            $formParams['deployNow'] = ObjectSerializer::toFormValue($deployNow);
        }
        // form params
        if ($keyId !== null) {
            $formParams['keyId'] = ObjectSerializer::toFormValue($keyId);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($login !== null) {
            $formParams['login'] = ObjectSerializer::toFormValue($login);
        }
        // form params
        if ($branch !== null) {
            $formParams['branch'] = ObjectSerializer::toFormValue($branch);
        }
        // form params
        if ($isSequential !== null) {
            $formParams['isSequential'] = ObjectSerializer::toFormValue($isSequential);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($autoResolveConflict !== null) {
            $formParams['autoResolveConflict'] = ObjectSerializer::toFormValue($autoResolveConflict);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($repoHash !== null) {
            $formParams['repoHash'] = ObjectSerializer::toFormValue($repoHash);
        }
        // form params
        if ($interval !== null) {
            $formParams['interval'] = ObjectSerializer::toFormValue($interval);
        }
        // form params
        if ($workDir !== null) {
            $formParams['workDir'] = ObjectSerializer::toFormValue($workDir);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($hooks !== null) {
            $formParams['hooks'] = ObjectSerializer::toFormValue($hooks);
        }
        // form params
        if ($targetEnv !== null) {
            $formParams['targetEnv'] = ObjectSerializer::toFormValue($targetEnv);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentBuildRestAddprojectwithcredsPost
     *
     * @param  bool $autoUpdate autoUpdate (required)
     * @param  string $type type (required)
     * @param  string $path path (required)
     * @param  bool $autoResolveConflict autoResolveConflict (required)
     * @param  string $envName envName (required)
     * @param  string $name name (required)
     * @param  int $nodeId nodeId (required)
     * @param  bool $deployNow deployNow (optional)
     * @param  string $login login (optional)
     * @param  string $branch branch (optional)
     * @param  string $password password (optional)
     * @param  int $delay delay (optional)
     * @param  string $context context (optional)
     * @param  string $interval interval (optional)
     * @param  string $workDir workDir (optional)
     * @param  string $hooks hooks (optional)
     * @param  string $targetEnv targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectwithcredsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse
     */
    public function environmentBuildRestAddprojectwithcredsPost($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow = null, $login = null, $branch = null, $password = null, $delay = null, $context = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectwithcredsPost'][0])
    {
        list($response) = $this->environmentBuildRestAddprojectwithcredsPostWithHttpInfo($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow, $login, $branch, $password, $delay, $context, $interval, $workDir, $hooks, $targetEnv, $contentType);
        return $response;
    }

    /**
     * Operation environmentBuildRestAddprojectwithcredsPostWithHttpInfo
     *
     * @param  bool $autoUpdate (required)
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  bool $deployNow (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectwithcredsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentBuildRestAddprojectwithcredsPostWithHttpInfo($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow = null, $login = null, $branch = null, $password = null, $delay = null, $context = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectwithcredsPost'][0])
    {
        $request = $this->environmentBuildRestAddprojectwithcredsPostRequest($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow, $login, $branch, $password, $delay, $context, $interval, $workDir, $hooks, $targetEnv, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentBuildRestAddprojectwithcredsPostAsync
     *
     * @param  bool $autoUpdate (required)
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  bool $deployNow (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectwithcredsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestAddprojectwithcredsPostAsync($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow = null, $login = null, $branch = null, $password = null, $delay = null, $context = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectwithcredsPost'][0])
    {
        return $this->environmentBuildRestAddprojectwithcredsPostAsyncWithHttpInfo($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow, $login, $branch, $password, $delay, $context, $interval, $workDir, $hooks, $targetEnv, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentBuildRestAddprojectwithcredsPostAsyncWithHttpInfo
     *
     * @param  bool $autoUpdate (required)
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  bool $deployNow (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectwithcredsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestAddprojectwithcredsPostAsyncWithHttpInfo($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow = null, $login = null, $branch = null, $password = null, $delay = null, $context = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectwithcredsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse';
        $request = $this->environmentBuildRestAddprojectwithcredsPostRequest($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow, $login, $branch, $password, $delay, $context, $interval, $workDir, $hooks, $targetEnv, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentBuildRestAddprojectwithcredsPost'
     *
     * @param  bool $autoUpdate (required)
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  bool $deployNow (optional)
     * @param  string $login (optional)
     * @param  string $branch (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectwithcredsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentBuildRestAddprojectwithcredsPostRequest($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow = null, $login = null, $branch = null, $password = null, $delay = null, $context = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectwithcredsPost'][0])
    {

        // verify the required parameter 'autoUpdate' is set
        if ($autoUpdate === null || (is_array($autoUpdate) && count($autoUpdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $autoUpdate when calling environmentBuildRestAddprojectwithcredsPost'
            );
        }

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling environmentBuildRestAddprojectwithcredsPost'
            );
        }
        if (strlen($type) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$type" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $type)) {
            throw new \InvalidArgumentException("invalid value for \"type\" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentBuildRestAddprojectwithcredsPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'autoResolveConflict' is set
        if ($autoResolveConflict === null || (is_array($autoResolveConflict) && count($autoResolveConflict) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $autoResolveConflict when calling environmentBuildRestAddprojectwithcredsPost'
            );
        }

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentBuildRestAddprojectwithcredsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling environmentBuildRestAddprojectwithcredsPost'
            );
        }
        if (strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentBuildRestAddprojectwithcredsPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be bigger than or equal to -2147483648.');
        }
        

        if ($login !== null && strlen($login) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$login" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be smaller than or equal to 2147483647.');
        }
        if ($login !== null && !preg_match("/(.*){0,2147483647}/", $login)) {
            throw new \InvalidArgumentException("invalid value for \"login\" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($branch !== null && strlen($branch) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$branch" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be smaller than or equal to 2147483647.');
        }
        if ($branch !== null && !preg_match("/(.*){0,2147483647}/", $branch)) {
            throw new \InvalidArgumentException("invalid value for \"branch\" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($context !== null && strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be smaller than or equal to 2147483647.');
        }
        if ($context !== null && !preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($interval !== null && strlen($interval) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$interval" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be smaller than or equal to 2147483647.');
        }
        if ($interval !== null && !preg_match("/(.*){0,2147483647}/", $interval)) {
            throw new \InvalidArgumentException("invalid value for \"interval\" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($workDir !== null && strlen($workDir) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$workDir" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be smaller than or equal to 2147483647.');
        }
        if ($workDir !== null && !preg_match("/(.*){0,2147483647}/", $workDir)) {
            throw new \InvalidArgumentException("invalid value for \"workDir\" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($hooks !== null && strlen($hooks) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$hooks" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be smaller than or equal to 2147483647.');
        }
        if ($hooks !== null && !preg_match("/(.*){0,2147483647}/", $hooks)) {
            throw new \InvalidArgumentException("invalid value for \"hooks\" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($targetEnv !== null && strlen($targetEnv) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$targetEnv" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must be smaller than or equal to 2147483647.');
        }
        if ($targetEnv !== null && !preg_match("/(.*){0,2147483647}/", $targetEnv)) {
            throw new \InvalidArgumentException("invalid value for \"targetEnv\" when calling BuildServiceApi.environmentBuildRestAddprojectwithcredsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/build/rest/addprojectwithcreds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($autoUpdate !== null) {
            $formParams['autoUpdate'] = ObjectSerializer::toFormValue($autoUpdate);
        }
        // form params
        if ($deployNow !== null) {
            $formParams['deployNow'] = ObjectSerializer::toFormValue($deployNow);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($login !== null) {
            $formParams['login'] = ObjectSerializer::toFormValue($login);
        }
        // form params
        if ($branch !== null) {
            $formParams['branch'] = ObjectSerializer::toFormValue($branch);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($autoResolveConflict !== null) {
            $formParams['autoResolveConflict'] = ObjectSerializer::toFormValue($autoResolveConflict);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($interval !== null) {
            $formParams['interval'] = ObjectSerializer::toFormValue($interval);
        }
        // form params
        if ($workDir !== null) {
            $formParams['workDir'] = ObjectSerializer::toFormValue($workDir);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($hooks !== null) {
            $formParams['hooks'] = ObjectSerializer::toFormValue($hooks);
        }
        // form params
        if ($targetEnv !== null) {
            $formParams['targetEnv'] = ObjectSerializer::toFormValue($targetEnv);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentBuildRestAddprojectwithkeyPost
     *
     * @param  bool $autoUpdate autoUpdate (required)
     * @param  string $type type (required)
     * @param  string $path path (required)
     * @param  bool $autoResolveConflict autoResolveConflict (required)
     * @param  string $envName envName (required)
     * @param  string $name name (required)
     * @param  int $nodeId nodeId (required)
     * @param  bool $deployNow deployNow (optional)
     * @param  int $keyId keyId (optional)
     * @param  string $branch branch (optional)
     * @param  int $delay delay (optional)
     * @param  string $context context (optional)
     * @param  string $interval interval (optional)
     * @param  string $workDir workDir (optional)
     * @param  string $hooks hooks (optional)
     * @param  string $targetEnv targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectwithkeyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse
     */
    public function environmentBuildRestAddprojectwithkeyPost($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow = null, $keyId = null, $branch = null, $delay = null, $context = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectwithkeyPost'][0])
    {
        list($response) = $this->environmentBuildRestAddprojectwithkeyPostWithHttpInfo($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow, $keyId, $branch, $delay, $context, $interval, $workDir, $hooks, $targetEnv, $contentType);
        return $response;
    }

    /**
     * Operation environmentBuildRestAddprojectwithkeyPostWithHttpInfo
     *
     * @param  bool $autoUpdate (required)
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  bool $deployNow (optional)
     * @param  int $keyId (optional)
     * @param  string $branch (optional)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectwithkeyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentBuildRestAddprojectwithkeyPostWithHttpInfo($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow = null, $keyId = null, $branch = null, $delay = null, $context = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectwithkeyPost'][0])
    {
        $request = $this->environmentBuildRestAddprojectwithkeyPostRequest($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow, $keyId, $branch, $delay, $context, $interval, $workDir, $hooks, $targetEnv, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentBuildRestAddprojectwithkeyPostAsync
     *
     * @param  bool $autoUpdate (required)
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  bool $deployNow (optional)
     * @param  int $keyId (optional)
     * @param  string $branch (optional)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectwithkeyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestAddprojectwithkeyPostAsync($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow = null, $keyId = null, $branch = null, $delay = null, $context = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectwithkeyPost'][0])
    {
        return $this->environmentBuildRestAddprojectwithkeyPostAsyncWithHttpInfo($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow, $keyId, $branch, $delay, $context, $interval, $workDir, $hooks, $targetEnv, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentBuildRestAddprojectwithkeyPostAsyncWithHttpInfo
     *
     * @param  bool $autoUpdate (required)
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  bool $deployNow (optional)
     * @param  int $keyId (optional)
     * @param  string $branch (optional)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectwithkeyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestAddprojectwithkeyPostAsyncWithHttpInfo($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow = null, $keyId = null, $branch = null, $delay = null, $context = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectwithkeyPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse';
        $request = $this->environmentBuildRestAddprojectwithkeyPostRequest($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow, $keyId, $branch, $delay, $context, $interval, $workDir, $hooks, $targetEnv, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentBuildRestAddprojectwithkeyPost'
     *
     * @param  bool $autoUpdate (required)
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  bool $autoResolveConflict (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeId (required)
     * @param  bool $deployNow (optional)
     * @param  int $keyId (optional)
     * @param  string $branch (optional)
     * @param  int $delay (optional)
     * @param  string $context (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $targetEnv (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestAddprojectwithkeyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentBuildRestAddprojectwithkeyPostRequest($autoUpdate, $type, $path, $autoResolveConflict, $envName, $name, $nodeId, $deployNow = null, $keyId = null, $branch = null, $delay = null, $context = null, $interval = null, $workDir = null, $hooks = null, $targetEnv = null, string $contentType = self::contentTypes['environmentBuildRestAddprojectwithkeyPost'][0])
    {

        // verify the required parameter 'autoUpdate' is set
        if ($autoUpdate === null || (is_array($autoUpdate) && count($autoUpdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $autoUpdate when calling environmentBuildRestAddprojectwithkeyPost'
            );
        }

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling environmentBuildRestAddprojectwithkeyPost'
            );
        }
        if (strlen($type) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$type" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $type)) {
            throw new \InvalidArgumentException("invalid value for \"type\" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentBuildRestAddprojectwithkeyPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'autoResolveConflict' is set
        if ($autoResolveConflict === null || (is_array($autoResolveConflict) && count($autoResolveConflict) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $autoResolveConflict when calling environmentBuildRestAddprojectwithkeyPost'
            );
        }

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentBuildRestAddprojectwithkeyPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling environmentBuildRestAddprojectwithkeyPost'
            );
        }
        if (strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentBuildRestAddprojectwithkeyPost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be bigger than or equal to -2147483648.');
        }
        

        if ($keyId !== null && $keyId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$keyId" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be smaller than or equal to 2147483647.');
        }
        if ($keyId !== null && $keyId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$keyId" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($branch !== null && strlen($branch) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$branch" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be smaller than or equal to 2147483647.');
        }
        if ($branch !== null && !preg_match("/(.*){0,2147483647}/", $branch)) {
            throw new \InvalidArgumentException("invalid value for \"branch\" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($context !== null && strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be smaller than or equal to 2147483647.');
        }
        if ($context !== null && !preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($interval !== null && strlen($interval) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$interval" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be smaller than or equal to 2147483647.');
        }
        if ($interval !== null && !preg_match("/(.*){0,2147483647}/", $interval)) {
            throw new \InvalidArgumentException("invalid value for \"interval\" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($workDir !== null && strlen($workDir) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$workDir" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be smaller than or equal to 2147483647.');
        }
        if ($workDir !== null && !preg_match("/(.*){0,2147483647}/", $workDir)) {
            throw new \InvalidArgumentException("invalid value for \"workDir\" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($hooks !== null && strlen($hooks) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$hooks" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be smaller than or equal to 2147483647.');
        }
        if ($hooks !== null && !preg_match("/(.*){0,2147483647}/", $hooks)) {
            throw new \InvalidArgumentException("invalid value for \"hooks\" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($targetEnv !== null && strlen($targetEnv) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$targetEnv" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must be smaller than or equal to 2147483647.');
        }
        if ($targetEnv !== null && !preg_match("/(.*){0,2147483647}/", $targetEnv)) {
            throw new \InvalidArgumentException("invalid value for \"targetEnv\" when calling BuildServiceApi.environmentBuildRestAddprojectwithkeyPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/build/rest/addprojectwithkey';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($autoUpdate !== null) {
            $formParams['autoUpdate'] = ObjectSerializer::toFormValue($autoUpdate);
        }
        // form params
        if ($deployNow !== null) {
            $formParams['deployNow'] = ObjectSerializer::toFormValue($deployNow);
        }
        // form params
        if ($keyId !== null) {
            $formParams['keyId'] = ObjectSerializer::toFormValue($keyId);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($branch !== null) {
            $formParams['branch'] = ObjectSerializer::toFormValue($branch);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($autoResolveConflict !== null) {
            $formParams['autoResolveConflict'] = ObjectSerializer::toFormValue($autoResolveConflict);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($interval !== null) {
            $formParams['interval'] = ObjectSerializer::toFormValue($interval);
        }
        // form params
        if ($workDir !== null) {
            $formParams['workDir'] = ObjectSerializer::toFormValue($workDir);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($hooks !== null) {
            $formParams['hooks'] = ObjectSerializer::toFormValue($hooks);
        }
        // form params
        if ($targetEnv !== null) {
            $formParams['targetEnv'] = ObjectSerializer::toFormValue($targetEnv);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentBuildRestBuilddeployprojectPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeid nodeid (required)
     * @param  int $projectid projectid (required)
     * @param  int $delay delay (optional)
     * @param  bool $update update (optional)
     * @param  bool $isSequential isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestBuilddeployprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentBuildRestBuilddeployprojectPost($envName, $nodeid, $projectid, $delay = null, $update = null, $isSequential = null, string $contentType = self::contentTypes['environmentBuildRestBuilddeployprojectPost'][0])
    {
        list($response) = $this->environmentBuildRestBuilddeployprojectPostWithHttpInfo($envName, $nodeid, $projectid, $delay, $update, $isSequential, $contentType);
        return $response;
    }

    /**
     * Operation environmentBuildRestBuilddeployprojectPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  int $delay (optional)
     * @param  bool $update (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestBuilddeployprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentBuildRestBuilddeployprojectPostWithHttpInfo($envName, $nodeid, $projectid, $delay = null, $update = null, $isSequential = null, string $contentType = self::contentTypes['environmentBuildRestBuilddeployprojectPost'][0])
    {
        $request = $this->environmentBuildRestBuilddeployprojectPostRequest($envName, $nodeid, $projectid, $delay, $update, $isSequential, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentBuildRestBuilddeployprojectPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  int $delay (optional)
     * @param  bool $update (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestBuilddeployprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestBuilddeployprojectPostAsync($envName, $nodeid, $projectid, $delay = null, $update = null, $isSequential = null, string $contentType = self::contentTypes['environmentBuildRestBuilddeployprojectPost'][0])
    {
        return $this->environmentBuildRestBuilddeployprojectPostAsyncWithHttpInfo($envName, $nodeid, $projectid, $delay, $update, $isSequential, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentBuildRestBuilddeployprojectPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  int $delay (optional)
     * @param  bool $update (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestBuilddeployprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestBuilddeployprojectPostAsyncWithHttpInfo($envName, $nodeid, $projectid, $delay = null, $update = null, $isSequential = null, string $contentType = self::contentTypes['environmentBuildRestBuilddeployprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentBuildRestBuilddeployprojectPostRequest($envName, $nodeid, $projectid, $delay, $update, $isSequential, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentBuildRestBuilddeployprojectPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  int $delay (optional)
     * @param  bool $update (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestBuilddeployprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentBuildRestBuilddeployprojectPostRequest($envName, $nodeid, $projectid, $delay = null, $update = null, $isSequential = null, string $contentType = self::contentTypes['environmentBuildRestBuilddeployprojectPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentBuildRestBuilddeployprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling BuildServiceApi.environmentBuildRestBuilddeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling BuildServiceApi.environmentBuildRestBuilddeployprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeid' is set
        if ($nodeid === null || (is_array($nodeid) && count($nodeid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeid when calling environmentBuildRestBuilddeployprojectPost'
            );
        }
        if ($nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling BuildServiceApi.environmentBuildRestBuilddeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling BuildServiceApi.environmentBuildRestBuilddeployprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'projectid' is set
        if ($projectid === null || (is_array($projectid) && count($projectid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectid when calling environmentBuildRestBuilddeployprojectPost'
            );
        }
        if ($projectid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$projectid" when calling BuildServiceApi.environmentBuildRestBuilddeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($projectid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$projectid" when calling BuildServiceApi.environmentBuildRestBuilddeployprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling BuildServiceApi.environmentBuildRestBuilddeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling BuildServiceApi.environmentBuildRestBuilddeployprojectPost, must be bigger than or equal to -2147483648.');
        }
        



        $resourcePath = '/environment/build/rest/builddeployproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($update !== null) {
            $formParams['update'] = ObjectSerializer::toFormValue($update);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }
        // form params
        if ($projectid !== null) {
            $formParams['projectid'] = ObjectSerializer::toFormValue($projectid);
        }
        // form params
        if ($isSequential !== null) {
            $formParams['isSequential'] = ObjectSerializer::toFormValue($isSequential);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentBuildRestBuildprojectPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeid nodeid (required)
     * @param  int $projectid projectid (required)
     * @param  bool $async async (optional)
     * @param  bool $skipPublish skipPublish (optional)
     * @param  bool $update update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestBuildprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentBuildRestBuildprojectPost($envName, $nodeid, $projectid, $async = null, $skipPublish = null, $update = null, string $contentType = self::contentTypes['environmentBuildRestBuildprojectPost'][0])
    {
        list($response) = $this->environmentBuildRestBuildprojectPostWithHttpInfo($envName, $nodeid, $projectid, $async, $skipPublish, $update, $contentType);
        return $response;
    }

    /**
     * Operation environmentBuildRestBuildprojectPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  bool $async (optional)
     * @param  bool $skipPublish (optional)
     * @param  bool $update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestBuildprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentBuildRestBuildprojectPostWithHttpInfo($envName, $nodeid, $projectid, $async = null, $skipPublish = null, $update = null, string $contentType = self::contentTypes['environmentBuildRestBuildprojectPost'][0])
    {
        $request = $this->environmentBuildRestBuildprojectPostRequest($envName, $nodeid, $projectid, $async, $skipPublish, $update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentBuildRestBuildprojectPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  bool $async (optional)
     * @param  bool $skipPublish (optional)
     * @param  bool $update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestBuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestBuildprojectPostAsync($envName, $nodeid, $projectid, $async = null, $skipPublish = null, $update = null, string $contentType = self::contentTypes['environmentBuildRestBuildprojectPost'][0])
    {
        return $this->environmentBuildRestBuildprojectPostAsyncWithHttpInfo($envName, $nodeid, $projectid, $async, $skipPublish, $update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentBuildRestBuildprojectPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  bool $async (optional)
     * @param  bool $skipPublish (optional)
     * @param  bool $update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestBuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestBuildprojectPostAsyncWithHttpInfo($envName, $nodeid, $projectid, $async = null, $skipPublish = null, $update = null, string $contentType = self::contentTypes['environmentBuildRestBuildprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentBuildRestBuildprojectPostRequest($envName, $nodeid, $projectid, $async, $skipPublish, $update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentBuildRestBuildprojectPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  bool $async (optional)
     * @param  bool $skipPublish (optional)
     * @param  bool $update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestBuildprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentBuildRestBuildprojectPostRequest($envName, $nodeid, $projectid, $async = null, $skipPublish = null, $update = null, string $contentType = self::contentTypes['environmentBuildRestBuildprojectPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentBuildRestBuildprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling BuildServiceApi.environmentBuildRestBuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling BuildServiceApi.environmentBuildRestBuildprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeid' is set
        if ($nodeid === null || (is_array($nodeid) && count($nodeid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeid when calling environmentBuildRestBuildprojectPost'
            );
        }
        if ($nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling BuildServiceApi.environmentBuildRestBuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling BuildServiceApi.environmentBuildRestBuildprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'projectid' is set
        if ($projectid === null || (is_array($projectid) && count($projectid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectid when calling environmentBuildRestBuildprojectPost'
            );
        }
        if ($projectid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$projectid" when calling BuildServiceApi.environmentBuildRestBuildprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($projectid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$projectid" when calling BuildServiceApi.environmentBuildRestBuildprojectPost, must be bigger than or equal to -2147483648.');
        }
        




        $resourcePath = '/environment/build/rest/buildproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($async !== null) {
            $formParams['async'] = ObjectSerializer::toFormValue($async);
        }
        // form params
        if ($skipPublish !== null) {
            $formParams['skipPublish'] = ObjectSerializer::toFormValue($skipPublish);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($update !== null) {
            $formParams['update'] = ObjectSerializer::toFormValue($update);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }
        // form params
        if ($projectid !== null) {
            $formParams['projectid'] = ObjectSerializer::toFormValue($projectid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentBuildRestDeployprojectPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeid nodeid (required)
     * @param  int $projectid projectid (required)
     * @param  int $delay delay (optional)
     * @param  bool $isSequential isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestDeployprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentBuildRestDeployprojectPost($envName, $nodeid, $projectid, $delay = null, $isSequential = null, string $contentType = self::contentTypes['environmentBuildRestDeployprojectPost'][0])
    {
        list($response) = $this->environmentBuildRestDeployprojectPostWithHttpInfo($envName, $nodeid, $projectid, $delay, $isSequential, $contentType);
        return $response;
    }

    /**
     * Operation environmentBuildRestDeployprojectPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  int $delay (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestDeployprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentBuildRestDeployprojectPostWithHttpInfo($envName, $nodeid, $projectid, $delay = null, $isSequential = null, string $contentType = self::contentTypes['environmentBuildRestDeployprojectPost'][0])
    {
        $request = $this->environmentBuildRestDeployprojectPostRequest($envName, $nodeid, $projectid, $delay, $isSequential, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentBuildRestDeployprojectPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  int $delay (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestDeployprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestDeployprojectPostAsync($envName, $nodeid, $projectid, $delay = null, $isSequential = null, string $contentType = self::contentTypes['environmentBuildRestDeployprojectPost'][0])
    {
        return $this->environmentBuildRestDeployprojectPostAsyncWithHttpInfo($envName, $nodeid, $projectid, $delay, $isSequential, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentBuildRestDeployprojectPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  int $delay (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestDeployprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestDeployprojectPostAsyncWithHttpInfo($envName, $nodeid, $projectid, $delay = null, $isSequential = null, string $contentType = self::contentTypes['environmentBuildRestDeployprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentBuildRestDeployprojectPostRequest($envName, $nodeid, $projectid, $delay, $isSequential, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentBuildRestDeployprojectPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  int $delay (optional)
     * @param  bool $isSequential (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestDeployprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentBuildRestDeployprojectPostRequest($envName, $nodeid, $projectid, $delay = null, $isSequential = null, string $contentType = self::contentTypes['environmentBuildRestDeployprojectPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentBuildRestDeployprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling BuildServiceApi.environmentBuildRestDeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling BuildServiceApi.environmentBuildRestDeployprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeid' is set
        if ($nodeid === null || (is_array($nodeid) && count($nodeid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeid when calling environmentBuildRestDeployprojectPost'
            );
        }
        if ($nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling BuildServiceApi.environmentBuildRestDeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling BuildServiceApi.environmentBuildRestDeployprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'projectid' is set
        if ($projectid === null || (is_array($projectid) && count($projectid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectid when calling environmentBuildRestDeployprojectPost'
            );
        }
        if ($projectid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$projectid" when calling BuildServiceApi.environmentBuildRestDeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($projectid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$projectid" when calling BuildServiceApi.environmentBuildRestDeployprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling BuildServiceApi.environmentBuildRestDeployprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling BuildServiceApi.environmentBuildRestDeployprojectPost, must be bigger than or equal to -2147483648.');
        }
        


        $resourcePath = '/environment/build/rest/deployproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }
        // form params
        if ($projectid !== null) {
            $formParams['projectid'] = ObjectSerializer::toFormValue($projectid);
        }
        // form params
        if ($isSequential !== null) {
            $formParams['isSequential'] = ObjectSerializer::toFormValue($isSequential);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentBuildRestEditprojectPost
     *
     * @param  string $type type (required)
     * @param  string $path path (required)
     * @param  string $envName envName (required)
     * @param  string $name name (required)
     * @param  int $nodeid nodeid (required)
     * @param  int $projectid projectid (required)
     * @param  string $targetNodeGroup targetNodeGroup (optional)
     * @param  int $keyId keyId (optional)
     * @param  string $login login (optional)
     * @param  string $env env (optional)
     * @param  string $branch branch (optional)
     * @param  bool $autoupdate autoupdate (optional)
     * @param  string $password password (optional)
     * @param  int $delay delay (optional)
     * @param  bool $autoResolveConflict autoResolveConflict (optional)
     * @param  string $context context (optional)
     * @param  string $repoHash repoHash (optional)
     * @param  string $interval interval (optional)
     * @param  string $workDir workDir (optional)
     * @param  string $hooks hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentBuildRestEditprojectPost($type, $path, $envName, $name, $nodeid, $projectid, $targetNodeGroup = null, $keyId = null, $login = null, $env = null, $branch = null, $autoupdate = null, $password = null, $delay = null, $autoResolveConflict = null, $context = null, $repoHash = null, $interval = null, $workDir = null, $hooks = null, string $contentType = self::contentTypes['environmentBuildRestEditprojectPost'][0])
    {
        list($response) = $this->environmentBuildRestEditprojectPostWithHttpInfo($type, $path, $envName, $name, $nodeid, $projectid, $targetNodeGroup, $keyId, $login, $env, $branch, $autoupdate, $password, $delay, $autoResolveConflict, $context, $repoHash, $interval, $workDir, $hooks, $contentType);
        return $response;
    }

    /**
     * Operation environmentBuildRestEditprojectPostWithHttpInfo
     *
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  string $targetNodeGroup (optional)
     * @param  int $keyId (optional)
     * @param  string $login (optional)
     * @param  string $env (optional)
     * @param  string $branch (optional)
     * @param  bool $autoupdate (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  bool $autoResolveConflict (optional)
     * @param  string $context (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentBuildRestEditprojectPostWithHttpInfo($type, $path, $envName, $name, $nodeid, $projectid, $targetNodeGroup = null, $keyId = null, $login = null, $env = null, $branch = null, $autoupdate = null, $password = null, $delay = null, $autoResolveConflict = null, $context = null, $repoHash = null, $interval = null, $workDir = null, $hooks = null, string $contentType = self::contentTypes['environmentBuildRestEditprojectPost'][0])
    {
        $request = $this->environmentBuildRestEditprojectPostRequest($type, $path, $envName, $name, $nodeid, $projectid, $targetNodeGroup, $keyId, $login, $env, $branch, $autoupdate, $password, $delay, $autoResolveConflict, $context, $repoHash, $interval, $workDir, $hooks, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentBuildRestEditprojectPostAsync
     *
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  string $targetNodeGroup (optional)
     * @param  int $keyId (optional)
     * @param  string $login (optional)
     * @param  string $env (optional)
     * @param  string $branch (optional)
     * @param  bool $autoupdate (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  bool $autoResolveConflict (optional)
     * @param  string $context (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestEditprojectPostAsync($type, $path, $envName, $name, $nodeid, $projectid, $targetNodeGroup = null, $keyId = null, $login = null, $env = null, $branch = null, $autoupdate = null, $password = null, $delay = null, $autoResolveConflict = null, $context = null, $repoHash = null, $interval = null, $workDir = null, $hooks = null, string $contentType = self::contentTypes['environmentBuildRestEditprojectPost'][0])
    {
        return $this->environmentBuildRestEditprojectPostAsyncWithHttpInfo($type, $path, $envName, $name, $nodeid, $projectid, $targetNodeGroup, $keyId, $login, $env, $branch, $autoupdate, $password, $delay, $autoResolveConflict, $context, $repoHash, $interval, $workDir, $hooks, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentBuildRestEditprojectPostAsyncWithHttpInfo
     *
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  string $targetNodeGroup (optional)
     * @param  int $keyId (optional)
     * @param  string $login (optional)
     * @param  string $env (optional)
     * @param  string $branch (optional)
     * @param  bool $autoupdate (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  bool $autoResolveConflict (optional)
     * @param  string $context (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestEditprojectPostAsyncWithHttpInfo($type, $path, $envName, $name, $nodeid, $projectid, $targetNodeGroup = null, $keyId = null, $login = null, $env = null, $branch = null, $autoupdate = null, $password = null, $delay = null, $autoResolveConflict = null, $context = null, $repoHash = null, $interval = null, $workDir = null, $hooks = null, string $contentType = self::contentTypes['environmentBuildRestEditprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentBuildRestEditprojectPostRequest($type, $path, $envName, $name, $nodeid, $projectid, $targetNodeGroup, $keyId, $login, $env, $branch, $autoupdate, $password, $delay, $autoResolveConflict, $context, $repoHash, $interval, $workDir, $hooks, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentBuildRestEditprojectPost'
     *
     * @param  string $type (required)
     * @param  string $path (required)
     * @param  string $envName (required)
     * @param  string $name (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  string $targetNodeGroup (optional)
     * @param  int $keyId (optional)
     * @param  string $login (optional)
     * @param  string $env (optional)
     * @param  string $branch (optional)
     * @param  bool $autoupdate (optional)
     * @param  string $password (optional)
     * @param  int $delay (optional)
     * @param  bool $autoResolveConflict (optional)
     * @param  string $context (optional)
     * @param  string $repoHash (optional)
     * @param  string $interval (optional)
     * @param  string $workDir (optional)
     * @param  string $hooks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestEditprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentBuildRestEditprojectPostRequest($type, $path, $envName, $name, $nodeid, $projectid, $targetNodeGroup = null, $keyId = null, $login = null, $env = null, $branch = null, $autoupdate = null, $password = null, $delay = null, $autoResolveConflict = null, $context = null, $repoHash = null, $interval = null, $workDir = null, $hooks = null, string $contentType = self::contentTypes['environmentBuildRestEditprojectPost'][0])
    {

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling environmentBuildRestEditprojectPost'
            );
        }
        if (strlen($type) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$type" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $type)) {
            throw new \InvalidArgumentException("invalid value for \"type\" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling environmentBuildRestEditprojectPost'
            );
        }
        if (strlen($path) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$path" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $path)) {
            throw new \InvalidArgumentException("invalid value for \"path\" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentBuildRestEditprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling environmentBuildRestEditprojectPost'
            );
        }
        if (strlen($name) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeid' is set
        if ($nodeid === null || (is_array($nodeid) && count($nodeid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeid when calling environmentBuildRestEditprojectPost'
            );
        }
        if ($nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'projectid' is set
        if ($projectid === null || (is_array($projectid) && count($projectid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectid when calling environmentBuildRestEditprojectPost'
            );
        }
        if ($projectid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$projectid" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($projectid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$projectid" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($targetNodeGroup !== null && strlen($targetNodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$targetNodeGroup" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($targetNodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $targetNodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"targetNodeGroup\" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($keyId !== null && $keyId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$keyId" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($keyId !== null && $keyId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$keyId" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($login !== null && strlen($login) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$login" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($login !== null && !preg_match("/(.*){0,2147483647}/", $login)) {
            throw new \InvalidArgumentException("invalid value for \"login\" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($env !== null && strlen($env) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$env" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($env !== null && !preg_match("/(.*){0,2147483647}/", $env)) {
            throw new \InvalidArgumentException("invalid value for \"env\" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($branch !== null && strlen($branch) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$branch" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($branch !== null && !preg_match("/(.*){0,2147483647}/", $branch)) {
            throw new \InvalidArgumentException("invalid value for \"branch\" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($delay !== null && $delay > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($delay !== null && $delay < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$delay" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be bigger than or equal to -2147483648.');
        }
        

        if ($context !== null && strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($context !== null && !preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($repoHash !== null && strlen($repoHash) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$repoHash" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($repoHash !== null && !preg_match("/(.*){0,2147483647}/", $repoHash)) {
            throw new \InvalidArgumentException("invalid value for \"repoHash\" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($interval !== null && strlen($interval) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$interval" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($interval !== null && !preg_match("/(.*){0,2147483647}/", $interval)) {
            throw new \InvalidArgumentException("invalid value for \"interval\" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($workDir !== null && strlen($workDir) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$workDir" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($workDir !== null && !preg_match("/(.*){0,2147483647}/", $workDir)) {
            throw new \InvalidArgumentException("invalid value for \"workDir\" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($hooks !== null && strlen($hooks) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$hooks" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($hooks !== null && !preg_match("/(.*){0,2147483647}/", $hooks)) {
            throw new \InvalidArgumentException("invalid value for \"hooks\" when calling BuildServiceApi.environmentBuildRestEditprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/build/rest/editproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($targetNodeGroup !== null) {
            $formParams['targetNodeGroup'] = ObjectSerializer::toFormValue($targetNodeGroup);
        }
        // form params
        if ($keyId !== null) {
            $formParams['keyId'] = ObjectSerializer::toFormValue($keyId);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($login !== null) {
            $formParams['login'] = ObjectSerializer::toFormValue($login);
        }
        // form params
        if ($env !== null) {
            $formParams['env'] = ObjectSerializer::toFormValue($env);
        }
        // form params
        if ($branch !== null) {
            $formParams['branch'] = ObjectSerializer::toFormValue($branch);
        }
        // form params
        if ($autoupdate !== null) {
            $formParams['autoupdate'] = ObjectSerializer::toFormValue($autoupdate);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($delay !== null) {
            $formParams['delay'] = ObjectSerializer::toFormValue($delay);
        }
        // form params
        if ($autoResolveConflict !== null) {
            $formParams['autoResolveConflict'] = ObjectSerializer::toFormValue($autoResolveConflict);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($repoHash !== null) {
            $formParams['repoHash'] = ObjectSerializer::toFormValue($repoHash);
        }
        // form params
        if ($interval !== null) {
            $formParams['interval'] = ObjectSerializer::toFormValue($interval);
        }
        // form params
        if ($workDir !== null) {
            $formParams['workDir'] = ObjectSerializer::toFormValue($workDir);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }
        // form params
        if ($projectid !== null) {
            $formParams['projectid'] = ObjectSerializer::toFormValue($projectid);
        }
        // form params
        if ($hooks !== null) {
            $formParams['hooks'] = ObjectSerializer::toFormValue($hooks);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentBuildRestGetprojectinfoPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeid nodeid (required)
     * @param  string $projectName projectName (optional)
     * @param  int $projectid projectid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestGetprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse
     */
    public function environmentBuildRestGetprojectinfoPost($envName, $nodeid, $projectName = null, $projectid = null, string $contentType = self::contentTypes['environmentBuildRestGetprojectinfoPost'][0])
    {
        list($response) = $this->environmentBuildRestGetprojectinfoPostWithHttpInfo($envName, $nodeid, $projectName, $projectid, $contentType);
        return $response;
    }

    /**
     * Operation environmentBuildRestGetprojectinfoPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  string $projectName (optional)
     * @param  int $projectid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestGetprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentBuildRestGetprojectinfoPostWithHttpInfo($envName, $nodeid, $projectName = null, $projectid = null, string $contentType = self::contentTypes['environmentBuildRestGetprojectinfoPost'][0])
    {
        $request = $this->environmentBuildRestGetprojectinfoPostRequest($envName, $nodeid, $projectName, $projectid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentBuildRestGetprojectinfoPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  string $projectName (optional)
     * @param  int $projectid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestGetprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestGetprojectinfoPostAsync($envName, $nodeid, $projectName = null, $projectid = null, string $contentType = self::contentTypes['environmentBuildRestGetprojectinfoPost'][0])
    {
        return $this->environmentBuildRestGetprojectinfoPostAsyncWithHttpInfo($envName, $nodeid, $projectName, $projectid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentBuildRestGetprojectinfoPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  string $projectName (optional)
     * @param  int $projectid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestGetprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestGetprojectinfoPostAsyncWithHttpInfo($envName, $nodeid, $projectName = null, $projectid = null, string $contentType = self::contentTypes['environmentBuildRestGetprojectinfoPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponse';
        $request = $this->environmentBuildRestGetprojectinfoPostRequest($envName, $nodeid, $projectName, $projectid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentBuildRestGetprojectinfoPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  string $projectName (optional)
     * @param  int $projectid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestGetprojectinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentBuildRestGetprojectinfoPostRequest($envName, $nodeid, $projectName = null, $projectid = null, string $contentType = self::contentTypes['environmentBuildRestGetprojectinfoPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentBuildRestGetprojectinfoPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling BuildServiceApi.environmentBuildRestGetprojectinfoPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling BuildServiceApi.environmentBuildRestGetprojectinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeid' is set
        if ($nodeid === null || (is_array($nodeid) && count($nodeid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeid when calling environmentBuildRestGetprojectinfoPost'
            );
        }
        if ($nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling BuildServiceApi.environmentBuildRestGetprojectinfoPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling BuildServiceApi.environmentBuildRestGetprojectinfoPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($projectName !== null && strlen($projectName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$projectName" when calling BuildServiceApi.environmentBuildRestGetprojectinfoPost, must be smaller than or equal to 2147483647.');
        }
        if ($projectName !== null && !preg_match("/(.*){0,2147483647}/", $projectName)) {
            throw new \InvalidArgumentException("invalid value for \"projectName\" when calling BuildServiceApi.environmentBuildRestGetprojectinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($projectid !== null && $projectid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$projectid" when calling BuildServiceApi.environmentBuildRestGetprojectinfoPost, must be smaller than or equal to 2147483647.');
        }
        if ($projectid !== null && $projectid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$projectid" when calling BuildServiceApi.environmentBuildRestGetprojectinfoPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/build/rest/getprojectinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($projectName !== null) {
            $formParams['projectName'] = ObjectSerializer::toFormValue($projectName);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }
        // form params
        if ($projectid !== null) {
            $formParams['projectid'] = ObjectSerializer::toFormValue($projectid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentBuildRestGetprojectsPost
     *
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  int $nodeId nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestGetprojectsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponses
     */
    public function environmentBuildRestGetprojectsPost($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentBuildRestGetprojectsPost'][0])
    {
        list($response) = $this->environmentBuildRestGetprojectsPostWithHttpInfo($envName, $nodeGroup, $nodeId, $contentType);
        return $response;
    }

    /**
     * Operation environmentBuildRestGetprojectsPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestGetprojectsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentBuildRestGetprojectsPostWithHttpInfo($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentBuildRestGetprojectsPost'][0])
    {
        $request = $this->environmentBuildRestGetprojectsPostRequest($envName, $nodeGroup, $nodeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentBuildRestGetprojectsPostAsync
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestGetprojectsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestGetprojectsPostAsync($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentBuildRestGetprojectsPost'][0])
    {
        return $this->environmentBuildRestGetprojectsPostAsyncWithHttpInfo($envName, $nodeGroup, $nodeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentBuildRestGetprojectsPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestGetprojectsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestGetprojectsPostAsyncWithHttpInfo($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentBuildRestGetprojectsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseBuildProjectResponses';
        $request = $this->environmentBuildRestGetprojectsPostRequest($envName, $nodeGroup, $nodeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentBuildRestGetprojectsPost'
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (optional)
     * @param  int $nodeId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestGetprojectsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentBuildRestGetprojectsPostRequest($envName, $nodeGroup = null, $nodeId = null, string $contentType = self::contentTypes['environmentBuildRestGetprojectsPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentBuildRestGetprojectsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling BuildServiceApi.environmentBuildRestGetprojectsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling BuildServiceApi.environmentBuildRestGetprojectsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling BuildServiceApi.environmentBuildRestGetprojectsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling BuildServiceApi.environmentBuildRestGetprojectsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeId !== null && $nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling BuildServiceApi.environmentBuildRestGetprojectsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId !== null && $nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling BuildServiceApi.environmentBuildRestGetprojectsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/build/rest/getprojects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentBuildRestRemoveprojectPost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeid nodeid (required)
     * @param  int $projectid projectid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestRemoveprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentBuildRestRemoveprojectPost($envName, $nodeid, $projectid, string $contentType = self::contentTypes['environmentBuildRestRemoveprojectPost'][0])
    {
        list($response) = $this->environmentBuildRestRemoveprojectPostWithHttpInfo($envName, $nodeid, $projectid, $contentType);
        return $response;
    }

    /**
     * Operation environmentBuildRestRemoveprojectPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestRemoveprojectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentBuildRestRemoveprojectPostWithHttpInfo($envName, $nodeid, $projectid, string $contentType = self::contentTypes['environmentBuildRestRemoveprojectPost'][0])
    {
        $request = $this->environmentBuildRestRemoveprojectPostRequest($envName, $nodeid, $projectid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentBuildRestRemoveprojectPostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestRemoveprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestRemoveprojectPostAsync($envName, $nodeid, $projectid, string $contentType = self::contentTypes['environmentBuildRestRemoveprojectPost'][0])
    {
        return $this->environmentBuildRestRemoveprojectPostAsyncWithHttpInfo($envName, $nodeid, $projectid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentBuildRestRemoveprojectPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestRemoveprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestRemoveprojectPostAsyncWithHttpInfo($envName, $nodeid, $projectid, string $contentType = self::contentTypes['environmentBuildRestRemoveprojectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentBuildRestRemoveprojectPostRequest($envName, $nodeid, $projectid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentBuildRestRemoveprojectPost'
     *
     * @param  string $envName (required)
     * @param  int $nodeid (required)
     * @param  int $projectid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestRemoveprojectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentBuildRestRemoveprojectPostRequest($envName, $nodeid, $projectid, string $contentType = self::contentTypes['environmentBuildRestRemoveprojectPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentBuildRestRemoveprojectPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling BuildServiceApi.environmentBuildRestRemoveprojectPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling BuildServiceApi.environmentBuildRestRemoveprojectPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeid' is set
        if ($nodeid === null || (is_array($nodeid) && count($nodeid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeid when calling environmentBuildRestRemoveprojectPost'
            );
        }
        if ($nodeid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling BuildServiceApi.environmentBuildRestRemoveprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeid" when calling BuildServiceApi.environmentBuildRestRemoveprojectPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'projectid' is set
        if ($projectid === null || (is_array($projectid) && count($projectid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectid when calling environmentBuildRestRemoveprojectPost'
            );
        }
        if ($projectid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$projectid" when calling BuildServiceApi.environmentBuildRestRemoveprojectPost, must be smaller than or equal to 2147483647.');
        }
        if ($projectid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$projectid" when calling BuildServiceApi.environmentBuildRestRemoveprojectPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/build/rest/removeproject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeid !== null) {
            $formParams['nodeid'] = ObjectSerializer::toFormValue($nodeid);
        }
        // form params
        if ($projectid !== null) {
            $formParams['projectid'] = ObjectSerializer::toFormValue($projectid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentBuildRestUpdatePost
     *
     * @param  string $envName envName (required)
     * @param  int $nodeId nodeId (required)
     * @param  string $context context (optional)
     * @param  int $projectId projectId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentBuildRestUpdatePost($envName, $nodeId, $context = null, $projectId = null, string $contentType = self::contentTypes['environmentBuildRestUpdatePost'][0])
    {
        list($response) = $this->environmentBuildRestUpdatePostWithHttpInfo($envName, $nodeId, $context, $projectId, $contentType);
        return $response;
    }

    /**
     * Operation environmentBuildRestUpdatePostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $context (optional)
     * @param  int $projectId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentBuildRestUpdatePostWithHttpInfo($envName, $nodeId, $context = null, $projectId = null, string $contentType = self::contentTypes['environmentBuildRestUpdatePost'][0])
    {
        $request = $this->environmentBuildRestUpdatePostRequest($envName, $nodeId, $context, $projectId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentBuildRestUpdatePostAsync
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $context (optional)
     * @param  int $projectId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestUpdatePostAsync($envName, $nodeId, $context = null, $projectId = null, string $contentType = self::contentTypes['environmentBuildRestUpdatePost'][0])
    {
        return $this->environmentBuildRestUpdatePostAsyncWithHttpInfo($envName, $nodeId, $context, $projectId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentBuildRestUpdatePostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $context (optional)
     * @param  int $projectId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentBuildRestUpdatePostAsyncWithHttpInfo($envName, $nodeId, $context = null, $projectId = null, string $contentType = self::contentTypes['environmentBuildRestUpdatePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentBuildRestUpdatePostRequest($envName, $nodeId, $context, $projectId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentBuildRestUpdatePost'
     *
     * @param  string $envName (required)
     * @param  int $nodeId (required)
     * @param  string $context (optional)
     * @param  int $projectId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentBuildRestUpdatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentBuildRestUpdatePostRequest($envName, $nodeId, $context = null, $projectId = null, string $contentType = self::contentTypes['environmentBuildRestUpdatePost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentBuildRestUpdatePost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling BuildServiceApi.environmentBuildRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling BuildServiceApi.environmentBuildRestUpdatePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null || (is_array($nodeId) && count($nodeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeId when calling environmentBuildRestUpdatePost'
            );
        }
        if ($nodeId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling BuildServiceApi.environmentBuildRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$nodeId" when calling BuildServiceApi.environmentBuildRestUpdatePost, must be bigger than or equal to -2147483648.');
        }
        
        if ($context !== null && strlen($context) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$context" when calling BuildServiceApi.environmentBuildRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if ($context !== null && !preg_match("/(.*){0,2147483647}/", $context)) {
            throw new \InvalidArgumentException("invalid value for \"context\" when calling BuildServiceApi.environmentBuildRestUpdatePost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($projectId !== null && $projectId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$projectId" when calling BuildServiceApi.environmentBuildRestUpdatePost, must be smaller than or equal to 2147483647.');
        }
        if ($projectId !== null && $projectId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$projectId" when calling BuildServiceApi.environmentBuildRestUpdatePost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/build/rest/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($context !== null) {
            $formParams['context'] = ObjectSerializer::toFormValue($context);
        }
        // form params
        if ($nodeId !== null) {
            $formParams['nodeId'] = ObjectSerializer::toFormValue($nodeId);
        }
        // form params
        if ($projectId !== null) {
            $formParams['projectId'] = ObjectSerializer::toFormValue($projectId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
