<?php
/**
 * AppServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AppServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AppServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'marketplaceAppRestAddappPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceAppRestDeleteappPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceAppRestEditappPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceAppRestGetaddonlistPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceAppRestGetappinfoPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceAppRestGetcategoriesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceAppRestGetchecksumPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceAppRestGetlistPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceAppRestInstallPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceAppRestInstalladdonPost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation marketplaceAppRestAddappPost
     *
     * @param  string $manifest manifest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestAddappPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAddAppResponse
     */
    public function marketplaceAppRestAddappPost($manifest, string $contentType = self::contentTypes['marketplaceAppRestAddappPost'][0])
    {
        list($response) = $this->marketplaceAppRestAddappPostWithHttpInfo($manifest, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceAppRestAddappPostWithHttpInfo
     *
     * @param  string $manifest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestAddappPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAddAppResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceAppRestAddappPostWithHttpInfo($manifest, string $contentType = self::contentTypes['marketplaceAppRestAddappPost'][0])
    {
        $request = $this->marketplaceAppRestAddappPostRequest($manifest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAddAppResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAddAppResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAddAppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAddAppResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAddAppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceAppRestAddappPostAsync
     *
     * @param  string $manifest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestAddappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestAddappPostAsync($manifest, string $contentType = self::contentTypes['marketplaceAppRestAddappPost'][0])
    {
        return $this->marketplaceAppRestAddappPostAsyncWithHttpInfo($manifest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceAppRestAddappPostAsyncWithHttpInfo
     *
     * @param  string $manifest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestAddappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestAddappPostAsyncWithHttpInfo($manifest, string $contentType = self::contentTypes['marketplaceAppRestAddappPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAddAppResponse';
        $request = $this->marketplaceAppRestAddappPostRequest($manifest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceAppRestAddappPost'
     *
     * @param  string $manifest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestAddappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceAppRestAddappPostRequest($manifest, string $contentType = self::contentTypes['marketplaceAppRestAddappPost'][0])
    {

        // verify the required parameter 'manifest' is set
        if ($manifest === null || (is_array($manifest) && count($manifest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manifest when calling marketplaceAppRestAddappPost'
            );
        }
        if (strlen($manifest) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$manifest" when calling AppServiceApi.marketplaceAppRestAddappPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $manifest)) {
            throw new \InvalidArgumentException("invalid value for \"manifest\" when calling AppServiceApi.marketplaceAppRestAddappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/marketplace/app/rest/addapp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($manifest !== null) {
            $formParams['manifest'] = ObjectSerializer::toFormValue($manifest);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceAppRestDeleteappPost
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestDeleteappPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse
     */
    public function marketplaceAppRestDeleteappPost($id, string $contentType = self::contentTypes['marketplaceAppRestDeleteappPost'][0])
    {
        list($response) = $this->marketplaceAppRestDeleteappPostWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceAppRestDeleteappPostWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestDeleteappPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceAppRestDeleteappPostWithHttpInfo($id, string $contentType = self::contentTypes['marketplaceAppRestDeleteappPost'][0])
    {
        $request = $this->marketplaceAppRestDeleteappPostRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceAppRestDeleteappPostAsync
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestDeleteappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestDeleteappPostAsync($id, string $contentType = self::contentTypes['marketplaceAppRestDeleteappPost'][0])
    {
        return $this->marketplaceAppRestDeleteappPostAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceAppRestDeleteappPostAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestDeleteappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestDeleteappPostAsyncWithHttpInfo($id, string $contentType = self::contentTypes['marketplaceAppRestDeleteappPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse';
        $request = $this->marketplaceAppRestDeleteappPostRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceAppRestDeleteappPost'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestDeleteappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceAppRestDeleteappPostRequest($id, string $contentType = self::contentTypes['marketplaceAppRestDeleteappPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling marketplaceAppRestDeleteappPost'
            );
        }
        if (strlen($id) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling AppServiceApi.marketplaceAppRestDeleteappPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling AppServiceApi.marketplaceAppRestDeleteappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/marketplace/app/rest/deleteapp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceAppRestEditappPost
     *
     * @param  string $manifest manifest (required)
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestEditappPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse
     */
    public function marketplaceAppRestEditappPost($manifest, $id, string $contentType = self::contentTypes['marketplaceAppRestEditappPost'][0])
    {
        list($response) = $this->marketplaceAppRestEditappPostWithHttpInfo($manifest, $id, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceAppRestEditappPostWithHttpInfo
     *
     * @param  string $manifest (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestEditappPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceAppRestEditappPostWithHttpInfo($manifest, $id, string $contentType = self::contentTypes['marketplaceAppRestEditappPost'][0])
    {
        $request = $this->marketplaceAppRestEditappPostRequest($manifest, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceAppRestEditappPostAsync
     *
     * @param  string $manifest (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestEditappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestEditappPostAsync($manifest, $id, string $contentType = self::contentTypes['marketplaceAppRestEditappPost'][0])
    {
        return $this->marketplaceAppRestEditappPostAsyncWithHttpInfo($manifest, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceAppRestEditappPostAsyncWithHttpInfo
     *
     * @param  string $manifest (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestEditappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestEditappPostAsyncWithHttpInfo($manifest, $id, string $contentType = self::contentTypes['marketplaceAppRestEditappPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse';
        $request = $this->marketplaceAppRestEditappPostRequest($manifest, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceAppRestEditappPost'
     *
     * @param  string $manifest (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestEditappPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceAppRestEditappPostRequest($manifest, $id, string $contentType = self::contentTypes['marketplaceAppRestEditappPost'][0])
    {

        // verify the required parameter 'manifest' is set
        if ($manifest === null || (is_array($manifest) && count($manifest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manifest when calling marketplaceAppRestEditappPost'
            );
        }
        if (strlen($manifest) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$manifest" when calling AppServiceApi.marketplaceAppRestEditappPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $manifest)) {
            throw new \InvalidArgumentException("invalid value for \"manifest\" when calling AppServiceApi.marketplaceAppRestEditappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling marketplaceAppRestEditappPost'
            );
        }
        if (strlen($id) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling AppServiceApi.marketplaceAppRestEditappPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling AppServiceApi.marketplaceAppRestEditappPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/marketplace/app/rest/editapp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($manifest !== null) {
            $formParams['manifest'] = ObjectSerializer::toFormValue($manifest);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceAppRestGetaddonlistPost
     *
     * @param  string $search search (optional)
     * @param  string $envName envName (optional)
     * @param  string $lang lang (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetaddonlistPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse
     */
    public function marketplaceAppRestGetaddonlistPost($search = null, $envName = null, $lang = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceAppRestGetaddonlistPost'][0])
    {
        list($response) = $this->marketplaceAppRestGetaddonlistPostWithHttpInfo($search, $envName, $lang, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceAppRestGetaddonlistPostWithHttpInfo
     *
     * @param  string $search (optional)
     * @param  string $envName (optional)
     * @param  string $lang (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetaddonlistPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceAppRestGetaddonlistPostWithHttpInfo($search = null, $envName = null, $lang = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceAppRestGetaddonlistPost'][0])
    {
        $request = $this->marketplaceAppRestGetaddonlistPostRequest($search, $envName, $lang, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceAppRestGetaddonlistPostAsync
     *
     * @param  string $search (optional)
     * @param  string $envName (optional)
     * @param  string $lang (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetaddonlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestGetaddonlistPostAsync($search = null, $envName = null, $lang = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceAppRestGetaddonlistPost'][0])
    {
        return $this->marketplaceAppRestGetaddonlistPostAsyncWithHttpInfo($search, $envName, $lang, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceAppRestGetaddonlistPostAsyncWithHttpInfo
     *
     * @param  string $search (optional)
     * @param  string $envName (optional)
     * @param  string $lang (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetaddonlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestGetaddonlistPostAsyncWithHttpInfo($search = null, $envName = null, $lang = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceAppRestGetaddonlistPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse';
        $request = $this->marketplaceAppRestGetaddonlistPostRequest($search, $envName, $lang, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceAppRestGetaddonlistPost'
     *
     * @param  string $search (optional)
     * @param  string $envName (optional)
     * @param  string $lang (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetaddonlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceAppRestGetaddonlistPostRequest($search = null, $envName = null, $lang = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceAppRestGetaddonlistPost'][0])
    {

        if ($search !== null && strlen($search) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$search" when calling AppServiceApi.marketplaceAppRestGetaddonlistPost, must be smaller than or equal to 2147483647.');
        }
        if ($search !== null && !preg_match("/(.*){0,2147483647}/", $search)) {
            throw new \InvalidArgumentException("invalid value for \"search\" when calling AppServiceApi.marketplaceAppRestGetaddonlistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling AppServiceApi.marketplaceAppRestGetaddonlistPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling AppServiceApi.marketplaceAppRestGetaddonlistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($lang !== null && strlen($lang) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$lang" when calling AppServiceApi.marketplaceAppRestGetaddonlistPost, must be smaller than or equal to 2147483647.');
        }
        if ($lang !== null && !preg_match("/(.*){0,2147483647}/", $lang)) {
            throw new \InvalidArgumentException("invalid value for \"lang\" when calling AppServiceApi.marketplaceAppRestGetaddonlistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling AppServiceApi.marketplaceAppRestGetaddonlistPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling AppServiceApi.marketplaceAppRestGetaddonlistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/marketplace/app/rest/getaddonlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($search !== null) {
            $formParams['search'] = ObjectSerializer::toFormValue($search);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($lang !== null) {
            $formParams['lang'] = ObjectSerializer::toFormValue($lang);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceAppRestGetappinfoPost
     *
     * @param  string $id id (required)
     * @param  string $lang lang (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetappinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse
     */
    public function marketplaceAppRestGetappinfoPost($id, $lang = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceAppRestGetappinfoPost'][0])
    {
        list($response) = $this->marketplaceAppRestGetappinfoPostWithHttpInfo($id, $lang, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceAppRestGetappinfoPostWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $lang (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetappinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceAppRestGetappinfoPostWithHttpInfo($id, $lang = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceAppRestGetappinfoPost'][0])
    {
        $request = $this->marketplaceAppRestGetappinfoPostRequest($id, $lang, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceAppRestGetappinfoPostAsync
     *
     * @param  string $id (required)
     * @param  string $lang (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetappinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestGetappinfoPostAsync($id, $lang = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceAppRestGetappinfoPost'][0])
    {
        return $this->marketplaceAppRestGetappinfoPostAsyncWithHttpInfo($id, $lang, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceAppRestGetappinfoPostAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $lang (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetappinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestGetappinfoPostAsyncWithHttpInfo($id, $lang = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceAppRestGetappinfoPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse';
        $request = $this->marketplaceAppRestGetappinfoPostRequest($id, $lang, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceAppRestGetappinfoPost'
     *
     * @param  string $id (required)
     * @param  string $lang (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetappinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceAppRestGetappinfoPostRequest($id, $lang = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceAppRestGetappinfoPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling marketplaceAppRestGetappinfoPost'
            );
        }
        if (strlen($id) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling AppServiceApi.marketplaceAppRestGetappinfoPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling AppServiceApi.marketplaceAppRestGetappinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($lang !== null && strlen($lang) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$lang" when calling AppServiceApi.marketplaceAppRestGetappinfoPost, must be smaller than or equal to 2147483647.');
        }
        if ($lang !== null && !preg_match("/(.*){0,2147483647}/", $lang)) {
            throw new \InvalidArgumentException("invalid value for \"lang\" when calling AppServiceApi.marketplaceAppRestGetappinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling AppServiceApi.marketplaceAppRestGetappinfoPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling AppServiceApi.marketplaceAppRestGetappinfoPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/marketplace/app/rest/getappinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($lang !== null) {
            $formParams['lang'] = ObjectSerializer::toFormValue($lang);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceAppRestGetcategoriesPost
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetcategoriesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse
     */
    public function marketplaceAppRestGetcategoriesPost(string $contentType = self::contentTypes['marketplaceAppRestGetcategoriesPost'][0])
    {
        list($response) = $this->marketplaceAppRestGetcategoriesPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation marketplaceAppRestGetcategoriesPostWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetcategoriesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceAppRestGetcategoriesPostWithHttpInfo(string $contentType = self::contentTypes['marketplaceAppRestGetcategoriesPost'][0])
    {
        $request = $this->marketplaceAppRestGetcategoriesPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceAppRestGetcategoriesPostAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetcategoriesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestGetcategoriesPostAsync(string $contentType = self::contentTypes['marketplaceAppRestGetcategoriesPost'][0])
    {
        return $this->marketplaceAppRestGetcategoriesPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceAppRestGetcategoriesPostAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetcategoriesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestGetcategoriesPostAsyncWithHttpInfo(string $contentType = self::contentTypes['marketplaceAppRestGetcategoriesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse';
        $request = $this->marketplaceAppRestGetcategoriesPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceAppRestGetcategoriesPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetcategoriesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceAppRestGetcategoriesPostRequest(string $contentType = self::contentTypes['marketplaceAppRestGetcategoriesPost'][0])
    {


        $resourcePath = '/marketplace/app/rest/getcategories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceAppRestGetchecksumPost
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetchecksumPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseChecksumResponse
     */
    public function marketplaceAppRestGetchecksumPost(string $contentType = self::contentTypes['marketplaceAppRestGetchecksumPost'][0])
    {
        list($response) = $this->marketplaceAppRestGetchecksumPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation marketplaceAppRestGetchecksumPostWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetchecksumPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseChecksumResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceAppRestGetchecksumPostWithHttpInfo(string $contentType = self::contentTypes['marketplaceAppRestGetchecksumPost'][0])
    {
        $request = $this->marketplaceAppRestGetchecksumPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseChecksumResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseChecksumResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseChecksumResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseChecksumResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseChecksumResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceAppRestGetchecksumPostAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetchecksumPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestGetchecksumPostAsync(string $contentType = self::contentTypes['marketplaceAppRestGetchecksumPost'][0])
    {
        return $this->marketplaceAppRestGetchecksumPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceAppRestGetchecksumPostAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetchecksumPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestGetchecksumPostAsyncWithHttpInfo(string $contentType = self::contentTypes['marketplaceAppRestGetchecksumPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseChecksumResponse';
        $request = $this->marketplaceAppRestGetchecksumPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceAppRestGetchecksumPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetchecksumPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceAppRestGetchecksumPostRequest(string $contentType = self::contentTypes['marketplaceAppRestGetchecksumPost'][0])
    {


        $resourcePath = '/marketplace/app/rest/getchecksum';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceAppRestGetlistPost
     *
     * @param  string $search search (optional)
     * @param  string $lang lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse
     */
    public function marketplaceAppRestGetlistPost($search = null, $lang = null, string $contentType = self::contentTypes['marketplaceAppRestGetlistPost'][0])
    {
        list($response) = $this->marketplaceAppRestGetlistPostWithHttpInfo($search, $lang, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceAppRestGetlistPostWithHttpInfo
     *
     * @param  string $search (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceAppRestGetlistPostWithHttpInfo($search = null, $lang = null, string $contentType = self::contentTypes['marketplaceAppRestGetlistPost'][0])
    {
        $request = $this->marketplaceAppRestGetlistPostRequest($search, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceAppRestGetlistPostAsync
     *
     * @param  string $search (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestGetlistPostAsync($search = null, $lang = null, string $contentType = self::contentTypes['marketplaceAppRestGetlistPost'][0])
    {
        return $this->marketplaceAppRestGetlistPostAsyncWithHttpInfo($search, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceAppRestGetlistPostAsyncWithHttpInfo
     *
     * @param  string $search (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestGetlistPostAsyncWithHttpInfo($search = null, $lang = null, string $contentType = self::contentTypes['marketplaceAppRestGetlistPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppsListResponse';
        $request = $this->marketplaceAppRestGetlistPostRequest($search, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceAppRestGetlistPost'
     *
     * @param  string $search (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestGetlistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceAppRestGetlistPostRequest($search = null, $lang = null, string $contentType = self::contentTypes['marketplaceAppRestGetlistPost'][0])
    {

        if ($search !== null && strlen($search) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$search" when calling AppServiceApi.marketplaceAppRestGetlistPost, must be smaller than or equal to 2147483647.');
        }
        if ($search !== null && !preg_match("/(.*){0,2147483647}/", $search)) {
            throw new \InvalidArgumentException("invalid value for \"search\" when calling AppServiceApi.marketplaceAppRestGetlistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($lang !== null && strlen($lang) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$lang" when calling AppServiceApi.marketplaceAppRestGetlistPost, must be smaller than or equal to 2147483647.');
        }
        if ($lang !== null && !preg_match("/(.*){0,2147483647}/", $lang)) {
            throw new \InvalidArgumentException("invalid value for \"lang\" when calling AppServiceApi.marketplaceAppRestGetlistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/marketplace/app/rest/getlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($search !== null) {
            $formParams['search'] = ObjectSerializer::toFormValue($search);
        }
        // form params
        if ($lang !== null) {
            $formParams['lang'] = ObjectSerializer::toFormValue($lang);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceAppRestInstallPost
     *
     * @param  string $id id (required)
     * @param  string $settings settings (optional)
     * @param  string $envGroups envGroups (optional)
     * @param  string $nodes nodes (optional)
     * @param  bool $skipEmail skipEmail (optional)
     * @param  string $envName envName (optional)
     * @param  string $displayName displayName (optional)
     * @param  bool $overrideNodes overrideNodes (optional)
     * @param  bool $skipNodeEmails skipNodeEmails (optional)
     * @param  string $region region (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestInstallPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse
     */
    public function marketplaceAppRestInstallPost($id, $settings = null, $envGroups = null, $nodes = null, $skipEmail = null, $envName = null, $displayName = null, $overrideNodes = null, $skipNodeEmails = null, $region = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceAppRestInstallPost'][0])
    {
        list($response) = $this->marketplaceAppRestInstallPostWithHttpInfo($id, $settings, $envGroups, $nodes, $skipEmail, $envName, $displayName, $overrideNodes, $skipNodeEmails, $region, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceAppRestInstallPostWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $settings (optional)
     * @param  string $envGroups (optional)
     * @param  string $nodes (optional)
     * @param  bool $skipEmail (optional)
     * @param  string $envName (optional)
     * @param  string $displayName (optional)
     * @param  bool $overrideNodes (optional)
     * @param  bool $skipNodeEmails (optional)
     * @param  string $region (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestInstallPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceAppRestInstallPostWithHttpInfo($id, $settings = null, $envGroups = null, $nodes = null, $skipEmail = null, $envName = null, $displayName = null, $overrideNodes = null, $skipNodeEmails = null, $region = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceAppRestInstallPost'][0])
    {
        $request = $this->marketplaceAppRestInstallPostRequest($id, $settings, $envGroups, $nodes, $skipEmail, $envName, $displayName, $overrideNodes, $skipNodeEmails, $region, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceAppRestInstallPostAsync
     *
     * @param  string $id (required)
     * @param  string $settings (optional)
     * @param  string $envGroups (optional)
     * @param  string $nodes (optional)
     * @param  bool $skipEmail (optional)
     * @param  string $envName (optional)
     * @param  string $displayName (optional)
     * @param  bool $overrideNodes (optional)
     * @param  bool $skipNodeEmails (optional)
     * @param  string $region (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestInstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestInstallPostAsync($id, $settings = null, $envGroups = null, $nodes = null, $skipEmail = null, $envName = null, $displayName = null, $overrideNodes = null, $skipNodeEmails = null, $region = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceAppRestInstallPost'][0])
    {
        return $this->marketplaceAppRestInstallPostAsyncWithHttpInfo($id, $settings, $envGroups, $nodes, $skipEmail, $envName, $displayName, $overrideNodes, $skipNodeEmails, $region, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceAppRestInstallPostAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $settings (optional)
     * @param  string $envGroups (optional)
     * @param  string $nodes (optional)
     * @param  bool $skipEmail (optional)
     * @param  string $envName (optional)
     * @param  string $displayName (optional)
     * @param  bool $overrideNodes (optional)
     * @param  bool $skipNodeEmails (optional)
     * @param  string $region (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestInstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestInstallPostAsyncWithHttpInfo($id, $settings = null, $envGroups = null, $nodes = null, $skipEmail = null, $envName = null, $displayName = null, $overrideNodes = null, $skipNodeEmails = null, $region = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceAppRestInstallPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse';
        $request = $this->marketplaceAppRestInstallPostRequest($id, $settings, $envGroups, $nodes, $skipEmail, $envName, $displayName, $overrideNodes, $skipNodeEmails, $region, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceAppRestInstallPost'
     *
     * @param  string $id (required)
     * @param  string $settings (optional)
     * @param  string $envGroups (optional)
     * @param  string $nodes (optional)
     * @param  bool $skipEmail (optional)
     * @param  string $envName (optional)
     * @param  string $displayName (optional)
     * @param  bool $overrideNodes (optional)
     * @param  bool $skipNodeEmails (optional)
     * @param  string $region (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestInstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceAppRestInstallPostRequest($id, $settings = null, $envGroups = null, $nodes = null, $skipEmail = null, $envName = null, $displayName = null, $overrideNodes = null, $skipNodeEmails = null, $region = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceAppRestInstallPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling marketplaceAppRestInstallPost'
            );
        }
        if (strlen($id) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling AppServiceApi.marketplaceAppRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling AppServiceApi.marketplaceAppRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($settings !== null && strlen($settings) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$settings" when calling AppServiceApi.marketplaceAppRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($settings !== null && !preg_match("/(.*){0,2147483647}/", $settings)) {
            throw new \InvalidArgumentException("invalid value for \"settings\" when calling AppServiceApi.marketplaceAppRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envGroups !== null && strlen($envGroups) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envGroups" when calling AppServiceApi.marketplaceAppRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($envGroups !== null && !preg_match("/(.*){0,2147483647}/", $envGroups)) {
            throw new \InvalidArgumentException("invalid value for \"envGroups\" when calling AppServiceApi.marketplaceAppRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodes !== null && strlen($nodes) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodes" when calling AppServiceApi.marketplaceAppRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodes !== null && !preg_match("/(.*){0,2147483647}/", $nodes)) {
            throw new \InvalidArgumentException("invalid value for \"nodes\" when calling AppServiceApi.marketplaceAppRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling AppServiceApi.marketplaceAppRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling AppServiceApi.marketplaceAppRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($displayName !== null && strlen($displayName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$displayName" when calling AppServiceApi.marketplaceAppRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($displayName !== null && !preg_match("/(.*){0,2147483647}/", $displayName)) {
            throw new \InvalidArgumentException("invalid value for \"displayName\" when calling AppServiceApi.marketplaceAppRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        


        if ($region !== null && strlen($region) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$region" when calling AppServiceApi.marketplaceAppRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($region !== null && !preg_match("/(.*){0,2147483647}/", $region)) {
            throw new \InvalidArgumentException("invalid value for \"region\" when calling AppServiceApi.marketplaceAppRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling AppServiceApi.marketplaceAppRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling AppServiceApi.marketplaceAppRestInstallPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/marketplace/app/rest/install';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($settings !== null) {
            $formParams['settings'] = ObjectSerializer::toFormValue($settings);
        }
        // form params
        if ($envGroups !== null) {
            $formParams['envGroups'] = ObjectSerializer::toFormValue($envGroups);
        }
        // form params
        if ($nodes !== null) {
            $formParams['nodes'] = ObjectSerializer::toFormValue($nodes);
        }
        // form params
        if ($skipEmail !== null) {
            $formParams['skipEmail'] = ObjectSerializer::toFormValue($skipEmail);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($displayName !== null) {
            $formParams['displayName'] = ObjectSerializer::toFormValue($displayName);
        }
        // form params
        if ($overrideNodes !== null) {
            $formParams['overrideNodes'] = ObjectSerializer::toFormValue($overrideNodes);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($skipNodeEmails !== null) {
            $formParams['skipNodeEmails'] = ObjectSerializer::toFormValue($skipNodeEmails);
        }
        // form params
        if ($region !== null) {
            $formParams['region'] = ObjectSerializer::toFormValue($region);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceAppRestInstalladdonPost
     *
     * @param  string $id id (required)
     * @param  string $settings settings (optional)
     * @param  bool $skipEmail skipEmail (optional)
     * @param  string $envName envName (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestInstalladdonPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse
     */
    public function marketplaceAppRestInstalladdonPost($id, $settings = null, $skipEmail = null, $envName = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceAppRestInstalladdonPost'][0])
    {
        list($response) = $this->marketplaceAppRestInstalladdonPostWithHttpInfo($id, $settings, $skipEmail, $envName, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceAppRestInstalladdonPostWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $settings (optional)
     * @param  bool $skipEmail (optional)
     * @param  string $envName (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestInstalladdonPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceAppRestInstalladdonPostWithHttpInfo($id, $settings = null, $skipEmail = null, $envName = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceAppRestInstalladdonPost'][0])
    {
        $request = $this->marketplaceAppRestInstalladdonPostRequest($id, $settings, $skipEmail, $envName, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceAppRestInstalladdonPostAsync
     *
     * @param  string $id (required)
     * @param  string $settings (optional)
     * @param  bool $skipEmail (optional)
     * @param  string $envName (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestInstalladdonPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestInstalladdonPostAsync($id, $settings = null, $skipEmail = null, $envName = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceAppRestInstalladdonPost'][0])
    {
        return $this->marketplaceAppRestInstalladdonPostAsyncWithHttpInfo($id, $settings, $skipEmail, $envName, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceAppRestInstalladdonPostAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $settings (optional)
     * @param  bool $skipEmail (optional)
     * @param  string $envName (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestInstalladdonPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceAppRestInstalladdonPostAsyncWithHttpInfo($id, $settings = null, $skipEmail = null, $envName = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceAppRestInstalladdonPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse';
        $request = $this->marketplaceAppRestInstalladdonPostRequest($id, $settings, $skipEmail, $envName, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceAppRestInstalladdonPost'
     *
     * @param  string $id (required)
     * @param  string $settings (optional)
     * @param  bool $skipEmail (optional)
     * @param  string $envName (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceAppRestInstalladdonPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceAppRestInstalladdonPostRequest($id, $settings = null, $skipEmail = null, $envName = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceAppRestInstalladdonPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling marketplaceAppRestInstalladdonPost'
            );
        }
        if (strlen($id) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling AppServiceApi.marketplaceAppRestInstalladdonPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling AppServiceApi.marketplaceAppRestInstalladdonPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($settings !== null && strlen($settings) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$settings" when calling AppServiceApi.marketplaceAppRestInstalladdonPost, must be smaller than or equal to 2147483647.');
        }
        if ($settings !== null && !preg_match("/(.*){0,2147483647}/", $settings)) {
            throw new \InvalidArgumentException("invalid value for \"settings\" when calling AppServiceApi.marketplaceAppRestInstalladdonPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling AppServiceApi.marketplaceAppRestInstalladdonPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling AppServiceApi.marketplaceAppRestInstalladdonPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling AppServiceApi.marketplaceAppRestInstalladdonPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling AppServiceApi.marketplaceAppRestInstalladdonPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/marketplace/app/rest/installaddon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($settings !== null) {
            $formParams['settings'] = ObjectSerializer::toFormValue($settings);
        }
        // form params
        if ($skipEmail !== null) {
            $formParams['skipEmail'] = ObjectSerializer::toFormValue($skipEmail);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
