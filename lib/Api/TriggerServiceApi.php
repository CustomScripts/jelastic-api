<?php
/**
 * TriggerServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TriggerServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TriggerServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'environmentTriggerRestAddautoscalingtriggerPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestAddloadalerttriggerPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestAddtriggerPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestAutoscalinghistoryPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestDeleteautoscalingtriggerPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestDeleteloadalerttriggerPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestDeletetriggerPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestEditautoscalingtriggerPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestEditloadalerttriggerPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestEdittriggerPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestGetautoscalingtriggersPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestGetloadalerttriggersPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestGettriggerlogsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestGettriggersPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestLoadalerthistoryPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestSetautoscalingtriggerenabledPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestSetloadalerttriggerenabledPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentTriggerRestSettriggerenabledPost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation environmentTriggerRestAddautoscalingtriggerPost
     *
     * @param  string $data data (required)
     * @param  string $envName envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentTriggerRestAddautoscalingtriggerPost($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddautoscalingtriggerPost'][0])
    {
        list($response) = $this->environmentTriggerRestAddautoscalingtriggerPostWithHttpInfo($data, $envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestAddautoscalingtriggerPostWithHttpInfo
     *
     * @param  string $data (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestAddautoscalingtriggerPostWithHttpInfo($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddautoscalingtriggerPost'][0])
    {
        $request = $this->environmentTriggerRestAddautoscalingtriggerPostRequest($data, $envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestAddautoscalingtriggerPostAsync
     *
     * @param  string $data (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestAddautoscalingtriggerPostAsync($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddautoscalingtriggerPost'][0])
    {
        return $this->environmentTriggerRestAddautoscalingtriggerPostAsyncWithHttpInfo($data, $envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestAddautoscalingtriggerPostAsyncWithHttpInfo
     *
     * @param  string $data (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestAddautoscalingtriggerPostAsyncWithHttpInfo($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddautoscalingtriggerPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentTriggerRestAddautoscalingtriggerPostRequest($data, $envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestAddautoscalingtriggerPost'
     *
     * @param  string $data (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestAddautoscalingtriggerPostRequest($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddautoscalingtriggerPost'][0])
    {

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling environmentTriggerRestAddautoscalingtriggerPost'
            );
        }
        if (strlen($data) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$data" when calling TriggerServiceApi.environmentTriggerRestAddautoscalingtriggerPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $data)) {
            throw new \InvalidArgumentException("invalid value for \"data\" when calling TriggerServiceApi.environmentTriggerRestAddautoscalingtriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestAddautoscalingtriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestAddautoscalingtriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/addautoscalingtrigger';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($data !== null) {
            $formParams['data'] = ObjectSerializer::toFormValue($data);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestAddloadalerttriggerPost
     *
     * @param  string $data data (required)
     * @param  string $envName envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentTriggerRestAddloadalerttriggerPost($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddloadalerttriggerPost'][0])
    {
        list($response) = $this->environmentTriggerRestAddloadalerttriggerPostWithHttpInfo($data, $envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestAddloadalerttriggerPostWithHttpInfo
     *
     * @param  string $data (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestAddloadalerttriggerPostWithHttpInfo($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddloadalerttriggerPost'][0])
    {
        $request = $this->environmentTriggerRestAddloadalerttriggerPostRequest($data, $envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestAddloadalerttriggerPostAsync
     *
     * @param  string $data (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestAddloadalerttriggerPostAsync($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddloadalerttriggerPost'][0])
    {
        return $this->environmentTriggerRestAddloadalerttriggerPostAsyncWithHttpInfo($data, $envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestAddloadalerttriggerPostAsyncWithHttpInfo
     *
     * @param  string $data (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestAddloadalerttriggerPostAsyncWithHttpInfo($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddloadalerttriggerPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentTriggerRestAddloadalerttriggerPostRequest($data, $envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestAddloadalerttriggerPost'
     *
     * @param  string $data (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestAddloadalerttriggerPostRequest($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddloadalerttriggerPost'][0])
    {

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling environmentTriggerRestAddloadalerttriggerPost'
            );
        }
        if (strlen($data) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$data" when calling TriggerServiceApi.environmentTriggerRestAddloadalerttriggerPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $data)) {
            throw new \InvalidArgumentException("invalid value for \"data\" when calling TriggerServiceApi.environmentTriggerRestAddloadalerttriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestAddloadalerttriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestAddloadalerttriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/addloadalerttrigger';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($data !== null) {
            $formParams['data'] = ObjectSerializer::toFormValue($data);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestAddtriggerPost
     *
     * @param  string $data data (required)
     * @param  string $envName envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddtriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentTriggerRestAddtriggerPost($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddtriggerPost'][0])
    {
        list($response) = $this->environmentTriggerRestAddtriggerPostWithHttpInfo($data, $envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestAddtriggerPostWithHttpInfo
     *
     * @param  string $data (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddtriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestAddtriggerPostWithHttpInfo($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddtriggerPost'][0])
    {
        $request = $this->environmentTriggerRestAddtriggerPostRequest($data, $envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestAddtriggerPostAsync
     *
     * @param  string $data (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddtriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestAddtriggerPostAsync($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddtriggerPost'][0])
    {
        return $this->environmentTriggerRestAddtriggerPostAsyncWithHttpInfo($data, $envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestAddtriggerPostAsyncWithHttpInfo
     *
     * @param  string $data (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddtriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestAddtriggerPostAsyncWithHttpInfo($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddtriggerPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentTriggerRestAddtriggerPostRequest($data, $envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestAddtriggerPost'
     *
     * @param  string $data (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAddtriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestAddtriggerPostRequest($data, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestAddtriggerPost'][0])
    {

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling environmentTriggerRestAddtriggerPost'
            );
        }
        if (strlen($data) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$data" when calling TriggerServiceApi.environmentTriggerRestAddtriggerPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $data)) {
            throw new \InvalidArgumentException("invalid value for \"data\" when calling TriggerServiceApi.environmentTriggerRestAddtriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestAddtriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestAddtriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/addtrigger';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($data !== null) {
            $formParams['data'] = ObjectSerializer::toFormValue($data);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestAutoscalinghistoryPost
     *
     * @param  int $resultCount resultCount (required)
     * @param  int $startRow startRow (required)
     * @param  string $resourceTypes resourceTypes (optional)
     * @param  int $triggerId triggerId (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $actionTypes actionTypes (optional)
     * @param  string $skipResults skipResults (optional)
     * @param  string $envName envName (optional)
     * @param  string $orderDirection orderDirection (optional)
     * @param  string $startTime startTime (optional)
     * @param  string $endTime endTime (optional)
     * @param  string $orderField orderField (optional)
     * @param  int $triggerLogId triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAutoscalinghistoryPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse
     */
    public function environmentTriggerRestAutoscalinghistoryPost($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestAutoscalinghistoryPost'][0])
    {
        list($response) = $this->environmentTriggerRestAutoscalinghistoryPostWithHttpInfo($resultCount, $startRow, $resourceTypes, $triggerId, $nodeGroup, $actionTypes, $skipResults, $envName, $orderDirection, $startTime, $endTime, $orderField, $triggerLogId, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestAutoscalinghistoryPostWithHttpInfo
     *
     * @param  int $resultCount (required)
     * @param  int $startRow (required)
     * @param  string $resourceTypes (optional)
     * @param  int $triggerId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $actionTypes (optional)
     * @param  string $skipResults (optional)
     * @param  string $envName (optional)
     * @param  string $orderDirection (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $orderField (optional)
     * @param  int $triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAutoscalinghistoryPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestAutoscalinghistoryPostWithHttpInfo($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestAutoscalinghistoryPost'][0])
    {
        $request = $this->environmentTriggerRestAutoscalinghistoryPostRequest($resultCount, $startRow, $resourceTypes, $triggerId, $nodeGroup, $actionTypes, $skipResults, $envName, $orderDirection, $startTime, $endTime, $orderField, $triggerLogId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestAutoscalinghistoryPostAsync
     *
     * @param  int $resultCount (required)
     * @param  int $startRow (required)
     * @param  string $resourceTypes (optional)
     * @param  int $triggerId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $actionTypes (optional)
     * @param  string $skipResults (optional)
     * @param  string $envName (optional)
     * @param  string $orderDirection (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $orderField (optional)
     * @param  int $triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAutoscalinghistoryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestAutoscalinghistoryPostAsync($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestAutoscalinghistoryPost'][0])
    {
        return $this->environmentTriggerRestAutoscalinghistoryPostAsyncWithHttpInfo($resultCount, $startRow, $resourceTypes, $triggerId, $nodeGroup, $actionTypes, $skipResults, $envName, $orderDirection, $startTime, $endTime, $orderField, $triggerLogId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestAutoscalinghistoryPostAsyncWithHttpInfo
     *
     * @param  int $resultCount (required)
     * @param  int $startRow (required)
     * @param  string $resourceTypes (optional)
     * @param  int $triggerId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $actionTypes (optional)
     * @param  string $skipResults (optional)
     * @param  string $envName (optional)
     * @param  string $orderDirection (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $orderField (optional)
     * @param  int $triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAutoscalinghistoryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestAutoscalinghistoryPostAsyncWithHttpInfo($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestAutoscalinghistoryPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse';
        $request = $this->environmentTriggerRestAutoscalinghistoryPostRequest($resultCount, $startRow, $resourceTypes, $triggerId, $nodeGroup, $actionTypes, $skipResults, $envName, $orderDirection, $startTime, $endTime, $orderField, $triggerLogId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestAutoscalinghistoryPost'
     *
     * @param  int $resultCount (required)
     * @param  int $startRow (required)
     * @param  string $resourceTypes (optional)
     * @param  int $triggerId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $actionTypes (optional)
     * @param  string $skipResults (optional)
     * @param  string $envName (optional)
     * @param  string $orderDirection (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $orderField (optional)
     * @param  int $triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestAutoscalinghistoryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestAutoscalinghistoryPostRequest($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestAutoscalinghistoryPost'][0])
    {

        // verify the required parameter 'resultCount' is set
        if ($resultCount === null || (is_array($resultCount) && count($resultCount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resultCount when calling environmentTriggerRestAutoscalinghistoryPost'
            );
        }
        if ($resultCount > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$resultCount" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($resultCount < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$resultCount" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'startRow' is set
        if ($startRow === null || (is_array($startRow) && count($startRow) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startRow when calling environmentTriggerRestAutoscalinghistoryPost'
            );
        }
        if ($startRow > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$startRow" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($startRow < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$startRow" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($resourceTypes !== null && strlen($resourceTypes) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$resourceTypes" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($resourceTypes !== null && !preg_match("/(.*){0,2147483647}/", $resourceTypes)) {
            throw new \InvalidArgumentException("invalid value for \"resourceTypes\" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($triggerId !== null && $triggerId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$triggerId" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($triggerId !== null && $triggerId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$triggerId" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($actionTypes !== null && strlen($actionTypes) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$actionTypes" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($actionTypes !== null && !preg_match("/(.*){0,2147483647}/", $actionTypes)) {
            throw new \InvalidArgumentException("invalid value for \"actionTypes\" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($skipResults !== null && strlen($skipResults) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$skipResults" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($skipResults !== null && !preg_match("/(.*){0,2147483647}/", $skipResults)) {
            throw new \InvalidArgumentException("invalid value for \"skipResults\" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($orderDirection !== null && strlen($orderDirection) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$orderDirection" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($orderDirection !== null && !preg_match("/(.*){0,2147483647}/", $orderDirection)) {
            throw new \InvalidArgumentException("invalid value for \"orderDirection\" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($startTime !== null && strlen($startTime) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$startTime" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($startTime !== null && !preg_match("/(.*){0,2147483647}/", $startTime)) {
            throw new \InvalidArgumentException("invalid value for \"startTime\" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($endTime !== null && strlen($endTime) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$endTime" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($endTime !== null && !preg_match("/(.*){0,2147483647}/", $endTime)) {
            throw new \InvalidArgumentException("invalid value for \"endTime\" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($orderField !== null && strlen($orderField) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$orderField" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($orderField !== null && !preg_match("/(.*){0,2147483647}/", $orderField)) {
            throw new \InvalidArgumentException("invalid value for \"orderField\" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($triggerLogId !== null && $triggerLogId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$triggerLogId" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($triggerLogId !== null && $triggerLogId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$triggerLogId" when calling TriggerServiceApi.environmentTriggerRestAutoscalinghistoryPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/trigger/rest/autoscalinghistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($resourceTypes !== null) {
            $formParams['resourceTypes'] = ObjectSerializer::toFormValue($resourceTypes);
        }
        // form params
        if ($resultCount !== null) {
            $formParams['resultCount'] = ObjectSerializer::toFormValue($resultCount);
        }
        // form params
        if ($startRow !== null) {
            $formParams['startRow'] = ObjectSerializer::toFormValue($startRow);
        }
        // form params
        if ($triggerId !== null) {
            $formParams['triggerId'] = ObjectSerializer::toFormValue($triggerId);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($actionTypes !== null) {
            $formParams['actionTypes'] = ObjectSerializer::toFormValue($actionTypes);
        }
        // form params
        if ($skipResults !== null) {
            $formParams['skipResults'] = ObjectSerializer::toFormValue($skipResults);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($orderDirection !== null) {
            $formParams['orderDirection'] = ObjectSerializer::toFormValue($orderDirection);
        }
        // form params
        if ($startTime !== null) {
            $formParams['startTime'] = ObjectSerializer::toFormValue($startTime);
        }
        // form params
        if ($endTime !== null) {
            $formParams['endTime'] = ObjectSerializer::toFormValue($endTime);
        }
        // form params
        if ($orderField !== null) {
            $formParams['orderField'] = ObjectSerializer::toFormValue($orderField);
        }
        // form params
        if ($triggerLogId !== null) {
            $formParams['triggerLogId'] = ObjectSerializer::toFormValue($triggerLogId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestDeleteautoscalingtriggerPost
     *
     * @param  int $id id (required)
     * @param  string $envName envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeleteautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentTriggerRestDeleteautoscalingtriggerPost($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeleteautoscalingtriggerPost'][0])
    {
        list($response) = $this->environmentTriggerRestDeleteautoscalingtriggerPostWithHttpInfo($id, $envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestDeleteautoscalingtriggerPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeleteautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestDeleteautoscalingtriggerPostWithHttpInfo($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeleteautoscalingtriggerPost'][0])
    {
        $request = $this->environmentTriggerRestDeleteautoscalingtriggerPostRequest($id, $envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestDeleteautoscalingtriggerPostAsync
     *
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeleteautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestDeleteautoscalingtriggerPostAsync($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeleteautoscalingtriggerPost'][0])
    {
        return $this->environmentTriggerRestDeleteautoscalingtriggerPostAsyncWithHttpInfo($id, $envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestDeleteautoscalingtriggerPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeleteautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestDeleteautoscalingtriggerPostAsyncWithHttpInfo($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeleteautoscalingtriggerPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentTriggerRestDeleteautoscalingtriggerPostRequest($id, $envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestDeleteautoscalingtriggerPost'
     *
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeleteautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestDeleteautoscalingtriggerPostRequest($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeleteautoscalingtriggerPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling environmentTriggerRestDeleteautoscalingtriggerPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestDeleteautoscalingtriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestDeleteautoscalingtriggerPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestDeleteautoscalingtriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestDeleteautoscalingtriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/deleteautoscalingtrigger';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestDeleteloadalerttriggerPost
     *
     * @param  int $id id (required)
     * @param  string $envName envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeleteloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentTriggerRestDeleteloadalerttriggerPost($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeleteloadalerttriggerPost'][0])
    {
        list($response) = $this->environmentTriggerRestDeleteloadalerttriggerPostWithHttpInfo($id, $envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestDeleteloadalerttriggerPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeleteloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestDeleteloadalerttriggerPostWithHttpInfo($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeleteloadalerttriggerPost'][0])
    {
        $request = $this->environmentTriggerRestDeleteloadalerttriggerPostRequest($id, $envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestDeleteloadalerttriggerPostAsync
     *
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeleteloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestDeleteloadalerttriggerPostAsync($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeleteloadalerttriggerPost'][0])
    {
        return $this->environmentTriggerRestDeleteloadalerttriggerPostAsyncWithHttpInfo($id, $envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestDeleteloadalerttriggerPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeleteloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestDeleteloadalerttriggerPostAsyncWithHttpInfo($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeleteloadalerttriggerPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentTriggerRestDeleteloadalerttriggerPostRequest($id, $envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestDeleteloadalerttriggerPost'
     *
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeleteloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestDeleteloadalerttriggerPostRequest($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeleteloadalerttriggerPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling environmentTriggerRestDeleteloadalerttriggerPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestDeleteloadalerttriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestDeleteloadalerttriggerPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestDeleteloadalerttriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestDeleteloadalerttriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/deleteloadalerttrigger';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestDeletetriggerPost
     *
     * @param  int $id id (required)
     * @param  string $envName envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeletetriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentTriggerRestDeletetriggerPost($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeletetriggerPost'][0])
    {
        list($response) = $this->environmentTriggerRestDeletetriggerPostWithHttpInfo($id, $envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestDeletetriggerPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeletetriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestDeletetriggerPostWithHttpInfo($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeletetriggerPost'][0])
    {
        $request = $this->environmentTriggerRestDeletetriggerPostRequest($id, $envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestDeletetriggerPostAsync
     *
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeletetriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestDeletetriggerPostAsync($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeletetriggerPost'][0])
    {
        return $this->environmentTriggerRestDeletetriggerPostAsyncWithHttpInfo($id, $envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestDeletetriggerPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeletetriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestDeletetriggerPostAsyncWithHttpInfo($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeletetriggerPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentTriggerRestDeletetriggerPostRequest($id, $envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestDeletetriggerPost'
     *
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestDeletetriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestDeletetriggerPostRequest($id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestDeletetriggerPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling environmentTriggerRestDeletetriggerPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestDeletetriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestDeletetriggerPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestDeletetriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestDeletetriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/deletetrigger';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestEditautoscalingtriggerPost
     *
     * @param  string $data data (required)
     * @param  int $id id (required)
     * @param  string $envName envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEditautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentTriggerRestEditautoscalingtriggerPost($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEditautoscalingtriggerPost'][0])
    {
        list($response) = $this->environmentTriggerRestEditautoscalingtriggerPostWithHttpInfo($data, $id, $envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestEditautoscalingtriggerPostWithHttpInfo
     *
     * @param  string $data (required)
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEditautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestEditautoscalingtriggerPostWithHttpInfo($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEditautoscalingtriggerPost'][0])
    {
        $request = $this->environmentTriggerRestEditautoscalingtriggerPostRequest($data, $id, $envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestEditautoscalingtriggerPostAsync
     *
     * @param  string $data (required)
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEditautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestEditautoscalingtriggerPostAsync($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEditautoscalingtriggerPost'][0])
    {
        return $this->environmentTriggerRestEditautoscalingtriggerPostAsyncWithHttpInfo($data, $id, $envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestEditautoscalingtriggerPostAsyncWithHttpInfo
     *
     * @param  string $data (required)
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEditautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestEditautoscalingtriggerPostAsyncWithHttpInfo($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEditautoscalingtriggerPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentTriggerRestEditautoscalingtriggerPostRequest($data, $id, $envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestEditautoscalingtriggerPost'
     *
     * @param  string $data (required)
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEditautoscalingtriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestEditautoscalingtriggerPostRequest($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEditautoscalingtriggerPost'][0])
    {

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling environmentTriggerRestEditautoscalingtriggerPost'
            );
        }
        if (strlen($data) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$data" when calling TriggerServiceApi.environmentTriggerRestEditautoscalingtriggerPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $data)) {
            throw new \InvalidArgumentException("invalid value for \"data\" when calling TriggerServiceApi.environmentTriggerRestEditautoscalingtriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling environmentTriggerRestEditautoscalingtriggerPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestEditautoscalingtriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestEditautoscalingtriggerPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestEditautoscalingtriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestEditautoscalingtriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/editautoscalingtrigger';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($data !== null) {
            $formParams['data'] = ObjectSerializer::toFormValue($data);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestEditloadalerttriggerPost
     *
     * @param  string $data data (required)
     * @param  int $id id (required)
     * @param  string $envName envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEditloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentTriggerRestEditloadalerttriggerPost($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEditloadalerttriggerPost'][0])
    {
        list($response) = $this->environmentTriggerRestEditloadalerttriggerPostWithHttpInfo($data, $id, $envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestEditloadalerttriggerPostWithHttpInfo
     *
     * @param  string $data (required)
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEditloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestEditloadalerttriggerPostWithHttpInfo($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEditloadalerttriggerPost'][0])
    {
        $request = $this->environmentTriggerRestEditloadalerttriggerPostRequest($data, $id, $envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestEditloadalerttriggerPostAsync
     *
     * @param  string $data (required)
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEditloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestEditloadalerttriggerPostAsync($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEditloadalerttriggerPost'][0])
    {
        return $this->environmentTriggerRestEditloadalerttriggerPostAsyncWithHttpInfo($data, $id, $envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestEditloadalerttriggerPostAsyncWithHttpInfo
     *
     * @param  string $data (required)
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEditloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestEditloadalerttriggerPostAsyncWithHttpInfo($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEditloadalerttriggerPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentTriggerRestEditloadalerttriggerPostRequest($data, $id, $envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestEditloadalerttriggerPost'
     *
     * @param  string $data (required)
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEditloadalerttriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestEditloadalerttriggerPostRequest($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEditloadalerttriggerPost'][0])
    {

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling environmentTriggerRestEditloadalerttriggerPost'
            );
        }
        if (strlen($data) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$data" when calling TriggerServiceApi.environmentTriggerRestEditloadalerttriggerPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $data)) {
            throw new \InvalidArgumentException("invalid value for \"data\" when calling TriggerServiceApi.environmentTriggerRestEditloadalerttriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling environmentTriggerRestEditloadalerttriggerPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestEditloadalerttriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestEditloadalerttriggerPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestEditloadalerttriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestEditloadalerttriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/editloadalerttrigger';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($data !== null) {
            $formParams['data'] = ObjectSerializer::toFormValue($data);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestEdittriggerPost
     *
     * @param  string $data data (required)
     * @param  int $id id (required)
     * @param  string $envName envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEdittriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse
     */
    public function environmentTriggerRestEdittriggerPost($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEdittriggerPost'][0])
    {
        list($response) = $this->environmentTriggerRestEdittriggerPostWithHttpInfo($data, $id, $envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestEdittriggerPostWithHttpInfo
     *
     * @param  string $data (required)
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEdittriggerPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestEdittriggerPostWithHttpInfo($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEdittriggerPost'][0])
    {
        $request = $this->environmentTriggerRestEdittriggerPostRequest($data, $id, $envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestEdittriggerPostAsync
     *
     * @param  string $data (required)
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEdittriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestEdittriggerPostAsync($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEdittriggerPost'][0])
    {
        return $this->environmentTriggerRestEdittriggerPostAsyncWithHttpInfo($data, $id, $envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestEdittriggerPostAsyncWithHttpInfo
     *
     * @param  string $data (required)
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEdittriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestEdittriggerPostAsyncWithHttpInfo($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEdittriggerPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseObjectResponse';
        $request = $this->environmentTriggerRestEdittriggerPostRequest($data, $id, $envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestEdittriggerPost'
     *
     * @param  string $data (required)
     * @param  int $id (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestEdittriggerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestEdittriggerPostRequest($data, $id, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestEdittriggerPost'][0])
    {

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling environmentTriggerRestEdittriggerPost'
            );
        }
        if (strlen($data) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$data" when calling TriggerServiceApi.environmentTriggerRestEdittriggerPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $data)) {
            throw new \InvalidArgumentException("invalid value for \"data\" when calling TriggerServiceApi.environmentTriggerRestEdittriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling environmentTriggerRestEdittriggerPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestEdittriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestEdittriggerPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestEdittriggerPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestEdittriggerPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/edittrigger';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($data !== null) {
            $formParams['data'] = ObjectSerializer::toFormValue($data);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestGetautoscalingtriggersPost
     *
     * @param  string $envName envName (optional)
     * @param  string $actionTypes actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGetautoscalingtriggersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentTriggerRestGetautoscalingtriggersPost($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGetautoscalingtriggersPost'][0])
    {
        list($response) = $this->environmentTriggerRestGetautoscalingtriggersPostWithHttpInfo($envName, $actionTypes, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestGetautoscalingtriggersPostWithHttpInfo
     *
     * @param  string $envName (optional)
     * @param  string $actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGetautoscalingtriggersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestGetautoscalingtriggersPostWithHttpInfo($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGetautoscalingtriggersPost'][0])
    {
        $request = $this->environmentTriggerRestGetautoscalingtriggersPostRequest($envName, $actionTypes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestGetautoscalingtriggersPostAsync
     *
     * @param  string $envName (optional)
     * @param  string $actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGetautoscalingtriggersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestGetautoscalingtriggersPostAsync($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGetautoscalingtriggersPost'][0])
    {
        return $this->environmentTriggerRestGetautoscalingtriggersPostAsyncWithHttpInfo($envName, $actionTypes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestGetautoscalingtriggersPostAsyncWithHttpInfo
     *
     * @param  string $envName (optional)
     * @param  string $actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGetautoscalingtriggersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestGetautoscalingtriggersPostAsyncWithHttpInfo($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGetautoscalingtriggersPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentTriggerRestGetautoscalingtriggersPostRequest($envName, $actionTypes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestGetautoscalingtriggersPost'
     *
     * @param  string $envName (optional)
     * @param  string $actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGetautoscalingtriggersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestGetautoscalingtriggersPostRequest($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGetautoscalingtriggersPost'][0])
    {

        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestGetautoscalingtriggersPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestGetautoscalingtriggersPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($actionTypes !== null && strlen($actionTypes) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$actionTypes" when calling TriggerServiceApi.environmentTriggerRestGetautoscalingtriggersPost, must be smaller than or equal to 2147483647.');
        }
        if ($actionTypes !== null && !preg_match("/(.*){0,2147483647}/", $actionTypes)) {
            throw new \InvalidArgumentException("invalid value for \"actionTypes\" when calling TriggerServiceApi.environmentTriggerRestGetautoscalingtriggersPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/getautoscalingtriggers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($actionTypes !== null) {
            $formParams['actionTypes'] = ObjectSerializer::toFormValue($actionTypes);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestGetloadalerttriggersPost
     *
     * @param  string $envName envName (optional)
     * @param  string $actionTypes actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGetloadalerttriggersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentTriggerRestGetloadalerttriggersPost($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGetloadalerttriggersPost'][0])
    {
        list($response) = $this->environmentTriggerRestGetloadalerttriggersPostWithHttpInfo($envName, $actionTypes, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestGetloadalerttriggersPostWithHttpInfo
     *
     * @param  string $envName (optional)
     * @param  string $actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGetloadalerttriggersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestGetloadalerttriggersPostWithHttpInfo($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGetloadalerttriggersPost'][0])
    {
        $request = $this->environmentTriggerRestGetloadalerttriggersPostRequest($envName, $actionTypes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestGetloadalerttriggersPostAsync
     *
     * @param  string $envName (optional)
     * @param  string $actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGetloadalerttriggersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestGetloadalerttriggersPostAsync($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGetloadalerttriggersPost'][0])
    {
        return $this->environmentTriggerRestGetloadalerttriggersPostAsyncWithHttpInfo($envName, $actionTypes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestGetloadalerttriggersPostAsyncWithHttpInfo
     *
     * @param  string $envName (optional)
     * @param  string $actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGetloadalerttriggersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestGetloadalerttriggersPostAsyncWithHttpInfo($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGetloadalerttriggersPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentTriggerRestGetloadalerttriggersPostRequest($envName, $actionTypes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestGetloadalerttriggersPost'
     *
     * @param  string $envName (optional)
     * @param  string $actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGetloadalerttriggersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestGetloadalerttriggersPostRequest($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGetloadalerttriggersPost'][0])
    {

        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestGetloadalerttriggersPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestGetloadalerttriggersPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($actionTypes !== null && strlen($actionTypes) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$actionTypes" when calling TriggerServiceApi.environmentTriggerRestGetloadalerttriggersPost, must be smaller than or equal to 2147483647.');
        }
        if ($actionTypes !== null && !preg_match("/(.*){0,2147483647}/", $actionTypes)) {
            throw new \InvalidArgumentException("invalid value for \"actionTypes\" when calling TriggerServiceApi.environmentTriggerRestGetloadalerttriggersPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/getloadalerttriggers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($actionTypes !== null) {
            $formParams['actionTypes'] = ObjectSerializer::toFormValue($actionTypes);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestGettriggerlogsPost
     *
     * @param  int $resultCount resultCount (required)
     * @param  int $startRow startRow (required)
     * @param  string $resourceTypes resourceTypes (optional)
     * @param  int $triggerId triggerId (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $actionTypes actionTypes (optional)
     * @param  string $skipResults skipResults (optional)
     * @param  string $envName envName (optional)
     * @param  string $orderDirection orderDirection (optional)
     * @param  string $startTime startTime (optional)
     * @param  string $endTime endTime (optional)
     * @param  string $orderField orderField (optional)
     * @param  int $triggerLogId triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGettriggerlogsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse
     */
    public function environmentTriggerRestGettriggerlogsPost($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestGettriggerlogsPost'][0])
    {
        list($response) = $this->environmentTriggerRestGettriggerlogsPostWithHttpInfo($resultCount, $startRow, $resourceTypes, $triggerId, $nodeGroup, $actionTypes, $skipResults, $envName, $orderDirection, $startTime, $endTime, $orderField, $triggerLogId, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestGettriggerlogsPostWithHttpInfo
     *
     * @param  int $resultCount (required)
     * @param  int $startRow (required)
     * @param  string $resourceTypes (optional)
     * @param  int $triggerId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $actionTypes (optional)
     * @param  string $skipResults (optional)
     * @param  string $envName (optional)
     * @param  string $orderDirection (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $orderField (optional)
     * @param  int $triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGettriggerlogsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestGettriggerlogsPostWithHttpInfo($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestGettriggerlogsPost'][0])
    {
        $request = $this->environmentTriggerRestGettriggerlogsPostRequest($resultCount, $startRow, $resourceTypes, $triggerId, $nodeGroup, $actionTypes, $skipResults, $envName, $orderDirection, $startTime, $endTime, $orderField, $triggerLogId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestGettriggerlogsPostAsync
     *
     * @param  int $resultCount (required)
     * @param  int $startRow (required)
     * @param  string $resourceTypes (optional)
     * @param  int $triggerId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $actionTypes (optional)
     * @param  string $skipResults (optional)
     * @param  string $envName (optional)
     * @param  string $orderDirection (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $orderField (optional)
     * @param  int $triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGettriggerlogsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestGettriggerlogsPostAsync($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestGettriggerlogsPost'][0])
    {
        return $this->environmentTriggerRestGettriggerlogsPostAsyncWithHttpInfo($resultCount, $startRow, $resourceTypes, $triggerId, $nodeGroup, $actionTypes, $skipResults, $envName, $orderDirection, $startTime, $endTime, $orderField, $triggerLogId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestGettriggerlogsPostAsyncWithHttpInfo
     *
     * @param  int $resultCount (required)
     * @param  int $startRow (required)
     * @param  string $resourceTypes (optional)
     * @param  int $triggerId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $actionTypes (optional)
     * @param  string $skipResults (optional)
     * @param  string $envName (optional)
     * @param  string $orderDirection (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $orderField (optional)
     * @param  int $triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGettriggerlogsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestGettriggerlogsPostAsyncWithHttpInfo($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestGettriggerlogsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse';
        $request = $this->environmentTriggerRestGettriggerlogsPostRequest($resultCount, $startRow, $resourceTypes, $triggerId, $nodeGroup, $actionTypes, $skipResults, $envName, $orderDirection, $startTime, $endTime, $orderField, $triggerLogId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestGettriggerlogsPost'
     *
     * @param  int $resultCount (required)
     * @param  int $startRow (required)
     * @param  string $resourceTypes (optional)
     * @param  int $triggerId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $actionTypes (optional)
     * @param  string $skipResults (optional)
     * @param  string $envName (optional)
     * @param  string $orderDirection (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $orderField (optional)
     * @param  int $triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGettriggerlogsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestGettriggerlogsPostRequest($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestGettriggerlogsPost'][0])
    {

        // verify the required parameter 'resultCount' is set
        if ($resultCount === null || (is_array($resultCount) && count($resultCount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resultCount when calling environmentTriggerRestGettriggerlogsPost'
            );
        }
        if ($resultCount > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$resultCount" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($resultCount < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$resultCount" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'startRow' is set
        if ($startRow === null || (is_array($startRow) && count($startRow) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startRow when calling environmentTriggerRestGettriggerlogsPost'
            );
        }
        if ($startRow > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$startRow" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($startRow < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$startRow" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($resourceTypes !== null && strlen($resourceTypes) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$resourceTypes" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($resourceTypes !== null && !preg_match("/(.*){0,2147483647}/", $resourceTypes)) {
            throw new \InvalidArgumentException("invalid value for \"resourceTypes\" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($triggerId !== null && $triggerId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$triggerId" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($triggerId !== null && $triggerId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$triggerId" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($actionTypes !== null && strlen($actionTypes) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$actionTypes" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($actionTypes !== null && !preg_match("/(.*){0,2147483647}/", $actionTypes)) {
            throw new \InvalidArgumentException("invalid value for \"actionTypes\" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($skipResults !== null && strlen($skipResults) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$skipResults" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($skipResults !== null && !preg_match("/(.*){0,2147483647}/", $skipResults)) {
            throw new \InvalidArgumentException("invalid value for \"skipResults\" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($orderDirection !== null && strlen($orderDirection) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$orderDirection" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($orderDirection !== null && !preg_match("/(.*){0,2147483647}/", $orderDirection)) {
            throw new \InvalidArgumentException("invalid value for \"orderDirection\" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($startTime !== null && strlen($startTime) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$startTime" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($startTime !== null && !preg_match("/(.*){0,2147483647}/", $startTime)) {
            throw new \InvalidArgumentException("invalid value for \"startTime\" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($endTime !== null && strlen($endTime) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$endTime" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($endTime !== null && !preg_match("/(.*){0,2147483647}/", $endTime)) {
            throw new \InvalidArgumentException("invalid value for \"endTime\" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($orderField !== null && strlen($orderField) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$orderField" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($orderField !== null && !preg_match("/(.*){0,2147483647}/", $orderField)) {
            throw new \InvalidArgumentException("invalid value for \"orderField\" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($triggerLogId !== null && $triggerLogId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$triggerLogId" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be smaller than or equal to 2147483647.');
        }
        if ($triggerLogId !== null && $triggerLogId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$triggerLogId" when calling TriggerServiceApi.environmentTriggerRestGettriggerlogsPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/trigger/rest/gettriggerlogs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($resourceTypes !== null) {
            $formParams['resourceTypes'] = ObjectSerializer::toFormValue($resourceTypes);
        }
        // form params
        if ($resultCount !== null) {
            $formParams['resultCount'] = ObjectSerializer::toFormValue($resultCount);
        }
        // form params
        if ($startRow !== null) {
            $formParams['startRow'] = ObjectSerializer::toFormValue($startRow);
        }
        // form params
        if ($triggerId !== null) {
            $formParams['triggerId'] = ObjectSerializer::toFormValue($triggerId);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($actionTypes !== null) {
            $formParams['actionTypes'] = ObjectSerializer::toFormValue($actionTypes);
        }
        // form params
        if ($skipResults !== null) {
            $formParams['skipResults'] = ObjectSerializer::toFormValue($skipResults);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($orderDirection !== null) {
            $formParams['orderDirection'] = ObjectSerializer::toFormValue($orderDirection);
        }
        // form params
        if ($startTime !== null) {
            $formParams['startTime'] = ObjectSerializer::toFormValue($startTime);
        }
        // form params
        if ($endTime !== null) {
            $formParams['endTime'] = ObjectSerializer::toFormValue($endTime);
        }
        // form params
        if ($orderField !== null) {
            $formParams['orderField'] = ObjectSerializer::toFormValue($orderField);
        }
        // form params
        if ($triggerLogId !== null) {
            $formParams['triggerLogId'] = ObjectSerializer::toFormValue($triggerLogId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestGettriggersPost
     *
     * @param  string $envName envName (optional)
     * @param  string $actionTypes actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGettriggersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse
     */
    public function environmentTriggerRestGettriggersPost($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGettriggersPost'][0])
    {
        list($response) = $this->environmentTriggerRestGettriggersPostWithHttpInfo($envName, $actionTypes, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestGettriggersPostWithHttpInfo
     *
     * @param  string $envName (optional)
     * @param  string $actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGettriggersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestGettriggersPostWithHttpInfo($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGettriggersPost'][0])
    {
        $request = $this->environmentTriggerRestGettriggersPostRequest($envName, $actionTypes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestGettriggersPostAsync
     *
     * @param  string $envName (optional)
     * @param  string $actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGettriggersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestGettriggersPostAsync($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGettriggersPost'][0])
    {
        return $this->environmentTriggerRestGettriggersPostAsyncWithHttpInfo($envName, $actionTypes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestGettriggersPostAsyncWithHttpInfo
     *
     * @param  string $envName (optional)
     * @param  string $actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGettriggersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestGettriggersPostAsyncWithHttpInfo($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGettriggersPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDevelopmentResponseInterfacesArrayResponse';
        $request = $this->environmentTriggerRestGettriggersPostRequest($envName, $actionTypes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestGettriggersPost'
     *
     * @param  string $envName (optional)
     * @param  string $actionTypes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestGettriggersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestGettriggersPostRequest($envName = null, $actionTypes = null, string $contentType = self::contentTypes['environmentTriggerRestGettriggersPost'][0])
    {

        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestGettriggersPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestGettriggersPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($actionTypes !== null && strlen($actionTypes) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$actionTypes" when calling TriggerServiceApi.environmentTriggerRestGettriggersPost, must be smaller than or equal to 2147483647.');
        }
        if ($actionTypes !== null && !preg_match("/(.*){0,2147483647}/", $actionTypes)) {
            throw new \InvalidArgumentException("invalid value for \"actionTypes\" when calling TriggerServiceApi.environmentTriggerRestGettriggersPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/gettriggers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($actionTypes !== null) {
            $formParams['actionTypes'] = ObjectSerializer::toFormValue($actionTypes);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestLoadalerthistoryPost
     *
     * @param  int $resultCount resultCount (required)
     * @param  int $startRow startRow (required)
     * @param  string $resourceTypes resourceTypes (optional)
     * @param  int $triggerId triggerId (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $actionTypes actionTypes (optional)
     * @param  string $skipResults skipResults (optional)
     * @param  string $envName envName (optional)
     * @param  string $orderDirection orderDirection (optional)
     * @param  string $startTime startTime (optional)
     * @param  string $endTime endTime (optional)
     * @param  string $orderField orderField (optional)
     * @param  int $triggerLogId triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestLoadalerthistoryPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse
     */
    public function environmentTriggerRestLoadalerthistoryPost($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestLoadalerthistoryPost'][0])
    {
        list($response) = $this->environmentTriggerRestLoadalerthistoryPostWithHttpInfo($resultCount, $startRow, $resourceTypes, $triggerId, $nodeGroup, $actionTypes, $skipResults, $envName, $orderDirection, $startTime, $endTime, $orderField, $triggerLogId, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestLoadalerthistoryPostWithHttpInfo
     *
     * @param  int $resultCount (required)
     * @param  int $startRow (required)
     * @param  string $resourceTypes (optional)
     * @param  int $triggerId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $actionTypes (optional)
     * @param  string $skipResults (optional)
     * @param  string $envName (optional)
     * @param  string $orderDirection (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $orderField (optional)
     * @param  int $triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestLoadalerthistoryPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestLoadalerthistoryPostWithHttpInfo($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestLoadalerthistoryPost'][0])
    {
        $request = $this->environmentTriggerRestLoadalerthistoryPostRequest($resultCount, $startRow, $resourceTypes, $triggerId, $nodeGroup, $actionTypes, $skipResults, $envName, $orderDirection, $startTime, $endTime, $orderField, $triggerLogId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestLoadalerthistoryPostAsync
     *
     * @param  int $resultCount (required)
     * @param  int $startRow (required)
     * @param  string $resourceTypes (optional)
     * @param  int $triggerId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $actionTypes (optional)
     * @param  string $skipResults (optional)
     * @param  string $envName (optional)
     * @param  string $orderDirection (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $orderField (optional)
     * @param  int $triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestLoadalerthistoryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestLoadalerthistoryPostAsync($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestLoadalerthistoryPost'][0])
    {
        return $this->environmentTriggerRestLoadalerthistoryPostAsyncWithHttpInfo($resultCount, $startRow, $resourceTypes, $triggerId, $nodeGroup, $actionTypes, $skipResults, $envName, $orderDirection, $startTime, $endTime, $orderField, $triggerLogId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestLoadalerthistoryPostAsyncWithHttpInfo
     *
     * @param  int $resultCount (required)
     * @param  int $startRow (required)
     * @param  string $resourceTypes (optional)
     * @param  int $triggerId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $actionTypes (optional)
     * @param  string $skipResults (optional)
     * @param  string $envName (optional)
     * @param  string $orderDirection (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $orderField (optional)
     * @param  int $triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestLoadalerthistoryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestLoadalerthistoryPostAsyncWithHttpInfo($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestLoadalerthistoryPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerAdministrationResponsePagedArrayResponse';
        $request = $this->environmentTriggerRestLoadalerthistoryPostRequest($resultCount, $startRow, $resourceTypes, $triggerId, $nodeGroup, $actionTypes, $skipResults, $envName, $orderDirection, $startTime, $endTime, $orderField, $triggerLogId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestLoadalerthistoryPost'
     *
     * @param  int $resultCount (required)
     * @param  int $startRow (required)
     * @param  string $resourceTypes (optional)
     * @param  int $triggerId (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $actionTypes (optional)
     * @param  string $skipResults (optional)
     * @param  string $envName (optional)
     * @param  string $orderDirection (optional)
     * @param  string $startTime (optional)
     * @param  string $endTime (optional)
     * @param  string $orderField (optional)
     * @param  int $triggerLogId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestLoadalerthistoryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestLoadalerthistoryPostRequest($resultCount, $startRow, $resourceTypes = null, $triggerId = null, $nodeGroup = null, $actionTypes = null, $skipResults = null, $envName = null, $orderDirection = null, $startTime = null, $endTime = null, $orderField = null, $triggerLogId = null, string $contentType = self::contentTypes['environmentTriggerRestLoadalerthistoryPost'][0])
    {

        // verify the required parameter 'resultCount' is set
        if ($resultCount === null || (is_array($resultCount) && count($resultCount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resultCount when calling environmentTriggerRestLoadalerthistoryPost'
            );
        }
        if ($resultCount > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$resultCount" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($resultCount < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$resultCount" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'startRow' is set
        if ($startRow === null || (is_array($startRow) && count($startRow) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startRow when calling environmentTriggerRestLoadalerthistoryPost'
            );
        }
        if ($startRow > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$startRow" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($startRow < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$startRow" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($resourceTypes !== null && strlen($resourceTypes) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$resourceTypes" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($resourceTypes !== null && !preg_match("/(.*){0,2147483647}/", $resourceTypes)) {
            throw new \InvalidArgumentException("invalid value for \"resourceTypes\" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($triggerId !== null && $triggerId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$triggerId" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($triggerId !== null && $triggerId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$triggerId" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($actionTypes !== null && strlen($actionTypes) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$actionTypes" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($actionTypes !== null && !preg_match("/(.*){0,2147483647}/", $actionTypes)) {
            throw new \InvalidArgumentException("invalid value for \"actionTypes\" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($skipResults !== null && strlen($skipResults) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$skipResults" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($skipResults !== null && !preg_match("/(.*){0,2147483647}/", $skipResults)) {
            throw new \InvalidArgumentException("invalid value for \"skipResults\" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($orderDirection !== null && strlen($orderDirection) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$orderDirection" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($orderDirection !== null && !preg_match("/(.*){0,2147483647}/", $orderDirection)) {
            throw new \InvalidArgumentException("invalid value for \"orderDirection\" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($startTime !== null && strlen($startTime) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$startTime" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($startTime !== null && !preg_match("/(.*){0,2147483647}/", $startTime)) {
            throw new \InvalidArgumentException("invalid value for \"startTime\" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($endTime !== null && strlen($endTime) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$endTime" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($endTime !== null && !preg_match("/(.*){0,2147483647}/", $endTime)) {
            throw new \InvalidArgumentException("invalid value for \"endTime\" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($orderField !== null && strlen($orderField) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$orderField" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($orderField !== null && !preg_match("/(.*){0,2147483647}/", $orderField)) {
            throw new \InvalidArgumentException("invalid value for \"orderField\" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($triggerLogId !== null && $triggerLogId > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$triggerLogId" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be smaller than or equal to 2147483647.');
        }
        if ($triggerLogId !== null && $triggerLogId < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$triggerLogId" when calling TriggerServiceApi.environmentTriggerRestLoadalerthistoryPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/environment/trigger/rest/loadalerthistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($resourceTypes !== null) {
            $formParams['resourceTypes'] = ObjectSerializer::toFormValue($resourceTypes);
        }
        // form params
        if ($resultCount !== null) {
            $formParams['resultCount'] = ObjectSerializer::toFormValue($resultCount);
        }
        // form params
        if ($startRow !== null) {
            $formParams['startRow'] = ObjectSerializer::toFormValue($startRow);
        }
        // form params
        if ($triggerId !== null) {
            $formParams['triggerId'] = ObjectSerializer::toFormValue($triggerId);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($actionTypes !== null) {
            $formParams['actionTypes'] = ObjectSerializer::toFormValue($actionTypes);
        }
        // form params
        if ($skipResults !== null) {
            $formParams['skipResults'] = ObjectSerializer::toFormValue($skipResults);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($orderDirection !== null) {
            $formParams['orderDirection'] = ObjectSerializer::toFormValue($orderDirection);
        }
        // form params
        if ($startTime !== null) {
            $formParams['startTime'] = ObjectSerializer::toFormValue($startTime);
        }
        // form params
        if ($endTime !== null) {
            $formParams['endTime'] = ObjectSerializer::toFormValue($endTime);
        }
        // form params
        if ($orderField !== null) {
            $formParams['orderField'] = ObjectSerializer::toFormValue($orderField);
        }
        // form params
        if ($triggerLogId !== null) {
            $formParams['triggerLogId'] = ObjectSerializer::toFormValue($triggerLogId);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestSetautoscalingtriggerenabledPost
     *
     * @param  int $id id (required)
     * @param  bool $enabled enabled (required)
     * @param  string $envName envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSetautoscalingtriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentTriggerRestSetautoscalingtriggerenabledPost($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSetautoscalingtriggerenabledPost'][0])
    {
        list($response) = $this->environmentTriggerRestSetautoscalingtriggerenabledPostWithHttpInfo($id, $enabled, $envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestSetautoscalingtriggerenabledPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSetautoscalingtriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestSetautoscalingtriggerenabledPostWithHttpInfo($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSetautoscalingtriggerenabledPost'][0])
    {
        $request = $this->environmentTriggerRestSetautoscalingtriggerenabledPostRequest($id, $enabled, $envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestSetautoscalingtriggerenabledPostAsync
     *
     * @param  int $id (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSetautoscalingtriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestSetautoscalingtriggerenabledPostAsync($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSetautoscalingtriggerenabledPost'][0])
    {
        return $this->environmentTriggerRestSetautoscalingtriggerenabledPostAsyncWithHttpInfo($id, $enabled, $envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestSetautoscalingtriggerenabledPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSetautoscalingtriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestSetautoscalingtriggerenabledPostAsyncWithHttpInfo($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSetautoscalingtriggerenabledPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentTriggerRestSetautoscalingtriggerenabledPostRequest($id, $enabled, $envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestSetautoscalingtriggerenabledPost'
     *
     * @param  int $id (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSetautoscalingtriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestSetautoscalingtriggerenabledPostRequest($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSetautoscalingtriggerenabledPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling environmentTriggerRestSetautoscalingtriggerenabledPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestSetautoscalingtriggerenabledPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestSetautoscalingtriggerenabledPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'enabled' is set
        if ($enabled === null || (is_array($enabled) && count($enabled) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enabled when calling environmentTriggerRestSetautoscalingtriggerenabledPost'
            );
        }

        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestSetautoscalingtriggerenabledPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestSetautoscalingtriggerenabledPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/setautoscalingtriggerenabled';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($enabled !== null) {
            $formParams['enabled'] = ObjectSerializer::toFormValue($enabled);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestSetloadalerttriggerenabledPost
     *
     * @param  int $id id (required)
     * @param  bool $enabled enabled (required)
     * @param  string $envName envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSetloadalerttriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentTriggerRestSetloadalerttriggerenabledPost($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSetloadalerttriggerenabledPost'][0])
    {
        list($response) = $this->environmentTriggerRestSetloadalerttriggerenabledPostWithHttpInfo($id, $enabled, $envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestSetloadalerttriggerenabledPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSetloadalerttriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestSetloadalerttriggerenabledPostWithHttpInfo($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSetloadalerttriggerenabledPost'][0])
    {
        $request = $this->environmentTriggerRestSetloadalerttriggerenabledPostRequest($id, $enabled, $envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestSetloadalerttriggerenabledPostAsync
     *
     * @param  int $id (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSetloadalerttriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestSetloadalerttriggerenabledPostAsync($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSetloadalerttriggerenabledPost'][0])
    {
        return $this->environmentTriggerRestSetloadalerttriggerenabledPostAsyncWithHttpInfo($id, $enabled, $envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestSetloadalerttriggerenabledPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSetloadalerttriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestSetloadalerttriggerenabledPostAsyncWithHttpInfo($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSetloadalerttriggerenabledPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentTriggerRestSetloadalerttriggerenabledPostRequest($id, $enabled, $envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestSetloadalerttriggerenabledPost'
     *
     * @param  int $id (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSetloadalerttriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestSetloadalerttriggerenabledPostRequest($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSetloadalerttriggerenabledPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling environmentTriggerRestSetloadalerttriggerenabledPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestSetloadalerttriggerenabledPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestSetloadalerttriggerenabledPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'enabled' is set
        if ($enabled === null || (is_array($enabled) && count($enabled) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enabled when calling environmentTriggerRestSetloadalerttriggerenabledPost'
            );
        }

        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestSetloadalerttriggerenabledPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestSetloadalerttriggerenabledPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/setloadalerttriggerenabled';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($enabled !== null) {
            $formParams['enabled'] = ObjectSerializer::toFormValue($enabled);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentTriggerRestSettriggerenabledPost
     *
     * @param  int $id id (required)
     * @param  bool $enabled enabled (required)
     * @param  string $envName envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSettriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentTriggerRestSettriggerenabledPost($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSettriggerenabledPost'][0])
    {
        list($response) = $this->environmentTriggerRestSettriggerenabledPostWithHttpInfo($id, $enabled, $envName, $contentType);
        return $response;
    }

    /**
     * Operation environmentTriggerRestSettriggerenabledPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSettriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentTriggerRestSettriggerenabledPostWithHttpInfo($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSettriggerenabledPost'][0])
    {
        $request = $this->environmentTriggerRestSettriggerenabledPostRequest($id, $enabled, $envName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentTriggerRestSettriggerenabledPostAsync
     *
     * @param  int $id (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSettriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestSettriggerenabledPostAsync($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSettriggerenabledPost'][0])
    {
        return $this->environmentTriggerRestSettriggerenabledPostAsyncWithHttpInfo($id, $enabled, $envName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentTriggerRestSettriggerenabledPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSettriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentTriggerRestSettriggerenabledPostAsyncWithHttpInfo($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSettriggerenabledPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentTriggerRestSettriggerenabledPostRequest($id, $enabled, $envName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentTriggerRestSettriggerenabledPost'
     *
     * @param  int $id (required)
     * @param  bool $enabled (required)
     * @param  string $envName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentTriggerRestSettriggerenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentTriggerRestSettriggerenabledPostRequest($id, $enabled, $envName = null, string $contentType = self::contentTypes['environmentTriggerRestSettriggerenabledPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling environmentTriggerRestSettriggerenabledPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestSettriggerenabledPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling TriggerServiceApi.environmentTriggerRestSettriggerenabledPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'enabled' is set
        if ($enabled === null || (is_array($enabled) && count($enabled) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enabled when calling environmentTriggerRestSettriggerenabledPost'
            );
        }

        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling TriggerServiceApi.environmentTriggerRestSettriggerenabledPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling TriggerServiceApi.environmentTriggerRestSettriggerenabledPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/trigger/rest/settriggerenabled';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($enabled !== null) {
            $formParams['enabled'] = ObjectSerializer::toFormValue($enabled);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
