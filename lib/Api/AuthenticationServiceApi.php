<?php
/**
 * AuthenticationServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AuthenticationServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AuthenticationServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'usersAuthenticationRestCreatetokenPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersAuthenticationRestDeletetokensPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersAuthenticationRestEdittokenPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersAuthenticationRestGetpolicymethodsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersAuthenticationRestGetsessionsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersAuthenticationRestGettokenapilistPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersAuthenticationRestGettokensPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersAuthenticationRestGettokentemplatesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersAuthenticationRestRegeneratetokenPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersAuthenticationRestSigninPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersAuthenticationRestSignoutPost' => [
            'application/x-www-form-urlencoded',
        ],
        'usersAuthenticationRestSignoutsessionsPost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation usersAuthenticationRestCreatetokenPost
     *
     * @param  string $description description (required)
     * @param  string $tokenTemplate tokenTemplate (optional)
     * @param  string $password password (optional)
     * @param  string $expiresAt expiresAt (optional)
     * @param  string $apiList apiList (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestCreatetokenPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse
     */
    public function usersAuthenticationRestCreatetokenPost($description, $tokenTemplate = null, $password = null, $expiresAt = null, $apiList = null, string $contentType = self::contentTypes['usersAuthenticationRestCreatetokenPost'][0])
    {
        list($response) = $this->usersAuthenticationRestCreatetokenPostWithHttpInfo($description, $tokenTemplate, $password, $expiresAt, $apiList, $contentType);
        return $response;
    }

    /**
     * Operation usersAuthenticationRestCreatetokenPostWithHttpInfo
     *
     * @param  string $description (required)
     * @param  string $tokenTemplate (optional)
     * @param  string $password (optional)
     * @param  string $expiresAt (optional)
     * @param  string $apiList (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestCreatetokenPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersAuthenticationRestCreatetokenPostWithHttpInfo($description, $tokenTemplate = null, $password = null, $expiresAt = null, $apiList = null, string $contentType = self::contentTypes['usersAuthenticationRestCreatetokenPost'][0])
    {
        $request = $this->usersAuthenticationRestCreatetokenPostRequest($description, $tokenTemplate, $password, $expiresAt, $apiList, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAuthenticationRestCreatetokenPostAsync
     *
     * @param  string $description (required)
     * @param  string $tokenTemplate (optional)
     * @param  string $password (optional)
     * @param  string $expiresAt (optional)
     * @param  string $apiList (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestCreatetokenPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestCreatetokenPostAsync($description, $tokenTemplate = null, $password = null, $expiresAt = null, $apiList = null, string $contentType = self::contentTypes['usersAuthenticationRestCreatetokenPost'][0])
    {
        return $this->usersAuthenticationRestCreatetokenPostAsyncWithHttpInfo($description, $tokenTemplate, $password, $expiresAt, $apiList, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAuthenticationRestCreatetokenPostAsyncWithHttpInfo
     *
     * @param  string $description (required)
     * @param  string $tokenTemplate (optional)
     * @param  string $password (optional)
     * @param  string $expiresAt (optional)
     * @param  string $apiList (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestCreatetokenPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestCreatetokenPostAsyncWithHttpInfo($description, $tokenTemplate = null, $password = null, $expiresAt = null, $apiList = null, string $contentType = self::contentTypes['usersAuthenticationRestCreatetokenPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse';
        $request = $this->usersAuthenticationRestCreatetokenPostRequest($description, $tokenTemplate, $password, $expiresAt, $apiList, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersAuthenticationRestCreatetokenPost'
     *
     * @param  string $description (required)
     * @param  string $tokenTemplate (optional)
     * @param  string $password (optional)
     * @param  string $expiresAt (optional)
     * @param  string $apiList (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestCreatetokenPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersAuthenticationRestCreatetokenPostRequest($description, $tokenTemplate = null, $password = null, $expiresAt = null, $apiList = null, string $contentType = self::contentTypes['usersAuthenticationRestCreatetokenPost'][0])
    {

        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling usersAuthenticationRestCreatetokenPost'
            );
        }
        if (strlen($description) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$description" when calling AuthenticationServiceApi.usersAuthenticationRestCreatetokenPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $description)) {
            throw new \InvalidArgumentException("invalid value for \"description\" when calling AuthenticationServiceApi.usersAuthenticationRestCreatetokenPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($tokenTemplate !== null && strlen($tokenTemplate) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$tokenTemplate" when calling AuthenticationServiceApi.usersAuthenticationRestCreatetokenPost, must be smaller than or equal to 2147483647.');
        }
        if ($tokenTemplate !== null && !preg_match("/(.*){0,2147483647}/", $tokenTemplate)) {
            throw new \InvalidArgumentException("invalid value for \"tokenTemplate\" when calling AuthenticationServiceApi.usersAuthenticationRestCreatetokenPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling AuthenticationServiceApi.usersAuthenticationRestCreatetokenPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling AuthenticationServiceApi.usersAuthenticationRestCreatetokenPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($expiresAt !== null && strlen($expiresAt) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$expiresAt" when calling AuthenticationServiceApi.usersAuthenticationRestCreatetokenPost, must be smaller than or equal to 2147483647.');
        }
        if ($expiresAt !== null && !preg_match("/(.*){0,2147483647}/", $expiresAt)) {
            throw new \InvalidArgumentException("invalid value for \"expiresAt\" when calling AuthenticationServiceApi.usersAuthenticationRestCreatetokenPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($apiList !== null && strlen($apiList) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$apiList" when calling AuthenticationServiceApi.usersAuthenticationRestCreatetokenPost, must be smaller than or equal to 2147483647.');
        }
        if ($apiList !== null && !preg_match("/(.*){0,2147483647}/", $apiList)) {
            throw new \InvalidArgumentException("invalid value for \"apiList\" when calling AuthenticationServiceApi.usersAuthenticationRestCreatetokenPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/authentication/rest/createtoken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($tokenTemplate !== null) {
            $formParams['tokenTemplate'] = ObjectSerializer::toFormValue($tokenTemplate);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($expiresAt !== null) {
            $formParams['expiresAt'] = ObjectSerializer::toFormValue($expiresAt);
        }
        // form params
        if ($apiList !== null) {
            $formParams['apiList'] = ObjectSerializer::toFormValue($apiList);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersAuthenticationRestDeletetokensPost
     *
     * @param  string $ids ids (required)
     * @param  string $password password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestDeletetokensPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function usersAuthenticationRestDeletetokensPost($ids, $password = null, string $contentType = self::contentTypes['usersAuthenticationRestDeletetokensPost'][0])
    {
        list($response) = $this->usersAuthenticationRestDeletetokensPostWithHttpInfo($ids, $password, $contentType);
        return $response;
    }

    /**
     * Operation usersAuthenticationRestDeletetokensPostWithHttpInfo
     *
     * @param  string $ids (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestDeletetokensPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersAuthenticationRestDeletetokensPostWithHttpInfo($ids, $password = null, string $contentType = self::contentTypes['usersAuthenticationRestDeletetokensPost'][0])
    {
        $request = $this->usersAuthenticationRestDeletetokensPostRequest($ids, $password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAuthenticationRestDeletetokensPostAsync
     *
     * @param  string $ids (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestDeletetokensPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestDeletetokensPostAsync($ids, $password = null, string $contentType = self::contentTypes['usersAuthenticationRestDeletetokensPost'][0])
    {
        return $this->usersAuthenticationRestDeletetokensPostAsyncWithHttpInfo($ids, $password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAuthenticationRestDeletetokensPostAsyncWithHttpInfo
     *
     * @param  string $ids (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestDeletetokensPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestDeletetokensPostAsyncWithHttpInfo($ids, $password = null, string $contentType = self::contentTypes['usersAuthenticationRestDeletetokensPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->usersAuthenticationRestDeletetokensPostRequest($ids, $password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersAuthenticationRestDeletetokensPost'
     *
     * @param  string $ids (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestDeletetokensPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersAuthenticationRestDeletetokensPostRequest($ids, $password = null, string $contentType = self::contentTypes['usersAuthenticationRestDeletetokensPost'][0])
    {

        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling usersAuthenticationRestDeletetokensPost'
            );
        }
        if (strlen($ids) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$ids" when calling AuthenticationServiceApi.usersAuthenticationRestDeletetokensPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $ids)) {
            throw new \InvalidArgumentException("invalid value for \"ids\" when calling AuthenticationServiceApi.usersAuthenticationRestDeletetokensPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling AuthenticationServiceApi.usersAuthenticationRestDeletetokensPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling AuthenticationServiceApi.usersAuthenticationRestDeletetokensPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/authentication/rest/deletetokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($ids !== null) {
            $formParams['ids'] = ObjectSerializer::toFormValue($ids);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersAuthenticationRestEdittokenPost
     *
     * @param  int $id id (required)
     * @param  string $tokenTemplate tokenTemplate (optional)
     * @param  string $password password (optional)
     * @param  string $description description (optional)
     * @param  string $expiresAt expiresAt (optional)
     * @param  string $apiList apiList (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestEdittokenPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse
     */
    public function usersAuthenticationRestEdittokenPost($id, $tokenTemplate = null, $password = null, $description = null, $expiresAt = null, $apiList = null, string $contentType = self::contentTypes['usersAuthenticationRestEdittokenPost'][0])
    {
        list($response) = $this->usersAuthenticationRestEdittokenPostWithHttpInfo($id, $tokenTemplate, $password, $description, $expiresAt, $apiList, $contentType);
        return $response;
    }

    /**
     * Operation usersAuthenticationRestEdittokenPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $tokenTemplate (optional)
     * @param  string $password (optional)
     * @param  string $description (optional)
     * @param  string $expiresAt (optional)
     * @param  string $apiList (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestEdittokenPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersAuthenticationRestEdittokenPostWithHttpInfo($id, $tokenTemplate = null, $password = null, $description = null, $expiresAt = null, $apiList = null, string $contentType = self::contentTypes['usersAuthenticationRestEdittokenPost'][0])
    {
        $request = $this->usersAuthenticationRestEdittokenPostRequest($id, $tokenTemplate, $password, $description, $expiresAt, $apiList, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAuthenticationRestEdittokenPostAsync
     *
     * @param  int $id (required)
     * @param  string $tokenTemplate (optional)
     * @param  string $password (optional)
     * @param  string $description (optional)
     * @param  string $expiresAt (optional)
     * @param  string $apiList (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestEdittokenPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestEdittokenPostAsync($id, $tokenTemplate = null, $password = null, $description = null, $expiresAt = null, $apiList = null, string $contentType = self::contentTypes['usersAuthenticationRestEdittokenPost'][0])
    {
        return $this->usersAuthenticationRestEdittokenPostAsyncWithHttpInfo($id, $tokenTemplate, $password, $description, $expiresAt, $apiList, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAuthenticationRestEdittokenPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $tokenTemplate (optional)
     * @param  string $password (optional)
     * @param  string $description (optional)
     * @param  string $expiresAt (optional)
     * @param  string $apiList (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestEdittokenPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestEdittokenPostAsyncWithHttpInfo($id, $tokenTemplate = null, $password = null, $description = null, $expiresAt = null, $apiList = null, string $contentType = self::contentTypes['usersAuthenticationRestEdittokenPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse';
        $request = $this->usersAuthenticationRestEdittokenPostRequest($id, $tokenTemplate, $password, $description, $expiresAt, $apiList, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersAuthenticationRestEdittokenPost'
     *
     * @param  int $id (required)
     * @param  string $tokenTemplate (optional)
     * @param  string $password (optional)
     * @param  string $description (optional)
     * @param  string $expiresAt (optional)
     * @param  string $apiList (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestEdittokenPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersAuthenticationRestEdittokenPostRequest($id, $tokenTemplate = null, $password = null, $description = null, $expiresAt = null, $apiList = null, string $contentType = self::contentTypes['usersAuthenticationRestEdittokenPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersAuthenticationRestEdittokenPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling AuthenticationServiceApi.usersAuthenticationRestEdittokenPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling AuthenticationServiceApi.usersAuthenticationRestEdittokenPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($tokenTemplate !== null && strlen($tokenTemplate) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$tokenTemplate" when calling AuthenticationServiceApi.usersAuthenticationRestEdittokenPost, must be smaller than or equal to 2147483647.');
        }
        if ($tokenTemplate !== null && !preg_match("/(.*){0,2147483647}/", $tokenTemplate)) {
            throw new \InvalidArgumentException("invalid value for \"tokenTemplate\" when calling AuthenticationServiceApi.usersAuthenticationRestEdittokenPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling AuthenticationServiceApi.usersAuthenticationRestEdittokenPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling AuthenticationServiceApi.usersAuthenticationRestEdittokenPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($description !== null && strlen($description) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$description" when calling AuthenticationServiceApi.usersAuthenticationRestEdittokenPost, must be smaller than or equal to 2147483647.');
        }
        if ($description !== null && !preg_match("/(.*){0,2147483647}/", $description)) {
            throw new \InvalidArgumentException("invalid value for \"description\" when calling AuthenticationServiceApi.usersAuthenticationRestEdittokenPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($expiresAt !== null && strlen($expiresAt) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$expiresAt" when calling AuthenticationServiceApi.usersAuthenticationRestEdittokenPost, must be smaller than or equal to 2147483647.');
        }
        if ($expiresAt !== null && !preg_match("/(.*){0,2147483647}/", $expiresAt)) {
            throw new \InvalidArgumentException("invalid value for \"expiresAt\" when calling AuthenticationServiceApi.usersAuthenticationRestEdittokenPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($apiList !== null && strlen($apiList) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$apiList" when calling AuthenticationServiceApi.usersAuthenticationRestEdittokenPost, must be smaller than or equal to 2147483647.');
        }
        if ($apiList !== null && !preg_match("/(.*){0,2147483647}/", $apiList)) {
            throw new \InvalidArgumentException("invalid value for \"apiList\" when calling AuthenticationServiceApi.usersAuthenticationRestEdittokenPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/authentication/rest/edittoken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($tokenTemplate !== null) {
            $formParams['tokenTemplate'] = ObjectSerializer::toFormValue($tokenTemplate);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($expiresAt !== null) {
            $formParams['expiresAt'] = ObjectSerializer::toFormValue($expiresAt);
        }
        // form params
        if ($apiList !== null) {
            $formParams['apiList'] = ObjectSerializer::toFormValue($apiList);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersAuthenticationRestGetpolicymethodsPost
     *
     * @param  string $uniqueName uniqueName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGetpolicymethodsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse
     */
    public function usersAuthenticationRestGetpolicymethodsPost($uniqueName = null, string $contentType = self::contentTypes['usersAuthenticationRestGetpolicymethodsPost'][0])
    {
        list($response) = $this->usersAuthenticationRestGetpolicymethodsPostWithHttpInfo($uniqueName, $contentType);
        return $response;
    }

    /**
     * Operation usersAuthenticationRestGetpolicymethodsPostWithHttpInfo
     *
     * @param  string $uniqueName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGetpolicymethodsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersAuthenticationRestGetpolicymethodsPostWithHttpInfo($uniqueName = null, string $contentType = self::contentTypes['usersAuthenticationRestGetpolicymethodsPost'][0])
    {
        $request = $this->usersAuthenticationRestGetpolicymethodsPostRequest($uniqueName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAuthenticationRestGetpolicymethodsPostAsync
     *
     * @param  string $uniqueName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGetpolicymethodsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestGetpolicymethodsPostAsync($uniqueName = null, string $contentType = self::contentTypes['usersAuthenticationRestGetpolicymethodsPost'][0])
    {
        return $this->usersAuthenticationRestGetpolicymethodsPostAsyncWithHttpInfo($uniqueName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAuthenticationRestGetpolicymethodsPostAsyncWithHttpInfo
     *
     * @param  string $uniqueName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGetpolicymethodsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestGetpolicymethodsPostAsyncWithHttpInfo($uniqueName = null, string $contentType = self::contentTypes['usersAuthenticationRestGetpolicymethodsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse';
        $request = $this->usersAuthenticationRestGetpolicymethodsPostRequest($uniqueName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersAuthenticationRestGetpolicymethodsPost'
     *
     * @param  string $uniqueName (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGetpolicymethodsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersAuthenticationRestGetpolicymethodsPostRequest($uniqueName = null, string $contentType = self::contentTypes['usersAuthenticationRestGetpolicymethodsPost'][0])
    {

        if ($uniqueName !== null && strlen($uniqueName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$uniqueName" when calling AuthenticationServiceApi.usersAuthenticationRestGetpolicymethodsPost, must be smaller than or equal to 2147483647.');
        }
        if ($uniqueName !== null && !preg_match("/(.*){0,2147483647}/", $uniqueName)) {
            throw new \InvalidArgumentException("invalid value for \"uniqueName\" when calling AuthenticationServiceApi.usersAuthenticationRestGetpolicymethodsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/authentication/rest/getpolicymethods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($uniqueName !== null) {
            $formParams['uniqueName'] = ObjectSerializer::toFormValue($uniqueName);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersAuthenticationRestGetsessionsPost
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGetsessionsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseSessionsResponse
     */
    public function usersAuthenticationRestGetsessionsPost(string $contentType = self::contentTypes['usersAuthenticationRestGetsessionsPost'][0])
    {
        list($response) = $this->usersAuthenticationRestGetsessionsPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation usersAuthenticationRestGetsessionsPostWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGetsessionsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseSessionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersAuthenticationRestGetsessionsPostWithHttpInfo(string $contentType = self::contentTypes['usersAuthenticationRestGetsessionsPost'][0])
    {
        $request = $this->usersAuthenticationRestGetsessionsPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseSessionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseSessionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseSessionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseSessionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseSessionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAuthenticationRestGetsessionsPostAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGetsessionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestGetsessionsPostAsync(string $contentType = self::contentTypes['usersAuthenticationRestGetsessionsPost'][0])
    {
        return $this->usersAuthenticationRestGetsessionsPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAuthenticationRestGetsessionsPostAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGetsessionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestGetsessionsPostAsyncWithHttpInfo(string $contentType = self::contentTypes['usersAuthenticationRestGetsessionsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseSessionsResponse';
        $request = $this->usersAuthenticationRestGetsessionsPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersAuthenticationRestGetsessionsPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGetsessionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersAuthenticationRestGetsessionsPostRequest(string $contentType = self::contentTypes['usersAuthenticationRestGetsessionsPost'][0])
    {


        $resourcePath = '/users/authentication/rest/getsessions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersAuthenticationRestGettokenapilistPost
     *
     * @param  string $search search (optional)
     * @param  bool $showPrivate showPrivate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokenapilistPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse
     */
    public function usersAuthenticationRestGettokenapilistPost($search = null, $showPrivate = null, string $contentType = self::contentTypes['usersAuthenticationRestGettokenapilistPost'][0])
    {
        list($response) = $this->usersAuthenticationRestGettokenapilistPostWithHttpInfo($search, $showPrivate, $contentType);
        return $response;
    }

    /**
     * Operation usersAuthenticationRestGettokenapilistPostWithHttpInfo
     *
     * @param  string $search (optional)
     * @param  bool $showPrivate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokenapilistPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersAuthenticationRestGettokenapilistPostWithHttpInfo($search = null, $showPrivate = null, string $contentType = self::contentTypes['usersAuthenticationRestGettokenapilistPost'][0])
    {
        $request = $this->usersAuthenticationRestGettokenapilistPostRequest($search, $showPrivate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAuthenticationRestGettokenapilistPostAsync
     *
     * @param  string $search (optional)
     * @param  bool $showPrivate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokenapilistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestGettokenapilistPostAsync($search = null, $showPrivate = null, string $contentType = self::contentTypes['usersAuthenticationRestGettokenapilistPost'][0])
    {
        return $this->usersAuthenticationRestGettokenapilistPostAsyncWithHttpInfo($search, $showPrivate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAuthenticationRestGettokenapilistPostAsyncWithHttpInfo
     *
     * @param  string $search (optional)
     * @param  bool $showPrivate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokenapilistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestGettokenapilistPostAsyncWithHttpInfo($search = null, $showPrivate = null, string $contentType = self::contentTypes['usersAuthenticationRestGettokenapilistPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenPermissionsResponse';
        $request = $this->usersAuthenticationRestGettokenapilistPostRequest($search, $showPrivate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersAuthenticationRestGettokenapilistPost'
     *
     * @param  string $search (optional)
     * @param  bool $showPrivate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokenapilistPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersAuthenticationRestGettokenapilistPostRequest($search = null, $showPrivate = null, string $contentType = self::contentTypes['usersAuthenticationRestGettokenapilistPost'][0])
    {

        if ($search !== null && strlen($search) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$search" when calling AuthenticationServiceApi.usersAuthenticationRestGettokenapilistPost, must be smaller than or equal to 2147483647.');
        }
        if ($search !== null && !preg_match("/(.*){0,2147483647}/", $search)) {
            throw new \InvalidArgumentException("invalid value for \"search\" when calling AuthenticationServiceApi.usersAuthenticationRestGettokenapilistPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        


        $resourcePath = '/users/authentication/rest/gettokenapilist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($search !== null) {
            $formParams['search'] = ObjectSerializer::toFormValue($search);
        }
        // form params
        if ($showPrivate !== null) {
            $formParams['showPrivate'] = ObjectSerializer::toFormValue($showPrivate);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersAuthenticationRestGettokensPost
     *
     * @param  string $ids ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokensPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokensResponse
     */
    public function usersAuthenticationRestGettokensPost($ids = null, string $contentType = self::contentTypes['usersAuthenticationRestGettokensPost'][0])
    {
        list($response) = $this->usersAuthenticationRestGettokensPostWithHttpInfo($ids, $contentType);
        return $response;
    }

    /**
     * Operation usersAuthenticationRestGettokensPostWithHttpInfo
     *
     * @param  string $ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokensPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokensResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersAuthenticationRestGettokensPostWithHttpInfo($ids = null, string $contentType = self::contentTypes['usersAuthenticationRestGettokensPost'][0])
    {
        $request = $this->usersAuthenticationRestGettokensPostRequest($ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokensResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokensResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokensResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokensResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokensResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAuthenticationRestGettokensPostAsync
     *
     * @param  string $ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokensPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestGettokensPostAsync($ids = null, string $contentType = self::contentTypes['usersAuthenticationRestGettokensPost'][0])
    {
        return $this->usersAuthenticationRestGettokensPostAsyncWithHttpInfo($ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAuthenticationRestGettokensPostAsyncWithHttpInfo
     *
     * @param  string $ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokensPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestGettokensPostAsyncWithHttpInfo($ids = null, string $contentType = self::contentTypes['usersAuthenticationRestGettokensPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokensResponse';
        $request = $this->usersAuthenticationRestGettokensPostRequest($ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersAuthenticationRestGettokensPost'
     *
     * @param  string $ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokensPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersAuthenticationRestGettokensPostRequest($ids = null, string $contentType = self::contentTypes['usersAuthenticationRestGettokensPost'][0])
    {

        if ($ids !== null && strlen($ids) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$ids" when calling AuthenticationServiceApi.usersAuthenticationRestGettokensPost, must be smaller than or equal to 2147483647.');
        }
        if ($ids !== null && !preg_match("/(.*){0,2147483647}/", $ids)) {
            throw new \InvalidArgumentException("invalid value for \"ids\" when calling AuthenticationServiceApi.usersAuthenticationRestGettokensPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/authentication/rest/gettokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($ids !== null) {
            $formParams['ids'] = ObjectSerializer::toFormValue($ids);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersAuthenticationRestGettokentemplatesPost
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokentemplatesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenTemplatesResponse
     */
    public function usersAuthenticationRestGettokentemplatesPost(string $contentType = self::contentTypes['usersAuthenticationRestGettokentemplatesPost'][0])
    {
        list($response) = $this->usersAuthenticationRestGettokentemplatesPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation usersAuthenticationRestGettokentemplatesPostWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokentemplatesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenTemplatesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersAuthenticationRestGettokentemplatesPostWithHttpInfo(string $contentType = self::contentTypes['usersAuthenticationRestGettokentemplatesPost'][0])
    {
        $request = $this->usersAuthenticationRestGettokentemplatesPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenTemplatesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenTemplatesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenTemplatesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenTemplatesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenTemplatesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAuthenticationRestGettokentemplatesPostAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokentemplatesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestGettokentemplatesPostAsync(string $contentType = self::contentTypes['usersAuthenticationRestGettokentemplatesPost'][0])
    {
        return $this->usersAuthenticationRestGettokentemplatesPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAuthenticationRestGettokentemplatesPostAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokentemplatesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestGettokentemplatesPostAsyncWithHttpInfo(string $contentType = self::contentTypes['usersAuthenticationRestGettokentemplatesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenTemplatesResponse';
        $request = $this->usersAuthenticationRestGettokentemplatesPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersAuthenticationRestGettokentemplatesPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestGettokentemplatesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersAuthenticationRestGettokentemplatesPostRequest(string $contentType = self::contentTypes['usersAuthenticationRestGettokentemplatesPost'][0])
    {


        $resourcePath = '/users/authentication/rest/gettokentemplates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersAuthenticationRestRegeneratetokenPost
     *
     * @param  int $id id (required)
     * @param  string $password password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestRegeneratetokenPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse
     */
    public function usersAuthenticationRestRegeneratetokenPost($id, $password = null, string $contentType = self::contentTypes['usersAuthenticationRestRegeneratetokenPost'][0])
    {
        list($response) = $this->usersAuthenticationRestRegeneratetokenPostWithHttpInfo($id, $password, $contentType);
        return $response;
    }

    /**
     * Operation usersAuthenticationRestRegeneratetokenPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestRegeneratetokenPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersAuthenticationRestRegeneratetokenPostWithHttpInfo($id, $password = null, string $contentType = self::contentTypes['usersAuthenticationRestRegeneratetokenPost'][0])
    {
        $request = $this->usersAuthenticationRestRegeneratetokenPostRequest($id, $password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAuthenticationRestRegeneratetokenPostAsync
     *
     * @param  int $id (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestRegeneratetokenPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestRegeneratetokenPostAsync($id, $password = null, string $contentType = self::contentTypes['usersAuthenticationRestRegeneratetokenPost'][0])
    {
        return $this->usersAuthenticationRestRegeneratetokenPostAsyncWithHttpInfo($id, $password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAuthenticationRestRegeneratetokenPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestRegeneratetokenPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestRegeneratetokenPostAsyncWithHttpInfo($id, $password = null, string $contentType = self::contentTypes['usersAuthenticationRestRegeneratetokenPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseApiTokenResponse';
        $request = $this->usersAuthenticationRestRegeneratetokenPostRequest($id, $password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersAuthenticationRestRegeneratetokenPost'
     *
     * @param  int $id (required)
     * @param  string $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestRegeneratetokenPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersAuthenticationRestRegeneratetokenPostRequest($id, $password = null, string $contentType = self::contentTypes['usersAuthenticationRestRegeneratetokenPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling usersAuthenticationRestRegeneratetokenPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling AuthenticationServiceApi.usersAuthenticationRestRegeneratetokenPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling AuthenticationServiceApi.usersAuthenticationRestRegeneratetokenPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($password !== null && strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling AuthenticationServiceApi.usersAuthenticationRestRegeneratetokenPost, must be smaller than or equal to 2147483647.');
        }
        if ($password !== null && !preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling AuthenticationServiceApi.usersAuthenticationRestRegeneratetokenPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/authentication/rest/regeneratetoken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersAuthenticationRestSigninPost
     *
     * @param  string $password password (required)
     * @param  string $login login (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSigninPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse
     */
    public function usersAuthenticationRestSigninPost($password, $login, string $contentType = self::contentTypes['usersAuthenticationRestSigninPost'][0])
    {
        list($response) = $this->usersAuthenticationRestSigninPostWithHttpInfo($password, $login, $contentType);
        return $response;
    }

    /**
     * Operation usersAuthenticationRestSigninPostWithHttpInfo
     *
     * @param  string $password (required)
     * @param  string $login (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSigninPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersAuthenticationRestSigninPostWithHttpInfo($password, $login, string $contentType = self::contentTypes['usersAuthenticationRestSigninPost'][0])
    {
        $request = $this->usersAuthenticationRestSigninPostRequest($password, $login, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAuthenticationRestSigninPostAsync
     *
     * @param  string $password (required)
     * @param  string $login (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSigninPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestSigninPostAsync($password, $login, string $contentType = self::contentTypes['usersAuthenticationRestSigninPost'][0])
    {
        return $this->usersAuthenticationRestSigninPostAsyncWithHttpInfo($password, $login, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAuthenticationRestSigninPostAsyncWithHttpInfo
     *
     * @param  string $password (required)
     * @param  string $login (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSigninPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestSigninPostAsyncWithHttpInfo($password, $login, string $contentType = self::contentTypes['usersAuthenticationRestSigninPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerUsersResponseAuthenticationResponse';
        $request = $this->usersAuthenticationRestSigninPostRequest($password, $login, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersAuthenticationRestSigninPost'
     *
     * @param  string $password (required)
     * @param  string $login (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSigninPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersAuthenticationRestSigninPostRequest($password, $login, string $contentType = self::contentTypes['usersAuthenticationRestSigninPost'][0])
    {

        // verify the required parameter 'password' is set
        if ($password === null || (is_array($password) && count($password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $password when calling usersAuthenticationRestSigninPost'
            );
        }
        if (strlen($password) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$password" when calling AuthenticationServiceApi.usersAuthenticationRestSigninPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $password)) {
            throw new \InvalidArgumentException("invalid value for \"password\" when calling AuthenticationServiceApi.usersAuthenticationRestSigninPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'login' is set
        if ($login === null || (is_array($login) && count($login) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $login when calling usersAuthenticationRestSigninPost'
            );
        }
        if (strlen($login) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$login" when calling AuthenticationServiceApi.usersAuthenticationRestSigninPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $login)) {
            throw new \InvalidArgumentException("invalid value for \"login\" when calling AuthenticationServiceApi.usersAuthenticationRestSigninPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/authentication/rest/signin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($login !== null) {
            $formParams['login'] = ObjectSerializer::toFormValue($login);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersAuthenticationRestSignoutPost
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSignoutPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function usersAuthenticationRestSignoutPost(string $contentType = self::contentTypes['usersAuthenticationRestSignoutPost'][0])
    {
        list($response) = $this->usersAuthenticationRestSignoutPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation usersAuthenticationRestSignoutPostWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSignoutPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersAuthenticationRestSignoutPostWithHttpInfo(string $contentType = self::contentTypes['usersAuthenticationRestSignoutPost'][0])
    {
        $request = $this->usersAuthenticationRestSignoutPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAuthenticationRestSignoutPostAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSignoutPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestSignoutPostAsync(string $contentType = self::contentTypes['usersAuthenticationRestSignoutPost'][0])
    {
        return $this->usersAuthenticationRestSignoutPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAuthenticationRestSignoutPostAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSignoutPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestSignoutPostAsyncWithHttpInfo(string $contentType = self::contentTypes['usersAuthenticationRestSignoutPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->usersAuthenticationRestSignoutPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersAuthenticationRestSignoutPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSignoutPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersAuthenticationRestSignoutPostRequest(string $contentType = self::contentTypes['usersAuthenticationRestSignoutPost'][0])
    {


        $resourcePath = '/users/authentication/rest/signout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersAuthenticationRestSignoutsessionsPost
     *
     * @param  string $ids ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSignoutsessionsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function usersAuthenticationRestSignoutsessionsPost($ids, string $contentType = self::contentTypes['usersAuthenticationRestSignoutsessionsPost'][0])
    {
        list($response) = $this->usersAuthenticationRestSignoutsessionsPostWithHttpInfo($ids, $contentType);
        return $response;
    }

    /**
     * Operation usersAuthenticationRestSignoutsessionsPostWithHttpInfo
     *
     * @param  string $ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSignoutsessionsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersAuthenticationRestSignoutsessionsPostWithHttpInfo($ids, string $contentType = self::contentTypes['usersAuthenticationRestSignoutsessionsPost'][0])
    {
        $request = $this->usersAuthenticationRestSignoutsessionsPostRequest($ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAuthenticationRestSignoutsessionsPostAsync
     *
     * @param  string $ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSignoutsessionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestSignoutsessionsPostAsync($ids, string $contentType = self::contentTypes['usersAuthenticationRestSignoutsessionsPost'][0])
    {
        return $this->usersAuthenticationRestSignoutsessionsPostAsyncWithHttpInfo($ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAuthenticationRestSignoutsessionsPostAsyncWithHttpInfo
     *
     * @param  string $ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSignoutsessionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAuthenticationRestSignoutsessionsPostAsyncWithHttpInfo($ids, string $contentType = self::contentTypes['usersAuthenticationRestSignoutsessionsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->usersAuthenticationRestSignoutsessionsPostRequest($ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersAuthenticationRestSignoutsessionsPost'
     *
     * @param  string $ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersAuthenticationRestSignoutsessionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersAuthenticationRestSignoutsessionsPostRequest($ids, string $contentType = self::contentTypes['usersAuthenticationRestSignoutsessionsPost'][0])
    {

        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling usersAuthenticationRestSignoutsessionsPost'
            );
        }
        if (strlen($ids) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$ids" when calling AuthenticationServiceApi.usersAuthenticationRestSignoutsessionsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $ids)) {
            throw new \InvalidArgumentException("invalid value for \"ids\" when calling AuthenticationServiceApi.usersAuthenticationRestSignoutsessionsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/users/authentication/rest/signoutsessions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($ids !== null) {
            $formParams['ids'] = ObjectSerializer::toFormValue($ids);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
