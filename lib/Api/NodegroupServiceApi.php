<?php
/**
 * NodegroupServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * NodegroupServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NodegroupServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'environmentNodegroupRestApplydataPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentNodegroupRestGetPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentNodegroupRestSetoptionsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'environmentNodegroupRestSetslbaccessenabledPost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation environmentNodegroupRestApplydataPost
     *
     * @param  string $data data (required)
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestApplydataPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentNodegroupRestApplydataPost($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestApplydataPost'][0])
    {
        list($response) = $this->environmentNodegroupRestApplydataPostWithHttpInfo($data, $envName, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentNodegroupRestApplydataPostWithHttpInfo
     *
     * @param  string $data (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestApplydataPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentNodegroupRestApplydataPostWithHttpInfo($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestApplydataPost'][0])
    {
        $request = $this->environmentNodegroupRestApplydataPostRequest($data, $envName, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentNodegroupRestApplydataPostAsync
     *
     * @param  string $data (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestApplydataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentNodegroupRestApplydataPostAsync($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestApplydataPost'][0])
    {
        return $this->environmentNodegroupRestApplydataPostAsyncWithHttpInfo($data, $envName, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentNodegroupRestApplydataPostAsyncWithHttpInfo
     *
     * @param  string $data (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestApplydataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentNodegroupRestApplydataPostAsyncWithHttpInfo($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestApplydataPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentNodegroupRestApplydataPostRequest($data, $envName, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentNodegroupRestApplydataPost'
     *
     * @param  string $data (required)
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestApplydataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentNodegroupRestApplydataPostRequest($data, $envName, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestApplydataPost'][0])
    {

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling environmentNodegroupRestApplydataPost'
            );
        }
        if (strlen($data) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$data" when calling NodegroupServiceApi.environmentNodegroupRestApplydataPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $data)) {
            throw new \InvalidArgumentException("invalid value for \"data\" when calling NodegroupServiceApi.environmentNodegroupRestApplydataPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentNodegroupRestApplydataPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling NodegroupServiceApi.environmentNodegroupRestApplydataPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling NodegroupServiceApi.environmentNodegroupRestApplydataPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentNodegroupRestApplydataPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling NodegroupServiceApi.environmentNodegroupRestApplydataPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling NodegroupServiceApi.environmentNodegroupRestApplydataPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/nodegroup/rest/applydata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($data !== null) {
            $formParams['data'] = ObjectSerializer::toFormValue($data);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentNodegroupRestGetPost
     *
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestGetPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeGroupResponse
     */
    public function environmentNodegroupRestGetPost($envName, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestGetPost'][0])
    {
        list($response) = $this->environmentNodegroupRestGetPostWithHttpInfo($envName, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentNodegroupRestGetPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestGetPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentNodegroupRestGetPostWithHttpInfo($envName, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestGetPost'][0])
    {
        $request = $this->environmentNodegroupRestGetPostRequest($envName, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeGroupResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeGroupResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeGroupResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeGroupResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeGroupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentNodegroupRestGetPostAsync
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestGetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentNodegroupRestGetPostAsync($envName, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestGetPost'][0])
    {
        return $this->environmentNodegroupRestGetPostAsyncWithHttpInfo($envName, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentNodegroupRestGetPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestGetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentNodegroupRestGetPostAsyncWithHttpInfo($envName, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestGetPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerEnvironmentResponseNodeGroupResponse';
        $request = $this->environmentNodegroupRestGetPostRequest($envName, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentNodegroupRestGetPost'
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestGetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentNodegroupRestGetPostRequest($envName, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestGetPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentNodegroupRestGetPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling NodegroupServiceApi.environmentNodegroupRestGetPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling NodegroupServiceApi.environmentNodegroupRestGetPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentNodegroupRestGetPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling NodegroupServiceApi.environmentNodegroupRestGetPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling NodegroupServiceApi.environmentNodegroupRestGetPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/nodegroup/rest/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentNodegroupRestSetoptionsPost
     *
     * @param  string $envName envName (required)
     * @param  string $options options (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestSetoptionsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentNodegroupRestSetoptionsPost($envName, $options, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestSetoptionsPost'][0])
    {
        list($response) = $this->environmentNodegroupRestSetoptionsPostWithHttpInfo($envName, $options, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation environmentNodegroupRestSetoptionsPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $options (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestSetoptionsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentNodegroupRestSetoptionsPostWithHttpInfo($envName, $options, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestSetoptionsPost'][0])
    {
        $request = $this->environmentNodegroupRestSetoptionsPostRequest($envName, $options, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentNodegroupRestSetoptionsPostAsync
     *
     * @param  string $envName (required)
     * @param  string $options (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestSetoptionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentNodegroupRestSetoptionsPostAsync($envName, $options, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestSetoptionsPost'][0])
    {
        return $this->environmentNodegroupRestSetoptionsPostAsyncWithHttpInfo($envName, $options, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentNodegroupRestSetoptionsPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $options (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestSetoptionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentNodegroupRestSetoptionsPostAsyncWithHttpInfo($envName, $options, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestSetoptionsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentNodegroupRestSetoptionsPostRequest($envName, $options, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentNodegroupRestSetoptionsPost'
     *
     * @param  string $envName (required)
     * @param  string $options (required)
     * @param  string $nodeGroup (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestSetoptionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentNodegroupRestSetoptionsPostRequest($envName, $options, $nodeGroup, string $contentType = self::contentTypes['environmentNodegroupRestSetoptionsPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentNodegroupRestSetoptionsPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling NodegroupServiceApi.environmentNodegroupRestSetoptionsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling NodegroupServiceApi.environmentNodegroupRestSetoptionsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'options' is set
        if ($options === null || (is_array($options) && count($options) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $options when calling environmentNodegroupRestSetoptionsPost'
            );
        }
        if (strlen($options) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$options" when calling NodegroupServiceApi.environmentNodegroupRestSetoptionsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $options)) {
            throw new \InvalidArgumentException("invalid value for \"options\" when calling NodegroupServiceApi.environmentNodegroupRestSetoptionsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentNodegroupRestSetoptionsPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling NodegroupServiceApi.environmentNodegroupRestSetoptionsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling NodegroupServiceApi.environmentNodegroupRestSetoptionsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/environment/nodegroup/rest/setoptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($options !== null) {
            $formParams['options'] = ObjectSerializer::toFormValue($options);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation environmentNodegroupRestSetslbaccessenabledPost
     *
     * @param  string $envName envName (required)
     * @param  string $nodeGroup nodeGroup (required)
     * @param  bool $enabled enabled (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestSetslbaccessenabledPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function environmentNodegroupRestSetslbaccessenabledPost($envName, $nodeGroup, $enabled, string $contentType = self::contentTypes['environmentNodegroupRestSetslbaccessenabledPost'][0])
    {
        list($response) = $this->environmentNodegroupRestSetslbaccessenabledPostWithHttpInfo($envName, $nodeGroup, $enabled, $contentType);
        return $response;
    }

    /**
     * Operation environmentNodegroupRestSetslbaccessenabledPostWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  bool $enabled (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestSetslbaccessenabledPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function environmentNodegroupRestSetslbaccessenabledPostWithHttpInfo($envName, $nodeGroup, $enabled, string $contentType = self::contentTypes['environmentNodegroupRestSetslbaccessenabledPost'][0])
    {
        $request = $this->environmentNodegroupRestSetslbaccessenabledPostRequest($envName, $nodeGroup, $enabled, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation environmentNodegroupRestSetslbaccessenabledPostAsync
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  bool $enabled (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestSetslbaccessenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentNodegroupRestSetslbaccessenabledPostAsync($envName, $nodeGroup, $enabled, string $contentType = self::contentTypes['environmentNodegroupRestSetslbaccessenabledPost'][0])
    {
        return $this->environmentNodegroupRestSetslbaccessenabledPostAsyncWithHttpInfo($envName, $nodeGroup, $enabled, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation environmentNodegroupRestSetslbaccessenabledPostAsyncWithHttpInfo
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  bool $enabled (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestSetslbaccessenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function environmentNodegroupRestSetslbaccessenabledPostAsyncWithHttpInfo($envName, $nodeGroup, $enabled, string $contentType = self::contentTypes['environmentNodegroupRestSetslbaccessenabledPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->environmentNodegroupRestSetslbaccessenabledPostRequest($envName, $nodeGroup, $enabled, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'environmentNodegroupRestSetslbaccessenabledPost'
     *
     * @param  string $envName (required)
     * @param  string $nodeGroup (required)
     * @param  bool $enabled (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['environmentNodegroupRestSetslbaccessenabledPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function environmentNodegroupRestSetslbaccessenabledPostRequest($envName, $nodeGroup, $enabled, string $contentType = self::contentTypes['environmentNodegroupRestSetslbaccessenabledPost'][0])
    {

        // verify the required parameter 'envName' is set
        if ($envName === null || (is_array($envName) && count($envName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envName when calling environmentNodegroupRestSetslbaccessenabledPost'
            );
        }
        if (strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling NodegroupServiceApi.environmentNodegroupRestSetslbaccessenabledPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling NodegroupServiceApi.environmentNodegroupRestSetslbaccessenabledPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'nodeGroup' is set
        if ($nodeGroup === null || (is_array($nodeGroup) && count($nodeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nodeGroup when calling environmentNodegroupRestSetslbaccessenabledPost'
            );
        }
        if (strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling NodegroupServiceApi.environmentNodegroupRestSetslbaccessenabledPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling NodegroupServiceApi.environmentNodegroupRestSetslbaccessenabledPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'enabled' is set
        if ($enabled === null || (is_array($enabled) && count($enabled) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enabled when calling environmentNodegroupRestSetslbaccessenabledPost'
            );
        }


        $resourcePath = '/environment/nodegroup/rest/setslbaccessenabled';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }
        // form params
        if ($enabled !== null) {
            $formParams['enabled'] = ObjectSerializer::toFormValue($enabled);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
