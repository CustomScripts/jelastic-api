<?php
/**
 * SchedulerServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * SchedulerServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SchedulerServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'utilsSchedulerRestCreateaccounttaskPost' => [
            'application/x-www-form-urlencoded',
        ],
        'utilsSchedulerRestCreateenvtaskPost' => [
            'application/x-www-form-urlencoded',
        ],
        'utilsSchedulerRestDeletetasksPost' => [
            'application/x-www-form-urlencoded',
        ],
        'utilsSchedulerRestEdittaskPost' => [
            'application/x-www-form-urlencoded',
        ],
        'utilsSchedulerRestGettasksPost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation utilsSchedulerRestCreateaccounttaskPost
     *
     * @param  string $trigger trigger (required)
     * @param  string $script script (required)
     * @param  string $description description (optional)
     * @param  string $params params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestCreateaccounttaskPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse
     */
    public function utilsSchedulerRestCreateaccounttaskPost($trigger, $script, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestCreateaccounttaskPost'][0])
    {
        list($response) = $this->utilsSchedulerRestCreateaccounttaskPostWithHttpInfo($trigger, $script, $description, $params, $contentType);
        return $response;
    }

    /**
     * Operation utilsSchedulerRestCreateaccounttaskPostWithHttpInfo
     *
     * @param  string $trigger (required)
     * @param  string $script (required)
     * @param  string $description (optional)
     * @param  string $params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestCreateaccounttaskPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function utilsSchedulerRestCreateaccounttaskPostWithHttpInfo($trigger, $script, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestCreateaccounttaskPost'][0])
    {
        $request = $this->utilsSchedulerRestCreateaccounttaskPostRequest($trigger, $script, $description, $params, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation utilsSchedulerRestCreateaccounttaskPostAsync
     *
     * @param  string $trigger (required)
     * @param  string $script (required)
     * @param  string $description (optional)
     * @param  string $params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestCreateaccounttaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function utilsSchedulerRestCreateaccounttaskPostAsync($trigger, $script, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestCreateaccounttaskPost'][0])
    {
        return $this->utilsSchedulerRestCreateaccounttaskPostAsyncWithHttpInfo($trigger, $script, $description, $params, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation utilsSchedulerRestCreateaccounttaskPostAsyncWithHttpInfo
     *
     * @param  string $trigger (required)
     * @param  string $script (required)
     * @param  string $description (optional)
     * @param  string $params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestCreateaccounttaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function utilsSchedulerRestCreateaccounttaskPostAsyncWithHttpInfo($trigger, $script, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestCreateaccounttaskPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse';
        $request = $this->utilsSchedulerRestCreateaccounttaskPostRequest($trigger, $script, $description, $params, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'utilsSchedulerRestCreateaccounttaskPost'
     *
     * @param  string $trigger (required)
     * @param  string $script (required)
     * @param  string $description (optional)
     * @param  string $params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestCreateaccounttaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function utilsSchedulerRestCreateaccounttaskPostRequest($trigger, $script, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestCreateaccounttaskPost'][0])
    {

        // verify the required parameter 'trigger' is set
        if ($trigger === null || (is_array($trigger) && count($trigger) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trigger when calling utilsSchedulerRestCreateaccounttaskPost'
            );
        }
        if (strlen($trigger) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$trigger" when calling SchedulerServiceApi.utilsSchedulerRestCreateaccounttaskPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $trigger)) {
            throw new \InvalidArgumentException("invalid value for \"trigger\" when calling SchedulerServiceApi.utilsSchedulerRestCreateaccounttaskPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'script' is set
        if ($script === null || (is_array($script) && count($script) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $script when calling utilsSchedulerRestCreateaccounttaskPost'
            );
        }
        if (strlen($script) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$script" when calling SchedulerServiceApi.utilsSchedulerRestCreateaccounttaskPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $script)) {
            throw new \InvalidArgumentException("invalid value for \"script\" when calling SchedulerServiceApi.utilsSchedulerRestCreateaccounttaskPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($description !== null && strlen($description) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$description" when calling SchedulerServiceApi.utilsSchedulerRestCreateaccounttaskPost, must be smaller than or equal to 2147483647.');
        }
        if ($description !== null && !preg_match("/(.*){0,2147483647}/", $description)) {
            throw new \InvalidArgumentException("invalid value for \"description\" when calling SchedulerServiceApi.utilsSchedulerRestCreateaccounttaskPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($params !== null && strlen($params) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$params" when calling SchedulerServiceApi.utilsSchedulerRestCreateaccounttaskPost, must be smaller than or equal to 2147483647.');
        }
        if ($params !== null && !preg_match("/(.*){0,2147483647}/", $params)) {
            throw new \InvalidArgumentException("invalid value for \"params\" when calling SchedulerServiceApi.utilsSchedulerRestCreateaccounttaskPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/utils/scheduler/rest/createaccounttask';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($trigger !== null) {
            $formParams['trigger'] = ObjectSerializer::toFormValue($trigger);
        }
        // form params
        if ($params !== null) {
            $formParams['params'] = ObjectSerializer::toFormValue($params);
        }
        // form params
        if ($script !== null) {
            $formParams['script'] = ObjectSerializer::toFormValue($script);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation utilsSchedulerRestCreateenvtaskPost
     *
     * @param  string $trigger trigger (required)
     * @param  string $script script (required)
     * @param  string $envName envName (optional)
     * @param  string $description description (optional)
     * @param  string $params params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestCreateenvtaskPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse
     */
    public function utilsSchedulerRestCreateenvtaskPost($trigger, $script, $envName = null, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestCreateenvtaskPost'][0])
    {
        list($response) = $this->utilsSchedulerRestCreateenvtaskPostWithHttpInfo($trigger, $script, $envName, $description, $params, $contentType);
        return $response;
    }

    /**
     * Operation utilsSchedulerRestCreateenvtaskPostWithHttpInfo
     *
     * @param  string $trigger (required)
     * @param  string $script (required)
     * @param  string $envName (optional)
     * @param  string $description (optional)
     * @param  string $params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestCreateenvtaskPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function utilsSchedulerRestCreateenvtaskPostWithHttpInfo($trigger, $script, $envName = null, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestCreateenvtaskPost'][0])
    {
        $request = $this->utilsSchedulerRestCreateenvtaskPostRequest($trigger, $script, $envName, $description, $params, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation utilsSchedulerRestCreateenvtaskPostAsync
     *
     * @param  string $trigger (required)
     * @param  string $script (required)
     * @param  string $envName (optional)
     * @param  string $description (optional)
     * @param  string $params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestCreateenvtaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function utilsSchedulerRestCreateenvtaskPostAsync($trigger, $script, $envName = null, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestCreateenvtaskPost'][0])
    {
        return $this->utilsSchedulerRestCreateenvtaskPostAsyncWithHttpInfo($trigger, $script, $envName, $description, $params, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation utilsSchedulerRestCreateenvtaskPostAsyncWithHttpInfo
     *
     * @param  string $trigger (required)
     * @param  string $script (required)
     * @param  string $envName (optional)
     * @param  string $description (optional)
     * @param  string $params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestCreateenvtaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function utilsSchedulerRestCreateenvtaskPostAsyncWithHttpInfo($trigger, $script, $envName = null, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestCreateenvtaskPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse';
        $request = $this->utilsSchedulerRestCreateenvtaskPostRequest($trigger, $script, $envName, $description, $params, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'utilsSchedulerRestCreateenvtaskPost'
     *
     * @param  string $trigger (required)
     * @param  string $script (required)
     * @param  string $envName (optional)
     * @param  string $description (optional)
     * @param  string $params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestCreateenvtaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function utilsSchedulerRestCreateenvtaskPostRequest($trigger, $script, $envName = null, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestCreateenvtaskPost'][0])
    {

        // verify the required parameter 'trigger' is set
        if ($trigger === null || (is_array($trigger) && count($trigger) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trigger when calling utilsSchedulerRestCreateenvtaskPost'
            );
        }
        if (strlen($trigger) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$trigger" when calling SchedulerServiceApi.utilsSchedulerRestCreateenvtaskPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $trigger)) {
            throw new \InvalidArgumentException("invalid value for \"trigger\" when calling SchedulerServiceApi.utilsSchedulerRestCreateenvtaskPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'script' is set
        if ($script === null || (is_array($script) && count($script) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $script when calling utilsSchedulerRestCreateenvtaskPost'
            );
        }
        if (strlen($script) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$script" when calling SchedulerServiceApi.utilsSchedulerRestCreateenvtaskPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $script)) {
            throw new \InvalidArgumentException("invalid value for \"script\" when calling SchedulerServiceApi.utilsSchedulerRestCreateenvtaskPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling SchedulerServiceApi.utilsSchedulerRestCreateenvtaskPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling SchedulerServiceApi.utilsSchedulerRestCreateenvtaskPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($description !== null && strlen($description) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$description" when calling SchedulerServiceApi.utilsSchedulerRestCreateenvtaskPost, must be smaller than or equal to 2147483647.');
        }
        if ($description !== null && !preg_match("/(.*){0,2147483647}/", $description)) {
            throw new \InvalidArgumentException("invalid value for \"description\" when calling SchedulerServiceApi.utilsSchedulerRestCreateenvtaskPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($params !== null && strlen($params) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$params" when calling SchedulerServiceApi.utilsSchedulerRestCreateenvtaskPost, must be smaller than or equal to 2147483647.');
        }
        if ($params !== null && !preg_match("/(.*){0,2147483647}/", $params)) {
            throw new \InvalidArgumentException("invalid value for \"params\" when calling SchedulerServiceApi.utilsSchedulerRestCreateenvtaskPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/utils/scheduler/rest/createenvtask';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($trigger !== null) {
            $formParams['trigger'] = ObjectSerializer::toFormValue($trigger);
        }
        // form params
        if ($params !== null) {
            $formParams['params'] = ObjectSerializer::toFormValue($params);
        }
        // form params
        if ($script !== null) {
            $formParams['script'] = ObjectSerializer::toFormValue($script);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation utilsSchedulerRestDeletetasksPost
     *
     * @param  string $ids ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestDeletetasksPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiResponse
     */
    public function utilsSchedulerRestDeletetasksPost($ids, string $contentType = self::contentTypes['utilsSchedulerRestDeletetasksPost'][0])
    {
        list($response) = $this->utilsSchedulerRestDeletetasksPostWithHttpInfo($ids, $contentType);
        return $response;
    }

    /**
     * Operation utilsSchedulerRestDeletetasksPostWithHttpInfo
     *
     * @param  string $ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestDeletetasksPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function utilsSchedulerRestDeletetasksPostWithHttpInfo($ids, string $contentType = self::contentTypes['utilsSchedulerRestDeletetasksPost'][0])
    {
        $request = $this->utilsSchedulerRestDeletetasksPostRequest($ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation utilsSchedulerRestDeletetasksPostAsync
     *
     * @param  string $ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestDeletetasksPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function utilsSchedulerRestDeletetasksPostAsync($ids, string $contentType = self::contentTypes['utilsSchedulerRestDeletetasksPost'][0])
    {
        return $this->utilsSchedulerRestDeletetasksPostAsyncWithHttpInfo($ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation utilsSchedulerRestDeletetasksPostAsyncWithHttpInfo
     *
     * @param  string $ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestDeletetasksPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function utilsSchedulerRestDeletetasksPostAsyncWithHttpInfo($ids, string $contentType = self::contentTypes['utilsSchedulerRestDeletetasksPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiResponse';
        $request = $this->utilsSchedulerRestDeletetasksPostRequest($ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'utilsSchedulerRestDeletetasksPost'
     *
     * @param  string $ids (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestDeletetasksPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function utilsSchedulerRestDeletetasksPostRequest($ids, string $contentType = self::contentTypes['utilsSchedulerRestDeletetasksPost'][0])
    {

        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling utilsSchedulerRestDeletetasksPost'
            );
        }
        if (strlen($ids) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$ids" when calling SchedulerServiceApi.utilsSchedulerRestDeletetasksPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $ids)) {
            throw new \InvalidArgumentException("invalid value for \"ids\" when calling SchedulerServiceApi.utilsSchedulerRestDeletetasksPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/utils/scheduler/rest/deletetasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($ids !== null) {
            $formParams['ids'] = ObjectSerializer::toFormValue($ids);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation utilsSchedulerRestEdittaskPost
     *
     * @param  string $trigger trigger (required)
     * @param  int $id id (required)
     * @param  string $script script (required)
     * @param  string $description description (optional)
     * @param  string $params params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestEdittaskPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse
     */
    public function utilsSchedulerRestEdittaskPost($trigger, $id, $script, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestEdittaskPost'][0])
    {
        list($response) = $this->utilsSchedulerRestEdittaskPostWithHttpInfo($trigger, $id, $script, $description, $params, $contentType);
        return $response;
    }

    /**
     * Operation utilsSchedulerRestEdittaskPostWithHttpInfo
     *
     * @param  string $trigger (required)
     * @param  int $id (required)
     * @param  string $script (required)
     * @param  string $description (optional)
     * @param  string $params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestEdittaskPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function utilsSchedulerRestEdittaskPostWithHttpInfo($trigger, $id, $script, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestEdittaskPost'][0])
    {
        $request = $this->utilsSchedulerRestEdittaskPostRequest($trigger, $id, $script, $description, $params, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation utilsSchedulerRestEdittaskPostAsync
     *
     * @param  string $trigger (required)
     * @param  int $id (required)
     * @param  string $script (required)
     * @param  string $description (optional)
     * @param  string $params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestEdittaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function utilsSchedulerRestEdittaskPostAsync($trigger, $id, $script, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestEdittaskPost'][0])
    {
        return $this->utilsSchedulerRestEdittaskPostAsyncWithHttpInfo($trigger, $id, $script, $description, $params, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation utilsSchedulerRestEdittaskPostAsyncWithHttpInfo
     *
     * @param  string $trigger (required)
     * @param  int $id (required)
     * @param  string $script (required)
     * @param  string $description (optional)
     * @param  string $params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestEdittaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function utilsSchedulerRestEdittaskPostAsyncWithHttpInfo($trigger, $id, $script, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestEdittaskPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectResponse';
        $request = $this->utilsSchedulerRestEdittaskPostRequest($trigger, $id, $script, $description, $params, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'utilsSchedulerRestEdittaskPost'
     *
     * @param  string $trigger (required)
     * @param  int $id (required)
     * @param  string $script (required)
     * @param  string $description (optional)
     * @param  string $params (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestEdittaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function utilsSchedulerRestEdittaskPostRequest($trigger, $id, $script, $description = null, $params = null, string $contentType = self::contentTypes['utilsSchedulerRestEdittaskPost'][0])
    {

        // verify the required parameter 'trigger' is set
        if ($trigger === null || (is_array($trigger) && count($trigger) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trigger when calling utilsSchedulerRestEdittaskPost'
            );
        }
        if (strlen($trigger) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$trigger" when calling SchedulerServiceApi.utilsSchedulerRestEdittaskPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $trigger)) {
            throw new \InvalidArgumentException("invalid value for \"trigger\" when calling SchedulerServiceApi.utilsSchedulerRestEdittaskPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling utilsSchedulerRestEdittaskPost'
            );
        }
        if ($id > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling SchedulerServiceApi.utilsSchedulerRestEdittaskPost, must be smaller than or equal to 2147483647.');
        }
        if ($id < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling SchedulerServiceApi.utilsSchedulerRestEdittaskPost, must be bigger than or equal to -2147483648.');
        }
        
        // verify the required parameter 'script' is set
        if ($script === null || (is_array($script) && count($script) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $script when calling utilsSchedulerRestEdittaskPost'
            );
        }
        if (strlen($script) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$script" when calling SchedulerServiceApi.utilsSchedulerRestEdittaskPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $script)) {
            throw new \InvalidArgumentException("invalid value for \"script\" when calling SchedulerServiceApi.utilsSchedulerRestEdittaskPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($description !== null && strlen($description) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$description" when calling SchedulerServiceApi.utilsSchedulerRestEdittaskPost, must be smaller than or equal to 2147483647.');
        }
        if ($description !== null && !preg_match("/(.*){0,2147483647}/", $description)) {
            throw new \InvalidArgumentException("invalid value for \"description\" when calling SchedulerServiceApi.utilsSchedulerRestEdittaskPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($params !== null && strlen($params) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$params" when calling SchedulerServiceApi.utilsSchedulerRestEdittaskPost, must be smaller than or equal to 2147483647.');
        }
        if ($params !== null && !preg_match("/(.*){0,2147483647}/", $params)) {
            throw new \InvalidArgumentException("invalid value for \"params\" when calling SchedulerServiceApi.utilsSchedulerRestEdittaskPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/utils/scheduler/rest/edittask';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($trigger !== null) {
            $formParams['trigger'] = ObjectSerializer::toFormValue($trigger);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($params !== null) {
            $formParams['params'] = ObjectSerializer::toFormValue($params);
        }
        // form params
        if ($script !== null) {
            $formParams['script'] = ObjectSerializer::toFormValue($script);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation utilsSchedulerRestGettasksPost
     *
     * @param  string $ids ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestGettasksPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsResponse
     */
    public function utilsSchedulerRestGettasksPost($ids = null, string $contentType = self::contentTypes['utilsSchedulerRestGettasksPost'][0])
    {
        list($response) = $this->utilsSchedulerRestGettasksPostWithHttpInfo($ids, $contentType);
        return $response;
    }

    /**
     * Operation utilsSchedulerRestGettasksPostWithHttpInfo
     *
     * @param  string $ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestGettasksPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function utilsSchedulerRestGettasksPostWithHttpInfo($ids = null, string $contentType = self::contentTypes['utilsSchedulerRestGettasksPost'][0])
    {
        $request = $this->utilsSchedulerRestGettasksPostRequest($ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation utilsSchedulerRestGettasksPostAsync
     *
     * @param  string $ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestGettasksPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function utilsSchedulerRestGettasksPostAsync($ids = null, string $contentType = self::contentTypes['utilsSchedulerRestGettasksPost'][0])
    {
        return $this->utilsSchedulerRestGettasksPostAsyncWithHttpInfo($ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation utilsSchedulerRestGettasksPostAsyncWithHttpInfo
     *
     * @param  string $ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestGettasksPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function utilsSchedulerRestGettasksPostAsyncWithHttpInfo($ids = null, string $contentType = self::contentTypes['utilsSchedulerRestGettasksPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerDataResponseObjectsResponse';
        $request = $this->utilsSchedulerRestGettasksPostRequest($ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'utilsSchedulerRestGettasksPost'
     *
     * @param  string $ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['utilsSchedulerRestGettasksPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function utilsSchedulerRestGettasksPostRequest($ids = null, string $contentType = self::contentTypes['utilsSchedulerRestGettasksPost'][0])
    {

        if ($ids !== null && strlen($ids) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$ids" when calling SchedulerServiceApi.utilsSchedulerRestGettasksPost, must be smaller than or equal to 2147483647.');
        }
        if ($ids !== null && !preg_match("/(.*){0,2147483647}/", $ids)) {
            throw new \InvalidArgumentException("invalid value for \"ids\" when calling SchedulerServiceApi.utilsSchedulerRestGettasksPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/utils/scheduler/rest/gettasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($ids !== null) {
            $formParams['ids'] = ObjectSerializer::toFormValue($ids);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
