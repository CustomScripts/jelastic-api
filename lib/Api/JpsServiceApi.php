<?php
/**
 * JpsServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jelastic API docs
 *
 * lets developers to automate a set of actions required for application lifecycle and extend our platform functionality by combining with other services. Using our API you can programmatically create environments, deploy apps and perform other tasks that could be earlier accomplished only via Jelastic dashboard but not limited to them.  Jelastic API follows REST principles. REST API determines a set of functions which can be requested by a developer, who then receives a response. The interaction is performed via HTTP protocol. The advantage of such method is a wide extension of the HTTP protocol. That's why REST API can be used from almost any programming language.
 *
 * The version of the OpenAPI document: 8.0.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * JpsServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class JpsServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'marketplaceJpsRestExecuteappactionPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceJpsRestGetappinfoPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceJpsRestGetappsettingsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceJpsRestGetengineversionPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceJpsRestGetscriptingappidPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceJpsRestInstallPost' => [
            'application/x-www-form-urlencoded',
        ],
        'marketplaceJpsRestUninstallPost' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation marketplaceJpsRestExecuteappactionPost
     *
     * @param  string $appUniqueName appUniqueName (required)
     * @param  string $action action (optional)
     * @param  string $settingsId settingsId (optional)
     * @param  string $params params (optional)
     * @param  string $lang lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestExecuteappactionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse
     */
    public function marketplaceJpsRestExecuteappactionPost($appUniqueName, $action = null, $settingsId = null, $params = null, $lang = null, string $contentType = self::contentTypes['marketplaceJpsRestExecuteappactionPost'][0])
    {
        list($response) = $this->marketplaceJpsRestExecuteappactionPostWithHttpInfo($appUniqueName, $action, $settingsId, $params, $lang, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceJpsRestExecuteappactionPostWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  string $action (optional)
     * @param  string $settingsId (optional)
     * @param  string $params (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestExecuteappactionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceJpsRestExecuteappactionPostWithHttpInfo($appUniqueName, $action = null, $settingsId = null, $params = null, $lang = null, string $contentType = self::contentTypes['marketplaceJpsRestExecuteappactionPost'][0])
    {
        $request = $this->marketplaceJpsRestExecuteappactionPostRequest($appUniqueName, $action, $settingsId, $params, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceJpsRestExecuteappactionPostAsync
     *
     * @param  string $appUniqueName (required)
     * @param  string $action (optional)
     * @param  string $settingsId (optional)
     * @param  string $params (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestExecuteappactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceJpsRestExecuteappactionPostAsync($appUniqueName, $action = null, $settingsId = null, $params = null, $lang = null, string $contentType = self::contentTypes['marketplaceJpsRestExecuteappactionPost'][0])
    {
        return $this->marketplaceJpsRestExecuteappactionPostAsyncWithHttpInfo($appUniqueName, $action, $settingsId, $params, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceJpsRestExecuteappactionPostAsyncWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  string $action (optional)
     * @param  string $settingsId (optional)
     * @param  string $params (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestExecuteappactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceJpsRestExecuteappactionPostAsyncWithHttpInfo($appUniqueName, $action = null, $settingsId = null, $params = null, $lang = null, string $contentType = self::contentTypes['marketplaceJpsRestExecuteappactionPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse';
        $request = $this->marketplaceJpsRestExecuteappactionPostRequest($appUniqueName, $action, $settingsId, $params, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceJpsRestExecuteappactionPost'
     *
     * @param  string $appUniqueName (required)
     * @param  string $action (optional)
     * @param  string $settingsId (optional)
     * @param  string $params (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestExecuteappactionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceJpsRestExecuteappactionPostRequest($appUniqueName, $action = null, $settingsId = null, $params = null, $lang = null, string $contentType = self::contentTypes['marketplaceJpsRestExecuteappactionPost'][0])
    {

        // verify the required parameter 'appUniqueName' is set
        if ($appUniqueName === null || (is_array($appUniqueName) && count($appUniqueName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appUniqueName when calling marketplaceJpsRestExecuteappactionPost'
            );
        }
        if (strlen($appUniqueName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$appUniqueName" when calling JpsServiceApi.marketplaceJpsRestExecuteappactionPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $appUniqueName)) {
            throw new \InvalidArgumentException("invalid value for \"appUniqueName\" when calling JpsServiceApi.marketplaceJpsRestExecuteappactionPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($action !== null && strlen($action) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$action" when calling JpsServiceApi.marketplaceJpsRestExecuteappactionPost, must be smaller than or equal to 2147483647.');
        }
        if ($action !== null && !preg_match("/(.*){0,2147483647}/", $action)) {
            throw new \InvalidArgumentException("invalid value for \"action\" when calling JpsServiceApi.marketplaceJpsRestExecuteappactionPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($settingsId !== null && strlen($settingsId) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$settingsId" when calling JpsServiceApi.marketplaceJpsRestExecuteappactionPost, must be smaller than or equal to 2147483647.');
        }
        if ($settingsId !== null && !preg_match("/(.*){0,2147483647}/", $settingsId)) {
            throw new \InvalidArgumentException("invalid value for \"settingsId\" when calling JpsServiceApi.marketplaceJpsRestExecuteappactionPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($params !== null && strlen($params) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$params" when calling JpsServiceApi.marketplaceJpsRestExecuteappactionPost, must be smaller than or equal to 2147483647.');
        }
        if ($params !== null && !preg_match("/(.*){0,2147483647}/", $params)) {
            throw new \InvalidArgumentException("invalid value for \"params\" when calling JpsServiceApi.marketplaceJpsRestExecuteappactionPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($lang !== null && strlen($lang) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$lang" when calling JpsServiceApi.marketplaceJpsRestExecuteappactionPost, must be smaller than or equal to 2147483647.');
        }
        if ($lang !== null && !preg_match("/(.*){0,2147483647}/", $lang)) {
            throw new \InvalidArgumentException("invalid value for \"lang\" when calling JpsServiceApi.marketplaceJpsRestExecuteappactionPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/marketplace/jps/rest/executeappaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($appUniqueName !== null) {
            $formParams['appUniqueName'] = ObjectSerializer::toFormValue($appUniqueName);
        }
        // form params
        if ($action !== null) {
            $formParams['action'] = ObjectSerializer::toFormValue($action);
        }
        // form params
        if ($settingsId !== null) {
            $formParams['settingsId'] = ObjectSerializer::toFormValue($settingsId);
        }
        // form params
        if ($params !== null) {
            $formParams['params'] = ObjectSerializer::toFormValue($params);
        }
        // form params
        if ($lang !== null) {
            $formParams['lang'] = ObjectSerializer::toFormValue($lang);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceJpsRestGetappinfoPost
     *
     * @param  string $jps jps (optional)
     * @param  string $lang lang (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetappinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse
     */
    public function marketplaceJpsRestGetappinfoPost($jps = null, $lang = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceJpsRestGetappinfoPost'][0])
    {
        list($response) = $this->marketplaceJpsRestGetappinfoPostWithHttpInfo($jps, $lang, $ownerUid, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceJpsRestGetappinfoPostWithHttpInfo
     *
     * @param  string $jps (optional)
     * @param  string $lang (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetappinfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceJpsRestGetappinfoPostWithHttpInfo($jps = null, $lang = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceJpsRestGetappinfoPost'][0])
    {
        $request = $this->marketplaceJpsRestGetappinfoPostRequest($jps, $lang, $ownerUid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceJpsRestGetappinfoPostAsync
     *
     * @param  string $jps (optional)
     * @param  string $lang (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetappinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceJpsRestGetappinfoPostAsync($jps = null, $lang = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceJpsRestGetappinfoPost'][0])
    {
        return $this->marketplaceJpsRestGetappinfoPostAsyncWithHttpInfo($jps, $lang, $ownerUid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceJpsRestGetappinfoPostAsyncWithHttpInfo
     *
     * @param  string $jps (optional)
     * @param  string $lang (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetappinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceJpsRestGetappinfoPostAsyncWithHttpInfo($jps = null, $lang = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceJpsRestGetappinfoPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseAppInfoResponse';
        $request = $this->marketplaceJpsRestGetappinfoPostRequest($jps, $lang, $ownerUid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceJpsRestGetappinfoPost'
     *
     * @param  string $jps (optional)
     * @param  string $lang (optional)
     * @param  int $ownerUid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetappinfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceJpsRestGetappinfoPostRequest($jps = null, $lang = null, $ownerUid = null, string $contentType = self::contentTypes['marketplaceJpsRestGetappinfoPost'][0])
    {

        if ($jps !== null && strlen($jps) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$jps" when calling JpsServiceApi.marketplaceJpsRestGetappinfoPost, must be smaller than or equal to 2147483647.');
        }
        if ($jps !== null && !preg_match("/(.*){0,2147483647}/", $jps)) {
            throw new \InvalidArgumentException("invalid value for \"jps\" when calling JpsServiceApi.marketplaceJpsRestGetappinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($lang !== null && strlen($lang) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$lang" when calling JpsServiceApi.marketplaceJpsRestGetappinfoPost, must be smaller than or equal to 2147483647.');
        }
        if ($lang !== null && !preg_match("/(.*){0,2147483647}/", $lang)) {
            throw new \InvalidArgumentException("invalid value for \"lang\" when calling JpsServiceApi.marketplaceJpsRestGetappinfoPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling JpsServiceApi.marketplaceJpsRestGetappinfoPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling JpsServiceApi.marketplaceJpsRestGetappinfoPost, must be bigger than or equal to -2147483648.');
        }
        

        $resourcePath = '/marketplace/jps/rest/getappinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($jps !== null) {
            $formParams['jps'] = ObjectSerializer::toFormValue($jps);
        }
        // form params
        if ($lang !== null) {
            $formParams['lang'] = ObjectSerializer::toFormValue($lang);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceJpsRestGetappsettingsPost
     *
     * @param  string $appUniqueName appUniqueName (required)
     * @param  string $settingsId settingsId (optional)
     * @param  string $lang lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetappsettingsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse
     */
    public function marketplaceJpsRestGetappsettingsPost($appUniqueName, $settingsId = null, $lang = null, string $contentType = self::contentTypes['marketplaceJpsRestGetappsettingsPost'][0])
    {
        list($response) = $this->marketplaceJpsRestGetappsettingsPostWithHttpInfo($appUniqueName, $settingsId, $lang, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceJpsRestGetappsettingsPostWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  string $settingsId (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetappsettingsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceJpsRestGetappsettingsPostWithHttpInfo($appUniqueName, $settingsId = null, $lang = null, string $contentType = self::contentTypes['marketplaceJpsRestGetappsettingsPost'][0])
    {
        $request = $this->marketplaceJpsRestGetappsettingsPostRequest($appUniqueName, $settingsId, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceJpsRestGetappsettingsPostAsync
     *
     * @param  string $appUniqueName (required)
     * @param  string $settingsId (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetappsettingsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceJpsRestGetappsettingsPostAsync($appUniqueName, $settingsId = null, $lang = null, string $contentType = self::contentTypes['marketplaceJpsRestGetappsettingsPost'][0])
    {
        return $this->marketplaceJpsRestGetappsettingsPostAsyncWithHttpInfo($appUniqueName, $settingsId, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceJpsRestGetappsettingsPostAsyncWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  string $settingsId (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetappsettingsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceJpsRestGetappsettingsPostAsyncWithHttpInfo($appUniqueName, $settingsId = null, $lang = null, string $contentType = self::contentTypes['marketplaceJpsRestGetappsettingsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse';
        $request = $this->marketplaceJpsRestGetappsettingsPostRequest($appUniqueName, $settingsId, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceJpsRestGetappsettingsPost'
     *
     * @param  string $appUniqueName (required)
     * @param  string $settingsId (optional)
     * @param  string $lang (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetappsettingsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceJpsRestGetappsettingsPostRequest($appUniqueName, $settingsId = null, $lang = null, string $contentType = self::contentTypes['marketplaceJpsRestGetappsettingsPost'][0])
    {

        // verify the required parameter 'appUniqueName' is set
        if ($appUniqueName === null || (is_array($appUniqueName) && count($appUniqueName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appUniqueName when calling marketplaceJpsRestGetappsettingsPost'
            );
        }
        if (strlen($appUniqueName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$appUniqueName" when calling JpsServiceApi.marketplaceJpsRestGetappsettingsPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $appUniqueName)) {
            throw new \InvalidArgumentException("invalid value for \"appUniqueName\" when calling JpsServiceApi.marketplaceJpsRestGetappsettingsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($settingsId !== null && strlen($settingsId) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$settingsId" when calling JpsServiceApi.marketplaceJpsRestGetappsettingsPost, must be smaller than or equal to 2147483647.');
        }
        if ($settingsId !== null && !preg_match("/(.*){0,2147483647}/", $settingsId)) {
            throw new \InvalidArgumentException("invalid value for \"settingsId\" when calling JpsServiceApi.marketplaceJpsRestGetappsettingsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($lang !== null && strlen($lang) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$lang" when calling JpsServiceApi.marketplaceJpsRestGetappsettingsPost, must be smaller than or equal to 2147483647.');
        }
        if ($lang !== null && !preg_match("/(.*){0,2147483647}/", $lang)) {
            throw new \InvalidArgumentException("invalid value for \"lang\" when calling JpsServiceApi.marketplaceJpsRestGetappsettingsPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/marketplace/jps/rest/getappsettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($appUniqueName !== null) {
            $formParams['appUniqueName'] = ObjectSerializer::toFormValue($appUniqueName);
        }
        // form params
        if ($settingsId !== null) {
            $formParams['settingsId'] = ObjectSerializer::toFormValue($settingsId);
        }
        // form params
        if ($lang !== null) {
            $formParams['lang'] = ObjectSerializer::toFormValue($lang);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceJpsRestGetengineversionPost
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetengineversionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetEngineVersionResponse
     */
    public function marketplaceJpsRestGetengineversionPost(string $contentType = self::contentTypes['marketplaceJpsRestGetengineversionPost'][0])
    {
        list($response) = $this->marketplaceJpsRestGetengineversionPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation marketplaceJpsRestGetengineversionPostWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetengineversionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetEngineVersionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceJpsRestGetengineversionPostWithHttpInfo(string $contentType = self::contentTypes['marketplaceJpsRestGetengineversionPost'][0])
    {
        $request = $this->marketplaceJpsRestGetengineversionPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetEngineVersionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetEngineVersionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetEngineVersionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetEngineVersionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetEngineVersionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceJpsRestGetengineversionPostAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetengineversionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceJpsRestGetengineversionPostAsync(string $contentType = self::contentTypes['marketplaceJpsRestGetengineversionPost'][0])
    {
        return $this->marketplaceJpsRestGetengineversionPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceJpsRestGetengineversionPostAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetengineversionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceJpsRestGetengineversionPostAsyncWithHttpInfo(string $contentType = self::contentTypes['marketplaceJpsRestGetengineversionPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetEngineVersionResponse';
        $request = $this->marketplaceJpsRestGetengineversionPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceJpsRestGetengineversionPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetengineversionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceJpsRestGetengineversionPostRequest(string $contentType = self::contentTypes['marketplaceJpsRestGetengineversionPost'][0])
    {


        $resourcePath = '/marketplace/jps/rest/getengineversion';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceJpsRestGetscriptingappidPost
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetscriptingappidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse
     */
    public function marketplaceJpsRestGetscriptingappidPost(string $contentType = self::contentTypes['marketplaceJpsRestGetscriptingappidPost'][0])
    {
        list($response) = $this->marketplaceJpsRestGetscriptingappidPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation marketplaceJpsRestGetscriptingappidPostWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetscriptingappidPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceJpsRestGetscriptingappidPostWithHttpInfo(string $contentType = self::contentTypes['marketplaceJpsRestGetscriptingappidPost'][0])
    {
        $request = $this->marketplaceJpsRestGetscriptingappidPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceJpsRestGetscriptingappidPostAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetscriptingappidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceJpsRestGetscriptingappidPostAsync(string $contentType = self::contentTypes['marketplaceJpsRestGetscriptingappidPost'][0])
    {
        return $this->marketplaceJpsRestGetscriptingappidPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceJpsRestGetscriptingappidPostAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetscriptingappidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceJpsRestGetscriptingappidPostAsyncWithHttpInfo(string $contentType = self::contentTypes['marketplaceJpsRestGetscriptingappidPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseGetScriptingAppidResponse';
        $request = $this->marketplaceJpsRestGetscriptingappidPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceJpsRestGetscriptingappidPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestGetscriptingappidPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceJpsRestGetscriptingappidPostRequest(string $contentType = self::contentTypes['marketplaceJpsRestGetscriptingappidPost'][0])
    {


        $resourcePath = '/marketplace/jps/rest/getscriptingappid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceJpsRestInstallPost
     *
     * @param  string $jps jps (required)
     * @param  string $settings settings (optional)
     * @param  string $envGroups envGroups (optional)
     * @param  string $logsPath logsPath (optional)
     * @param  string $envName envName (optional)
     * @param  string $displayName displayName (optional)
     * @param  bool $skipNodeEmails skipNodeEmails (optional)
     * @param  string $region region (optional)
     * @param  int $ownerUid ownerUid (optional)
     * @param  string $loggerName loggerName (optional)
     * @param  bool $writeOutputTasks writeOutputTasks (optional)
     * @param  string $nodeGroup nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestInstallPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse
     */
    public function marketplaceJpsRestInstallPost($jps, $settings = null, $envGroups = null, $logsPath = null, $envName = null, $displayName = null, $skipNodeEmails = null, $region = null, $ownerUid = null, $loggerName = null, $writeOutputTasks = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceJpsRestInstallPost'][0])
    {
        list($response) = $this->marketplaceJpsRestInstallPostWithHttpInfo($jps, $settings, $envGroups, $logsPath, $envName, $displayName, $skipNodeEmails, $region, $ownerUid, $loggerName, $writeOutputTasks, $nodeGroup, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceJpsRestInstallPostWithHttpInfo
     *
     * @param  string $jps (required)
     * @param  string $settings (optional)
     * @param  string $envGroups (optional)
     * @param  string $logsPath (optional)
     * @param  string $envName (optional)
     * @param  string $displayName (optional)
     * @param  bool $skipNodeEmails (optional)
     * @param  string $region (optional)
     * @param  int $ownerUid (optional)
     * @param  string $loggerName (optional)
     * @param  bool $writeOutputTasks (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestInstallPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceJpsRestInstallPostWithHttpInfo($jps, $settings = null, $envGroups = null, $logsPath = null, $envName = null, $displayName = null, $skipNodeEmails = null, $region = null, $ownerUid = null, $loggerName = null, $writeOutputTasks = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceJpsRestInstallPost'][0])
    {
        $request = $this->marketplaceJpsRestInstallPostRequest($jps, $settings, $envGroups, $logsPath, $envName, $displayName, $skipNodeEmails, $region, $ownerUid, $loggerName, $writeOutputTasks, $nodeGroup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceJpsRestInstallPostAsync
     *
     * @param  string $jps (required)
     * @param  string $settings (optional)
     * @param  string $envGroups (optional)
     * @param  string $logsPath (optional)
     * @param  string $envName (optional)
     * @param  string $displayName (optional)
     * @param  bool $skipNodeEmails (optional)
     * @param  string $region (optional)
     * @param  int $ownerUid (optional)
     * @param  string $loggerName (optional)
     * @param  bool $writeOutputTasks (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestInstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceJpsRestInstallPostAsync($jps, $settings = null, $envGroups = null, $logsPath = null, $envName = null, $displayName = null, $skipNodeEmails = null, $region = null, $ownerUid = null, $loggerName = null, $writeOutputTasks = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceJpsRestInstallPost'][0])
    {
        return $this->marketplaceJpsRestInstallPostAsyncWithHttpInfo($jps, $settings, $envGroups, $logsPath, $envName, $displayName, $skipNodeEmails, $region, $ownerUid, $loggerName, $writeOutputTasks, $nodeGroup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceJpsRestInstallPostAsyncWithHttpInfo
     *
     * @param  string $jps (required)
     * @param  string $settings (optional)
     * @param  string $envGroups (optional)
     * @param  string $logsPath (optional)
     * @param  string $envName (optional)
     * @param  string $displayName (optional)
     * @param  bool $skipNodeEmails (optional)
     * @param  string $region (optional)
     * @param  int $ownerUid (optional)
     * @param  string $loggerName (optional)
     * @param  bool $writeOutputTasks (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestInstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceJpsRestInstallPostAsyncWithHttpInfo($jps, $settings = null, $envGroups = null, $logsPath = null, $envName = null, $displayName = null, $skipNodeEmails = null, $region = null, $ownerUid = null, $loggerName = null, $writeOutputTasks = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceJpsRestInstallPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerMarketplaceResponseInstallResponse';
        $request = $this->marketplaceJpsRestInstallPostRequest($jps, $settings, $envGroups, $logsPath, $envName, $displayName, $skipNodeEmails, $region, $ownerUid, $loggerName, $writeOutputTasks, $nodeGroup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceJpsRestInstallPost'
     *
     * @param  string $jps (required)
     * @param  string $settings (optional)
     * @param  string $envGroups (optional)
     * @param  string $logsPath (optional)
     * @param  string $envName (optional)
     * @param  string $displayName (optional)
     * @param  bool $skipNodeEmails (optional)
     * @param  string $region (optional)
     * @param  int $ownerUid (optional)
     * @param  string $loggerName (optional)
     * @param  bool $writeOutputTasks (optional)
     * @param  string $nodeGroup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestInstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceJpsRestInstallPostRequest($jps, $settings = null, $envGroups = null, $logsPath = null, $envName = null, $displayName = null, $skipNodeEmails = null, $region = null, $ownerUid = null, $loggerName = null, $writeOutputTasks = null, $nodeGroup = null, string $contentType = self::contentTypes['marketplaceJpsRestInstallPost'][0])
    {

        // verify the required parameter 'jps' is set
        if ($jps === null || (is_array($jps) && count($jps) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jps when calling marketplaceJpsRestInstallPost'
            );
        }
        if (strlen($jps) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$jps" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $jps)) {
            throw new \InvalidArgumentException("invalid value for \"jps\" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($settings !== null && strlen($settings) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$settings" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($settings !== null && !preg_match("/(.*){0,2147483647}/", $settings)) {
            throw new \InvalidArgumentException("invalid value for \"settings\" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envGroups !== null && strlen($envGroups) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envGroups" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($envGroups !== null && !preg_match("/(.*){0,2147483647}/", $envGroups)) {
            throw new \InvalidArgumentException("invalid value for \"envGroups\" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($logsPath !== null && strlen($logsPath) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$logsPath" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($logsPath !== null && !preg_match("/(.*){0,2147483647}/", $logsPath)) {
            throw new \InvalidArgumentException("invalid value for \"logsPath\" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($envName !== null && strlen($envName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$envName" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($envName !== null && !preg_match("/(.*){0,2147483647}/", $envName)) {
            throw new \InvalidArgumentException("invalid value for \"envName\" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($displayName !== null && strlen($displayName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$displayName" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($displayName !== null && !preg_match("/(.*){0,2147483647}/", $displayName)) {
            throw new \InvalidArgumentException("invalid value for \"displayName\" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($region !== null && strlen($region) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$region" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($region !== null && !preg_match("/(.*){0,2147483647}/", $region)) {
            throw new \InvalidArgumentException("invalid value for \"region\" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        
        if ($ownerUid !== null && $ownerUid > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($ownerUid !== null && $ownerUid < -2147483648) {
            throw new \InvalidArgumentException('invalid value for "$ownerUid" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must be bigger than or equal to -2147483648.');
        }
        
        if ($loggerName !== null && strlen($loggerName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$loggerName" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($loggerName !== null && !preg_match("/(.*){0,2147483647}/", $loggerName)) {
            throw new \InvalidArgumentException("invalid value for \"loggerName\" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        if ($nodeGroup !== null && strlen($nodeGroup) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$nodeGroup" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must be smaller than or equal to 2147483647.');
        }
        if ($nodeGroup !== null && !preg_match("/(.*){0,2147483647}/", $nodeGroup)) {
            throw new \InvalidArgumentException("invalid value for \"nodeGroup\" when calling JpsServiceApi.marketplaceJpsRestInstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        

        $resourcePath = '/marketplace/jps/rest/install';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($settings !== null) {
            $formParams['settings'] = ObjectSerializer::toFormValue($settings);
        }
        // form params
        if ($envGroups !== null) {
            $formParams['envGroups'] = ObjectSerializer::toFormValue($envGroups);
        }
        // form params
        if ($logsPath !== null) {
            $formParams['logsPath'] = ObjectSerializer::toFormValue($logsPath);
        }
        // form params
        if ($envName !== null) {
            $formParams['envName'] = ObjectSerializer::toFormValue($envName);
        }
        // form params
        if ($displayName !== null) {
            $formParams['displayName'] = ObjectSerializer::toFormValue($displayName);
        }
        // form params
        if ($skipNodeEmails !== null) {
            $formParams['skipNodeEmails'] = ObjectSerializer::toFormValue($skipNodeEmails);
        }
        // form params
        if ($jps !== null) {
            $formParams['jps'] = ObjectSerializer::toFormValue($jps);
        }
        // form params
        if ($region !== null) {
            $formParams['region'] = ObjectSerializer::toFormValue($region);
        }
        // form params
        if ($ownerUid !== null) {
            $formParams['ownerUid'] = ObjectSerializer::toFormValue($ownerUid);
        }
        // form params
        if ($loggerName !== null) {
            $formParams['loggerName'] = ObjectSerializer::toFormValue($loggerName);
        }
        // form params
        if ($writeOutputTasks !== null) {
            $formParams['writeOutputTasks'] = ObjectSerializer::toFormValue($writeOutputTasks);
        }
        // form params
        if ($nodeGroup !== null) {
            $formParams['nodeGroup'] = ObjectSerializer::toFormValue($nodeGroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplaceJpsRestUninstallPost
     *
     * @param  string $appUniqueName appUniqueName (required)
     * @param  bool $force force (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestUninstallPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse
     */
    public function marketplaceJpsRestUninstallPost($appUniqueName, $force = null, string $contentType = self::contentTypes['marketplaceJpsRestUninstallPost'][0])
    {
        list($response) = $this->marketplaceJpsRestUninstallPostWithHttpInfo($appUniqueName, $force, $contentType);
        return $response;
    }

    /**
     * Operation marketplaceJpsRestUninstallPostWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  bool $force (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestUninstallPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplaceJpsRestUninstallPostWithHttpInfo($appUniqueName, $force = null, string $contentType = self::contentTypes['marketplaceJpsRestUninstallPost'][0])
    {
        $request = $this->marketplaceJpsRestUninstallPostRequest($appUniqueName, $force, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplaceJpsRestUninstallPostAsync
     *
     * @param  string $appUniqueName (required)
     * @param  bool $force (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestUninstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceJpsRestUninstallPostAsync($appUniqueName, $force = null, string $contentType = self::contentTypes['marketplaceJpsRestUninstallPost'][0])
    {
        return $this->marketplaceJpsRestUninstallPostAsyncWithHttpInfo($appUniqueName, $force, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplaceJpsRestUninstallPostAsyncWithHttpInfo
     *
     * @param  string $appUniqueName (required)
     * @param  bool $force (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestUninstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplaceJpsRestUninstallPostAsyncWithHttpInfo($appUniqueName, $force = null, string $contentType = self::contentTypes['marketplaceJpsRestUninstallPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComHivextApiServerResponseScriptEvalProxyResponse';
        $request = $this->marketplaceJpsRestUninstallPostRequest($appUniqueName, $force, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplaceJpsRestUninstallPost'
     *
     * @param  string $appUniqueName (required)
     * @param  bool $force (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marketplaceJpsRestUninstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marketplaceJpsRestUninstallPostRequest($appUniqueName, $force = null, string $contentType = self::contentTypes['marketplaceJpsRestUninstallPost'][0])
    {

        // verify the required parameter 'appUniqueName' is set
        if ($appUniqueName === null || (is_array($appUniqueName) && count($appUniqueName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appUniqueName when calling marketplaceJpsRestUninstallPost'
            );
        }
        if (strlen($appUniqueName) > 2147483647) {
            throw new \InvalidArgumentException('invalid length for "$appUniqueName" when calling JpsServiceApi.marketplaceJpsRestUninstallPost, must be smaller than or equal to 2147483647.');
        }
        if (!preg_match("/(.*){0,2147483647}/", $appUniqueName)) {
            throw new \InvalidArgumentException("invalid value for \"appUniqueName\" when calling JpsServiceApi.marketplaceJpsRestUninstallPost, must conform to the pattern /(.*){0,2147483647}/.");
        }
        


        $resourcePath = '/marketplace/jps/rest/uninstall';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($appUniqueName !== null) {
            $formParams['appUniqueName'] = ObjectSerializer::toFormValue($appUniqueName);
        }
        // form params
        if ($force !== null) {
            $formParams['force'] = ObjectSerializer::toFormValue($force);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
